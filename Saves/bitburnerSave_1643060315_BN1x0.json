{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":316,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.04060401,\"hacking_speed_mult\":1.0718221303,\"hacking_money_mult\":1.04060401,\"hacking_grow_mult\":1.04060401,\"hacking_exp\":4449407.948462934,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.0926342105,\"strength_mult\":1.04060401,\"defense_mult\":1.04060401,\"dexterity_mult\":1.04060401,\"agility_mult\":1.04060401,\"charisma_mult\":1.04060401,\"hacking_exp_mult\":1.1446644110000002,\"strength_exp_mult\":1.1446644110000002,\"defense_exp_mult\":1.1446644110000002,\"dexterity_exp_mult\":1.1446644110000002,\"agility_exp_mult\":1.1446644110000002,\"charisma_exp_mult\":1.1446644110000002,\"company_rep_mult\":1.04060401,\"faction_rep_mult\":1.04060401,\"money\":6726425482.844609,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"ps0\",\"ps1\",\"ps2\",\"ps3\",\"ps4\",\"ps5\",\"ps6\",\"ps7\",\"ps8\",\"ps9\",\"ps10\",\"ps11\",\"ps12\",\"ps13\",\"ps14\",\"ps15\",\"ps16\",\"ps17\",\"ps18\",\"ps19\",\"ps20\",\"ps21\",\"ps22\",\"ps23\",\"ps24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":129034.99999959714,\"ram\":64,\"totalMoneyGenerated\":745004415.0562181,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":128103.99999959377,\"ram\":64,\"totalMoneyGenerated\":745990700.8262097,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":126303.39999958721,\"ram\":64,\"totalMoneyGenerated\":746463022.8665012,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":126302.39999958721,\"ram\":64,\"totalMoneyGenerated\":747439417.8995564,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":126197.39999958682,\"ram\":64,\"totalMoneyGenerated\":764167823.9996041,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":124801.99999958237,\"ram\":64,\"totalMoneyGenerated\":770062036.5651394,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":122705.99999958122,\"ram\":64,\"totalMoneyGenerated\":770761983.1052612,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":119262.59999961783,\"ram\":64,\"totalMoneyGenerated\":771443085.4751136,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":118588.39999961859,\"ram\":64,\"totalMoneyGenerated\":772210302.8624859,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":118587.99999961861,\"ram\":64,\"totalMoneyGenerated\":788041078.5738655,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":116871.5999996484,\"ram\":64,\"totalMoneyGenerated\":781554380.4306841,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":116870.99999964843,\"ram\":64,\"totalMoneyGenerated\":810636673.0596868,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":86356.99999981777,\"ram\":64,\"totalMoneyGenerated\":778827173.6618682,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":85840.99999981589,\"ram\":64,\"totalMoneyGenerated\":779653022.984299,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":84851.19999981495,\"ram\":64,\"totalMoneyGenerated\":773645134.711089,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":83644.59999981525,\"ram\":64,\"totalMoneyGenerated\":765704262.3246715,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":81435.39999981133,\"ram\":64,\"totalMoneyGenerated\":749719034.99369,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":79803.59999981237,\"ram\":64,\"totalMoneyGenerated\":733968219.9260443,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":58151.999999797685,\"ram\":64,\"totalMoneyGenerated\":554687691.5337855,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":58149.19999979769,\"ram\":64,\"totalMoneyGenerated\":549172295.2061179,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":21984.400000037323,\"ram\":64,\"totalMoneyGenerated\":209800567.46802306,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":21982.00000003731,\"ram\":64,\"totalMoneyGenerated\":209777318.50641477,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9543.701143657314,\"onlineTimeSeconds\":21979.600000037302,\"ram\":64,\"totalMoneyGenerated\":57044641.51621717,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.560906015,\"onlineTimeSeconds\":3945.199999998609,\"ram\":1,\"totalMoneyGenerated\":6158.08641037955,\"name\":\"hacknet-node-23\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Netburners\",\"NiteSec\",\"Sector-12\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":11,\"name\":\"NeuroFlux Governor\"},{\"level\":12,\"name\":\"NeuroFlux Governor\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":14,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.04060401,\"crime_success_mult\":1.04060401,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"CyberSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.17169966165000003,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.3652970299095465,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":3284.614527364426,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":6953.075920932627,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":4714200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.04060401,\"hacknet_node_money_mult\":1.04060401,\"hacknet_node_purchase_cost_mult\":0.96059601,\"hacknet_node_ram_cost_mult\":0.96059601,\"hacknet_node_core_cost_mult\":0.96059601,\"hacknet_node_level_cost_mult\":0.96059601,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1643060315048,\"totalPlaytime\":175986600,\"playtimeSinceLastAug\":130023400,\"playtimeSinceLastBitnode\":175986600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-423936,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":13879045300.800453,\"hacknet\":15375780441.439468,\"hacknet_expenses\":-11959293643.599525,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-1029880610.2654153,\"total\":6726424482.844609,\"work\":0,\"servers\":-11000000,\"other\":-310200000,\"augmentations\":-9217603069.588211}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1842273.599999997,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":14144013849.807703,\"hacknet\":15460592600.072142,\"hacknet_expenses\":-12132491098.451822,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-1029880610.2654153,\"total\":6734335813.636581,\"work\":1001487.9999997264,\"servers\":-36283432.9157632,\"other\":-310400000,\"augmentations\":-9360374709.08141}},\"scriptProdSinceLastAug\":11978155706,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642889930041},{\"ID\":\"NS2\",\"unlockedOn\":1642891731038},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642903858976},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642903918947},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642915338657},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642920825237},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642922025236},{\"ID\":\"TOR\",\"unlockedOn\":1642923064230},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642930324267},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642943819660},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642975952308},{\"ID\":\"NITESEC\",\"unlockedOn\":1642976192304},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1643002833954},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643005593955},{\"ID\":\"4S\",\"unlockedOn\":1643048335076}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"89.0.0.3\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"ServerProfiler.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":6.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hacknet-lord.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":46706.841,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69079.80999966225,\"pid\":1,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacknet-lord.js\",\"url\":\"blob:file:///b8324fea-4734-4517-b0cd-d2164382013d\",\"moduleSequenceNumber\":102}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"while(true) {\\n\\t//hack('n00dles');\\n\\tgrow('n00dles');\\n\\tweaken('noodles');\\n}\",\"filename\":\"n00dles.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":62,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///935a3577-8e70-4ec7-b6c6-313aec25061a\",\"moduleSequenceNumber\":101}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":63,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nfunction laugh(){\\n    var audio = new Audio(\\\"http://commondatastorage.googleapis.com/codeskulptor-assets/Evillaugh.ogg\\\");\\n    audio.play();\\n}\\nexport async function main(ns) {\\n    let i = 1;\\n    while(\\\"bread\\\") {\\n        ns.print(i);\\n        laugh();\\n        await ns.sleep(4000);\\n        ++i;\\n    }\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///967e06c8-2026-4582-99e6-220240ea5348\",\"moduleSequenceNumber\":5729}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":5729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Continuously try to purchase servers until we've reached the maximum\\n\\t// amount of servers\\n\\tlet ram = 8;\\n\\tlet i = 0;\\n\\n\\twhile (i < ns.getPurchasedServerLimit()) {\\n\\t\\t// Check if we have enough money to purchase a server\\n\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\n\\t\\t\\t// Don't buy server /w name if already exists\\n\\t\\t\\tif (ns.serverExists(\\\"ps\\\"+ i)) {++i; continue;}\\n\\t\\t\\t// If we have enough money, then:\\n\\t\\t\\t//  1. Purchase the server\\n\\t\\t\\t//  2. Copy our hacking script onto the newly-purchased server\\n\\t\\t\\t//  3. Run our hacking script on the newly-purchased server with 3 threads\\n\\t\\t\\t//  4. Increment our iterator to indicate that we've bought a new server\\n\\t\\t\\tlet hostname = ns.purchaseServer(\\\"ps\\\" + i, ram);\\n\\t\\t\\tawait ns.scp(\\\"farm.js\\\", hostname);\\n\\t\\t\\tns.exec(\\\"farm.js\\\", hostname, 3);\\n\\t\\t\\t++i;\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.print(\\\"Purchased all possible Servers\\\");\\n}\",\"filename\":\"server-farmer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server-farmer.js\",\"url\":\"blob:file:///fca8d2dd-9b23-4891-8e2c-d3fdf812f430\",\"moduleSequenceNumber\":6915}],\"dependents\":[],\"ramUsage\":6.25,\"server\":\"home\",\"moduleSequenceNumber\":65,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet i = 0;\\n\\tlet cost = ns.getScriptRam(\\\"farm.js\\\");\\n\\n    ns.print(\\\"ping\\\");\\n\\tlet servers = getAllRootedServers(10);\\n    ns.print(servers);\\n    for (let i = 0; i < servers.length; i++) {\\n        ns.print(\\\"setting up \\\" + servers[i]);\\n        const server = servers[i];\\n\\t\\tns.killall(server);\\n\\t\\tawait ns.scp(\\\"farm.js\\\", server);\\n\\n        let maxThreads = Math.floor(ns.getServerMaxRam(server)/cost);\\n        if (maxThreads > 0){\\n            ns.exec(\\\"farm.js\\\", server, maxThreads);\\n        }\\n\\t};\\n\\n\\tfunction getAllRootedServers(depth) {\\n\\t\\tlet servers = [];\\n        let serversVuln = [];\\n\\t\\tlet rhost = ns.getHostname();\\n\\n\\t\\tgetRootedSubServers(rhost);\\n\\t\\tfor (let i = 1; i < depth; i++) {\\n\\t\\t\\tservers.forEach(server => {\\n\\t\\t\\t\\tgetRootedSubServers(server);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tfunction getRootedSubServers(host){\\n\\t\\t\\tlet subservers = ns.scan(host)\\n\\t\\t\\tsubservers.forEach(server => {\\n\\t\\t\\t\\tif (!servers.includes(server) && server !== rhost){\\n                    ns.print(\\\"Found \\\" + server);\\n                    servers.push(server);\\n                    if (ns.hasRootAccess(server)){\\n                        serversVuln.push(server);\\n                    }\\n                    else {\\n                        // Try breaking in\\n                        let toolsUsed = 0;\\n                        if (ns.fileExists(\\\"BruteSSH.exe\\\")) { ns.brutessh(server); ++toolsUsed; }\\n                        if (ns.fileExists(\\\"FTPCrack.exe\\\")) { ns.ftpcrack(server); ++toolsUsed; }\\n                        if (ns.fileExists(\\\"HTTPWorm.exe\\\")) { ns.httpworm(server); ++toolsUsed; }\\n                        if (toolsUsed >= ns.getServerNumPortsRequired(server)){\\n                            ns.nuke(server);\\n                        }\\n                        ns.print(\\\"Forced \\\" + server + \\\" with \\\" + toolsUsed + \\\"/\\\" + ns.getServerNumPortsRequired(server) + \\\" tools\\\");\\n                        if (ns.hasRootAccess(server)){\\n                            serversVuln.push(server);\\n                        }\\n                    }\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n            return subservers;\\n\\t\\t}\\n        return serversVuln;\\n\\t}\\n    ns.print(\\\"DONE\\\");\\n}\",\"filename\":\"server-updater.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server-updater.js\",\"url\":\"blob:file:///15e63e83-bdb7-4ee4-9651-a0851b142d53\",\"moduleSequenceNumber\":3711}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":66,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\n    let allowance = 0.25;\\n\\n    while (true) {\\n        // Figure out what the cheapest upgrade will be\\n        var upgradeType = \\\"null\\\";\\n        var upgradeNode = 0;\\n        var upgradeCost = 100000000000;\\n\\n        if (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n            upgradeType = \\\"new\\\";\\n            upgradeCost = ns.hacknet.getPurchaseNodeCost();\\n        }\\n        for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n            if (ns.hacknet.getLevelUpgradeCost(i, 1) < upgradeCost){\\n                upgradeType = \\\"level\\\";\\n                upgradeNode = i;\\n            }\\n            if (ns.hacknet.getRamUpgradeCost(i, 1) < upgradeCost){\\n                upgradeType = \\\"ram\\\";\\n                upgradeNode = i;\\n            }\\n            if (ns.hacknet.getCoreUpgradeCost(i, 1) < upgradeCost){\\n                upgradeType = \\\"core\\\";\\n                upgradeNode = i;\\n            }\\n        }\\n        \\n        // Try buying it?\\n        if (upgradeType == null) { \\n            ns.alert(\\\"Maxed out hacknet?!\\\")\\n            return;\\n        }\\n        // Sleep longer to wait for money\\n        let money = ns.getPlayer().money * allowance;\\n        ns.print(\\\"I have \\\" + money + \\\"; Planning to buy \\\" + upgradeType + \\\" for node \\\" + upgradeNode + \\\" for \\\" + upgradeCost);\\n        if (money < upgradeCost) { await ns.sleep(500); continue;}\\n        switch (upgradeType) {\\n            case \\\"new\\\":\\n                ns.hacknet.purchaseNode();\\n                break;\\n            case \\\"level\\\":\\n                ns.hacknet.upgradeLevel(upgradeNode, 1);\\n                break;\\n            case \\\"ram\\\":\\n                ns.hacknet.upgradeRam(upgradeNode, 1);\\n                break;\\n            case \\\"core\\\":\\n                ns.hacknet.upgradeCore(upgradeNode, 1);\\n                break;\\n        }\\n        await ns.sleep(10);\\n    }\\n}\",\"filename\":\"hacknet-lord.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacknet-lord.js\",\"url\":\"blob:file:///0f753c45-49c7-472a-9d3d-0a1003885df1\",\"moduleSequenceNumber\":123}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @public\\n */\\n type FilenameOrPID = number | string;\\n\\n /**\\n  * @public\\n  */\\n interface Player {\\n   hacking: number;\\n   hp: number;\\n   max_hp: number;\\n   strength: number;\\n   defense: number;\\n   dexterity: number;\\n   agility: number;\\n   charisma: number;\\n   intelligence: number;\\n   hacking_chance_mult: number;\\n   hacking_speed_mult: number;\\n   hacking_money_mult: number;\\n   hacking_grow_mult: number;\\n   hacking_exp: number;\\n   strength_exp: number;\\n   defense_exp: number;\\n   dexterity_exp: number;\\n   agility_exp: number;\\n   charisma_exp: number;\\n   hacking_mult: number;\\n   strength_mult: number;\\n   defense_mult: number;\\n   dexterity_mult: number;\\n   agility_mult: number;\\n   charisma_mult: number;\\n   hacking_exp_mult: number;\\n   strength_exp_mult: number;\\n   defense_exp_mult: number;\\n   dexterity_exp_mult: number;\\n   agility_exp_mult: number;\\n   charisma_exp_mult: number;\\n   company_rep_mult: number;\\n   faction_rep_mult: number;\\n   numPeopleKilled: number;\\n   money: number;\\n   city: string;\\n   location: string;\\n   companyName: string;\\n   crime_money_mult: number;\\n   crime_success_mult: number;\\n   isWorking: boolean;\\n   workType: string;\\n   currentWorkFactionName: string;\\n   currentWorkFactionDescription: string;\\n   workHackExpGainRate: number;\\n   workStrExpGainRate: number;\\n   workDefExpGainRate: number;\\n   workDexExpGainRate: number;\\n   workAgiExpGainRate: number;\\n   workChaExpGainRate: number;\\n   workRepGainRate: number;\\n   workMoneyGainRate: number;\\n   workMoneyLossRate: number;\\n   workHackExpGained: number;\\n   workStrExpGained: number;\\n   workDefExpGained: number;\\n   workDexExpGained: number;\\n   workAgiExpGained: number;\\n   workChaExpGained: number;\\n   workRepGained: number;\\n   workMoneyGained: number;\\n   createProgramName: string;\\n   createProgramReqLvl: number;\\n   className: string;\\n   crimeType: string;\\n   work_money_mult: number;\\n   hacknet_node_money_mult: number;\\n   hacknet_node_purchase_cost_mult: number;\\n   hacknet_node_ram_cost_mult: number;\\n   hacknet_node_core_cost_mult: number;\\n   hacknet_node_level_cost_mult: number;\\n   hasWseAccount: boolean;\\n   hasTixApiAccess: boolean;\\n   has4SData: boolean;\\n   has4SDataTixApi: boolean;\\n   bladeburner_max_stamina_mult: number;\\n   bladeburner_stamina_gain_mult: number;\\n   bladeburner_analysis_mult: number;\\n   bladeburner_success_chance_mult: number;\\n   bitNodeN: number;\\n   totalPlaytime: number;\\n   playtimeSinceLastAug: number;\\n   playtimeSinceLastBitnode: number;\\n   jobs: any;\\n   factions: string[];\\n   tor: boolean;\\n   hasCorporation: boolean;\\n }\\n \\n /**\\n  * @public\\n  */\\n interface RunningScript {\\n   args: string[];\\n   filename: string;\\n   logs: string[];\\n   offlineExpGained: number;\\n   offlineMoneyMade: number;\\n   offlineRunningTime: number;\\n   onlineExpGained: number;\\n   onlineMoneyMade: number;\\n   onlineRunningTime: number;\\n   pid: number;\\n   ramUsage: number;\\n   server: string;\\n   threads: number;\\n }\\n \\n /**\\n  * Data representing the internal values of a crime.\\n  * @public\\n  */\\n export interface CrimeStats {\\n   /** Number representing the difficulty of the crime. Used for success chance calculations */\\n   difficulty: number;\\n   /** Amount of karma lost for successfully committing this crime */\\n   karma: number;\\n   /** How many people die as a result of this crime */\\n   kills: number;\\n   /** How much money is given */\\n   money: number;\\n   /** Name of crime */\\n   name: number;\\n   /** Milliseconds it takes to attempt the crime */\\n   time: number;\\n   /** Description of the crime activity */\\n   type: string;\\n   /** hacking level impact on success change of the crime */\\n   hacking_success_weight: number;\\n   /** strength level impact on success change of the crime */\\n   strength_success_weight: number;\\n   /** defense level impact on success change of the crime */\\n   defense_success_weight: number;\\n   /** dexterity level impact on success change of the crime */\\n   dexterity_success_weight: number;\\n   /** agility level impact on success change of the crime */\\n   agility_success_weight: number;\\n   /** charisma level impact on success change of the crime */\\n   charisma_success_weight: number;\\n   /** hacking exp gained from crime */\\n   hacking_exp: number;\\n   /** strength exp gained from crime */\\n   strength_exp: number;\\n   /** defense exp gained from crime */\\n   defense_exp: number;\\n   /** dexterity exp gained from crime */\\n   dexterity_exp: number;\\n   /** agility exp gained from crime */\\n   agility_exp: number;\\n   /** charisma exp gained from crime */\\n   charisma_exp: number;\\n   /** intelligence exp gained from crime */\\n   intelligence_exp: number;\\n }\\n \\n /**\\n  * Data representing the internal values of an Augmentation.\\n  * @public\\n  */\\n export interface AugmentationStats {\\n   /** Multipler to hacking skill */\\n   hacking_mult?: number;\\n   /** Multipler to strength skill */\\n   strength_mult?: number;\\n   /** Multipler to defense skill */\\n   defense_mult?: number;\\n   /** Multipler to dexterity skill */\\n   dexterity_mult?: number;\\n   /** Multipler to agility skill */\\n   agility_mult?: number;\\n   /** Multipler to charisma skill */\\n   charisma_mult?: number;\\n   /** Multipler to hacking experience gain rate */\\n   hacking_exp_mult?: number;\\n   /** Multipler to strength experience gain rate */\\n   strength_exp_mult?: number;\\n   /** Multipler to defense experience gain rate */\\n   defense_exp_mult?: number;\\n   /** Multipler to dexterity experience gain rate */\\n   dexterity_exp_mult?: number;\\n   /** Multipler to agility experience gain rate */\\n   agility_exp_mult?: number;\\n   /** Multipler to charisma experience gain rate */\\n   charisma_exp_mult?: number;\\n   /** Multipler to chance of successfully performing a hack */\\n   hacking_chance_mult?: number;\\n   /** Multipler to hacking speed */\\n   hacking_speed_mult?: number;\\n   /** Multipler to amount of money the player gains from hacking */\\n   hacking_money_mult?: number;\\n   /** Multipler to amount of money injected into servers using grow */\\n   hacking_grow_mult?: number;\\n   /** Multipler to amount of reputation gained when working */\\n   company_rep_mult?: number;\\n   /** Multipler to amount of reputation gained when working */\\n   faction_rep_mult?: number;\\n   /** Multipler to amount of money gained from crimes */\\n   crime_money_mult?: number;\\n   /** Multipler to crime success rate */\\n   crime_success_mult?: number;\\n   /** Multipler to amount of money gained from working */\\n   work_money_mult?: number;\\n   /** Multipler to amount of money produced by Hacknet Nodes */\\n   hacknet_node_money_mult?: number;\\n   /** Multipler to cost of purchasing a Hacknet Node */\\n   hacknet_node_purchase_cost_mult?: number;\\n   /** Multipler to cost of ram for a Hacknet Node */\\n   hacknet_node_ram_cost_mult?: number;\\n   /** Multipler to cost of core for a Hacknet Node */\\n   hacknet_node_core_cost_mult?: number;\\n   /** Multipler to cost of leveling up a Hacknet Node */\\n   hacknet_node_level_cost_mult?: number;\\n   /** Multipler to Bladeburner max stamina */\\n   bladeburner_max_stamina_mult?: number;\\n   /** Multipler to Bladeburner stamina gain rate */\\n   bladeburner_stamina_gain_mult?: number;\\n   /** Multipler to effectiveness in Bladeburner Field Analysis */\\n   bladeburner_analysis_mult?: number;\\n   /** Multipler to success chance in Bladeburner contracts/operations */\\n   bladeburner_success_chance_mult?: number;\\n }\\n \\n /**\\n  * Options to affect the behavior of {@link NS.hack | hack}, {@link NS.grow | grow}, and {@link NS.weaken | weaken}.\\n  * @public\\n  */\\n export interface BasicHGWOptions {\\n   /** Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with. */\\n   threads?: number;\\n   /** Set to true this action will affect the stock market. */\\n   stock?: boolean;\\n }\\n \\n /**\\n  * Options to affect the behavior of {@link CodingContract} attempt.\\n  * @public\\n  */\\n export interface CodingAttemptOptions {\\n   /** If truthy, then the function will return a string that states the contract’s reward when it is successfully solved. */\\n   returnReward: boolean;\\n }\\n \\n /**\\n  * Return value of {@link Sleeve.getSleevePurchasableAugs | getSleevePurchasableAugs}\\n  * @public\\n  */\\n export interface AugmentPair {\\n   /** augmentation name */\\n   name: string;\\n   /** augmentation cost */\\n   cost: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export enum PositionTypes {\\n   Long = \\\"L\\\",\\n   Short = \\\"S\\\",\\n }\\n \\n /**\\n  * @public\\n  */\\n export enum OrderTypes {\\n   LimitBuy = \\\"Limit Buy Order\\\",\\n   LimitSell = \\\"Limit Sell Order\\\",\\n   StopBuy = \\\"Stop Buy Order\\\",\\n   StopSell = \\\"Stop Sell Order\\\",\\n }\\n \\n /**\\n  * Value in map of {@link StockOrder}\\n  * @public\\n  */\\n export interface StockOrderObject {\\n   /** Number of shares */\\n   shares: number;\\n   /** Price per share */\\n   price: number;\\n   /** Order type */\\n   type: OrderTypes;\\n   /** Order position */\\n   position: PositionTypes;\\n }\\n \\n /**\\n  * Return value of {@link TIX.getOrders | getOrders}\\n  *\\n  * Keys are stock symbols, properties are arrays of {@link StockOrderObject}\\n  * @public\\n  */\\n export interface StockOrder {\\n   [key: string]: StockOrderObject[];\\n }\\n \\n /**\\n  * A single process on a server.\\n  * @public\\n  */\\n export interface ProcessInfo {\\n   /** Script name. */\\n   filename: string;\\n   /** Number of threads script is running with */\\n   threads: number;\\n   /** Script's arguments */\\n   args: string[];\\n   /** Process ID */\\n   pid: number;\\n }\\n \\n /**\\n  * Hack related multipliers.\\n  * @public\\n  */\\n export interface HackingMultipliers {\\n   /** Player's hacking chance multiplier. */\\n   chance: number;\\n   /** Player's hacking speed multiplier. */\\n   speed: number;\\n   /** Player's hacking money stolen multiplier. */\\n   money: number;\\n   /** Player's hacking growth multiplier */\\n   growth: number;\\n }\\n \\n /**\\n  * Hacknet related multipliers.\\n  * @public\\n  */\\n export interface HacknetMultipliers {\\n   /** Player's hacknet production multiplier */\\n   production: number;\\n   /** Player's hacknet purchase cost multiplier */\\n   purchaseCost: number;\\n   /** Player's hacknet ram cost multiplier */\\n   ramCost: number;\\n   /** Player's hacknet core cost multiplier */\\n   coreCost: number;\\n   /** Player's hacknet level cost multiplier */\\n   levelCost: number;\\n }\\n \\n /**\\n  * Hacknet node related constants\\n  * @public\\n  */\\n export interface HacknetNodeConstants {\\n   /** Amount of money gained per level */\\n   MoneyGainPerLevel: number;\\n   /** Base cost for a new node */\\n   BaseCost: number;\\n   /** Base cost per level */\\n   LevelBaseCost: number;\\n   /** Base cost to incrase RAM */\\n   RamBaseCost: number;\\n   /** Base cost to increase cores */\\n   CoreBaseCost: number;\\n   /** Multiplier to purchase new node */\\n   PurchaseNextMult: number;\\n   /** Multiplier to increase node level */\\n   UpgradeLevelMult: number;\\n   /** Multiplier to increase RAM */\\n   UpgradeRamMult: number;\\n   /** Multiplier to increase cores */\\n   UpgradeCoreMult: number;\\n   /** Max node level */\\n   MaxLevel: number;\\n   /** Max amount of RAM in GB */\\n   MaxRam: number;\\n   /** Max number of cores */\\n   MaxCores: number;\\n }\\n \\n /**\\n  * Hacknet server related constants\\n  * @public\\n  */\\n export interface HacknetServerConstants {\\n   /** Number of hashes calculated per level */\\n   HashesPerLevel: number;\\n   /** Base cost for a new server */\\n   BaseCost: number;\\n   /** Base cost to increase RAM */\\n   RamBaseCost: number;\\n   /** Base cost to increase cores */\\n   CoreBaseCost: number;\\n   /** Base cost to upgrade cache */\\n   CacheBaseCost: number;\\n   /** Multiplier to purchase a new server */\\n   PurchaseMult: number;\\n   /** Multiplier to increase server level */\\n   UpgradeLevelMult: number;\\n   /** Multiplier to increase RAM */\\n   UpgradeRamMult: number;\\n   /** Multiplier to increase cores */\\n   UpgradeCoreMult: number;\\n   /** Multiplier to upgrade cache */\\n   UpgradeCacheMult: number;\\n   /** Max number of servers */\\n   MaxServers: number;\\n   /** Max level for a server */\\n   MaxLevel: number;\\n   /** Max amount of RAM in GB */\\n   MaxRam: number;\\n   /** Max number of cores */\\n   MaxCores: number;\\n   /** Max cache size */\\n   MaxCache: number;\\n }\\n \\n /**\\n  * A single server.\\n  * @public\\n  */\\n export interface Server {\\n   /**\\n    * How many CPU cores this server has. Maximum of 8.\\n    * Affects magnitude of grow and weaken.\\n    */\\n   cpuCores: number;\\n \\n   /** Flag indicating whether the FTP port is open */\\n   ftpPortOpen: boolean;\\n \\n   /** Flag indicating whether player has admin/root access to this server */\\n   hasAdminRights: boolean;\\n \\n   /** Hostname. Must be unique */\\n   hostname: string;\\n \\n   /** Flag indicating whether HTTP Port is open */\\n   httpPortOpen: boolean;\\n \\n   /** IP Address. Must be unique */\\n   ip: string;\\n \\n   /** Flag indicating whether player is curently connected to this server */\\n   isConnectedTo: boolean;\\n \\n   /** RAM (GB) available on this server */\\n   maxRam: number;\\n \\n   /**\\n    * Name of company/faction/etc. that this server belongs to.\\n    * Optional, not applicable to all Servers\\n    */\\n   organizationName: string;\\n \\n   /** RAM (GB) used. i.e. unavailable RAM */\\n   ramUsed: number;\\n \\n   /** Flag indicating whether SMTP Port is open */\\n   smtpPortOpen: boolean;\\n \\n   /** Flag indicating whether SQL Port is open */\\n   sqlPortOpen: boolean;\\n \\n   /** Flag indicating whether the SSH Port is open */\\n   sshPortOpen: boolean;\\n \\n   /** Flag indicating whether this is a purchased server */\\n   purchasedByPlayer: boolean;\\n \\n   /** Flag indicating whether this server has a backdoor installed by a player */\\n   backdoorInstalled: boolean;\\n \\n   /**\\n    * Initial server security level\\n    * (i.e. security level when the server was created)\\n    */\\n   baseDifficulty: number;\\n \\n   /** Server Security Level */\\n   hackDifficulty: number;\\n \\n   /** Minimum server security level that this server can be weakened to */\\n   minDifficulty: number;\\n \\n   /** How much money currently resides on the server and can be hacked */\\n   moneyAvailable: number;\\n \\n   /** Maximum amount of money that this server can hold */\\n   moneyMax: number;\\n \\n   /** Number of open ports required in order to gain admin/root access */\\n   numOpenPortsRequired: number;\\n \\n   /** How many ports are currently opened on the server */\\n   openPortCount: number;\\n \\n   /** Hacking level required to hack this server */\\n   requiredHackingSkill: number;\\n \\n   /**\\n    * Parameter that affects how effectively this server's money can\\n    * be increased using the grow() Netscript function\\n    */\\n   serverGrowth: number;\\n }\\n \\n /**\\n  * All multipliers affecting the difficulty of the current challenge.\\n  * @public\\n  */\\n export interface BitNodeMultipliers {\\n   /** Influences how quickly the player's agility level (not exp) scales */\\n   AgilityLevelMultiplier: number;\\n   /** Influences the base cost to purchase an augmentation. */\\n   AugmentationMoneyCost: number;\\n   /** Influences the base rep the player must have with a faction to purchase an augmentation. */\\n   AugmentationRepCost: number;\\n   /** Influences how quickly the player can gain rank within Bladeburner. */\\n   BladeburnerRank: number;\\n   /** Influences the cost of skill levels from Bladeburner. */\\n   BladeburnerSkillCost: number;\\n   /** Influences how quickly the player's charisma level (not exp) scales */\\n   CharismaLevelMultiplier: number;\\n   /** Influences the experience gained for each ability when a player completes a class. */\\n   ClassGymExpGain: number;\\n   /** Influences the amount of money gained from completing Coding Contracts */\\n   CodingContractMoney: number;\\n   /** Influences the experience gained for each ability when the player completes working their job. */\\n   CompanyWorkExpGain: number;\\n   /** Influences how much money the player earns when completing working their job. */\\n   CompanyWorkMoney: number;\\n   /** Influences the valuation of corporations created by the player. */\\n   CorporationValuation: number;\\n   /** Influences the base experience gained for each ability when the player commits a crime. */\\n   CrimeExpGain: number;\\n   /** Influences the base money gained when the player commits a crime. */\\n   CrimeMoney: number;\\n   /** Influences how many Augmentations you need in order to get invited to the Daedalus faction */\\n   DaedalusAugsRequirement: number;\\n   /** Influences how quickly the player's defense level (not exp) scales */\\n   DefenseLevelMultiplier: number;\\n   /** Influences how quickly the player's dexterity level (not exp) scales */\\n   DexterityLevelMultiplier: number;\\n   /** Influences how much rep the player gains in each faction simply by being a member. */\\n   FactionPassiveRepGain: number;\\n   /** Influences the experience gained for each ability when the player completes work for a Faction. */\\n   FactionWorkExpGain: number;\\n   /** Influences how much rep the player gains when performing work for a faction. */\\n   FactionWorkRepGain: number;\\n   /** Influences how much it costs to unlock the stock market's 4S Market Data API */\\n   FourSigmaMarketDataApiCost: number;\\n   /** Influences how much it costs to unlock the stock market's 4S Market Data (NOT API) */\\n   FourSigmaMarketDataCost: number;\\n   /** Influences the respect gain and money gain of your gang. */\\n   GangSoftcap: number;\\n   /** Influences the experienced gained when hacking a server. */\\n   HackExpGain: number;\\n   /** Influences how quickly the player's hacking level (not experience) scales */\\n   HackingLevelMultiplier: number;\\n   /** Influences how much money is produced by Hacknet Nodes and the hash rate of Hacknet Servers (unlocked in BitNode-9) */\\n   HacknetNodeMoney: number;\\n   /** Influences how much money it costs to upgrade your home computer's RAM */\\n   HomeComputerRamCost: number;\\n   /** Influences how much money is gained when the player infiltrates a company. */\\n   InfiltrationMoney: number;\\n   /** Influences how much rep the player can gain from factions when selling stolen documents and secrets */\\n   InfiltrationRep: number;\\n   /** Influences how much money can be stolen from a server when the player performs a hack against it through the Terminal. */\\n   ManualHackMoney: number;\\n   /** Influence how much it costs to purchase a server */\\n   PurchasedServerCost: number;\\n   /** Influences the maximum number of purchased servers you can have */\\n   PurchasedServerLimit: number;\\n   /** Influences the maximum allowed RAM for a purchased server */\\n   PurchasedServerMaxRam: number;\\n   /** Influences cost of any purchased server at or above 128GB */\\n   PurchasedServerSoftCap: number;\\n   /** Influences the minimum favor the player must have with a faction before they can donate to gain rep. */\\n   RepToDonateToFaction: number;\\n   /** Influences how much the money on a server can be reduced when a script performs a hack against it. */\\n   ScriptHackMoney: number;\\n   /** Influences how much of the money stolen by a scripted hack will be added to the player's money. */\\n   ScriptHackMoneyGain: number;\\n   /** Influences the growth percentage per cycle against a server. */\\n   ServerGrowthRate: number;\\n   /** Influences the maxmimum money that a server can grow to. */\\n   ServerMaxMoney: number;\\n   /** Influences the initial money that a server starts with. */\\n   ServerStartingMoney: number;\\n   /** Influences the initial security level (hackDifficulty) of a server. */\\n   ServerStartingSecurity: number;\\n   /** Influences the weaken amount per invocation against a server. */\\n   ServerWeakenRate: number;\\n   /** Influences how quickly the player's strength level (not exp) scales */\\n   StrengthLevelMultiplier: number;\\n   /** Influences the power of the gift */\\n   StaneksGiftPowerMultiplier: number;\\n   /** Influences the size of the gift */\\n   StaneksGiftExtraSize: number;\\n   /** Influences the hacking skill required to backdoor the world daemon. */\\n   WorldDaemonDifficulty: number;\\n }\\n \\n /**\\n  * Object representing all the values related to a hacknet node.\\n  * @public\\n  */\\n export interface NodeStats {\\n   /** Node's name */\\n   name: string;\\n   /** Node's level */\\n   level: number;\\n   /** Node's RAM (GB) */\\n   ram: number;\\n   /** Node's used RAM (GB) */\\n   ramUsed: number;\\n   /** Node's number of cores */\\n   cores: number;\\n   /** Cache level. Only applicable for Hacknet Servers */\\n   cache: number;\\n   /** Hash Capacity provided by this Node. Only applicable for Hacknet Servers */\\n   hashCapacity: number;\\n   /** Node's production per second */\\n   production: number;\\n   /** Number of seconds since Node has been purchased */\\n   timeOnline: number;\\n   /** Total number of money Node has produced */\\n   totalProduction: number;\\n }\\n \\n /**\\n  * Short summary of the players skills.\\n  * @public\\n  */\\n export interface PlayerSkills {\\n   /** Hacking level */\\n   hacking: number;\\n   /** Strength level */\\n   strength: number;\\n   /** Defense level */\\n   defense: number;\\n   /** Dexterity level */\\n   dexterity: number;\\n   /** Agility level */\\n   agility: number;\\n   /** Chraisma level */\\n   charisma: number;\\n   /** Intelligence level */\\n   intelligence: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface CharacterMult {\\n   /** Agility stat */\\n   agility: number;\\n   /** Agility exp */\\n   agilityExp: number;\\n   /** Company reputation */\\n   companyRep: number;\\n   /** Money earned from crimes */\\n   crimeMoney: number;\\n   /** Crime success chance */\\n   crimeSuccess: number;\\n   /** Defense stat */\\n   defense: number;\\n   /** Defense exp */\\n   defenseExp: number;\\n   /** Dexterity stat */\\n   dexterity: number;\\n   /** Dexterity exp */\\n   dexterityExp: number;\\n   /** Faction reputation */\\n   factionRep: number;\\n   /** Hacking stat */\\n   hacking: number;\\n   /** Hacking exp */\\n   hackingExp: number;\\n   /** Strength stat */\\n   strength: number;\\n   /** Strength exp */\\n   strengthExp: number;\\n   /** Money earned from jobs */\\n   workMoney: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface CharacterInfo {\\n   /** Current BitNode number */\\n   bitnode: number;\\n   /** Name of city you are currently in */\\n   city: string;\\n   /** Array of factions you are currently a member of */\\n   factions: string[];\\n   /** Current health points */\\n   hp: number;\\n   /** Array of all companies at which you have jobs */\\n   company: string[];\\n   /** Array of job positions for all companies you are employed at. Same order as 'jobs' */\\n   jobTitle: string[];\\n   /** Maximum health points */\\n   maxHp: number;\\n   /** Boolean indicating whether or not you have a tor router */\\n   tor: boolean;\\n   /** Object with many of the player's multipliers from Augmentations/Source Files */\\n   mult: CharacterMult;\\n   /** Timed worked in ms */\\n   timeWorked: number;\\n   /** Hacking experience earned so far from work */\\n   workHackExpGain: number;\\n   /** Str experience earned so far from work */\\n   workStrExpGain: number;\\n   /** Def experience earned so far from work */\\n   workDefExpGain: number;\\n   /** Dex experience earned so far from work */\\n   workDexExpGain: number;\\n   /** Agi experience earned so far from work */\\n   workAgiExpGain: number;\\n   /** Cha experience earned so far from work */\\n   workChaExpGain: number;\\n   /** Reputation earned so far from work, if applicable */\\n   workRepGain: number;\\n   /** Money earned so far from work, if applicable */\\n   workMoneyGain: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface SleeveWorkGains {\\n   /** Hacking exp gained from work */\\n   workHackExpGain: number;\\n   /** Strength exp gained from work */\\n   workStrExpGain: number;\\n   /** Defense exp gained from work, */\\n   workDefExpGain: number;\\n   /** Dexterity exp gained from work */\\n   workDexExpGain: number;\\n   /** Agility exp gained from work */\\n   workAgiExpGain: number;\\n   /** Charisma exp gained from work */\\n   workChaExpGain: number;\\n   /** Money gained from work */\\n   workMoneyGain: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface SourceFileLvl {\\n   /** The number of the source file */\\n   n: number;\\n   /** The level of the source file */\\n   lvl: number;\\n }\\n \\n /**\\n  * Bladeburner current action.\\n  * @public\\n  */\\n export interface BladeburnerCurAction {\\n   /** Type of Action */\\n   type: string;\\n   /** Name of Action */\\n   name: string;\\n }\\n \\n /**\\n  * Gang general info.\\n  * @public\\n  */\\n export interface GangGenInfo {\\n   /** Name of faction that the gang belongs to (\\\"Slum Snakes\\\", etc.) */\\n   faction: string;\\n   /** Indicating whether or not it's a hacking gang */\\n   isHacking: boolean;\\n   /** Money earned per game cycle */\\n   moneyGainRate: number;\\n   /** Gang's power for territory warfare */\\n   power: number;\\n   /** Gang's respect */\\n   respect: number;\\n   /** Respect earned per game cycle */\\n   respectGainRate: number;\\n   /** Amount of territory held */\\n   territory: number;\\n   /** Clash chance */\\n   territoryClashChance: number;\\n   /** Gang's wanted level */\\n   wantedLevel: number;\\n   /** Wanted level gained/lost per game cycle (negative for losses) */\\n   wantedLevelGainRate: number;\\n   /** Indicating if territory warfare is enabled */\\n   territoryWarfareEngaged: boolean;\\n   /** Number indicating the current wanted penalty */\\n   wantedPenalty: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface GangOtherInfoObject {\\n   /** Gang power */\\n   power: number;\\n   /** Gang territory, in decimal form */\\n   territory: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface GangOtherInfo {\\n   \\\"Slum Snakes\\\": GangOtherInfoObject;\\n   Tetrads: GangOtherInfoObject;\\n   \\\"The Syndicate\\\": GangOtherInfoObject;\\n   \\\"The Dark Army\\\": GangOtherInfoObject;\\n   \\\"Speakers for the Dead\\\": GangOtherInfoObject;\\n   NiteSec: GangOtherInfoObject;\\n   \\\"The Black Hand\\\": GangOtherInfoObject;\\n }\\n \\n /**\\n  * Object representing data representing a gang member task.\\n  * @public\\n  */\\n export interface GangTaskStats {\\n   /** Task name */\\n   name: string;\\n   /** Task Description */\\n   desc: string;\\n   /** Is a task of a hacking gang */\\n   isHacking: boolean;\\n   /** Is a task of a combat gang */\\n   isCombat: boolean;\\n   /** Base respect earned */\\n   baseRespect: number;\\n   /** Base wanted earned */\\n   baseWanted: number;\\n   /** Base money earned */\\n   baseMoney: number;\\n   /** Hacking skill impact on task scaling */\\n   hackWeight: number;\\n   /** Stength skill impact on task scaling */\\n   strWeight: number;\\n   /** Defense skill impact on task scaling */\\n   defWeight: number;\\n   /** Dexterity skill impact on task scaling */\\n   dexWeight: number;\\n   /** Agility skill impact on task scaling */\\n   agiWeight: number;\\n   /** Charisma skill impact on task scaling */\\n   chaWeight: number;\\n   /** Number representing the difficulty of the task */\\n   difficulty: number;\\n   /** Territory impact on task scaling */\\n   territory: GangTerritory;\\n }\\n \\n /**\\n  * Object representing data representing a gang member equipment.\\n  * @public\\n  */\\n export interface EquipmentStats {\\n   /** Strength multiplier */\\n   str?: number;\\n   /** Defense multiplier */\\n   def?: number;\\n   /** Dexterity multiplier */\\n   dex?: number;\\n   /** Agility multiplier */\\n   agi?: number;\\n   /** Charisma multiplier */\\n   cha?: number;\\n   /** Hacking multiplier */\\n   hack?: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface GangTerritory {\\n   /** Money gain impact on task scaling */\\n   money: number;\\n   /** Respect gain impact on task scaling */\\n   respect: number;\\n   /** Wanted gain impact on task scaling */\\n   wanted: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface GangMemberInfo {\\n   name: string;\\n   task: string;\\n   earnedRespect: number;\\n   hack: number;\\n   str: number;\\n   def: number;\\n   dex: number;\\n   agi: number;\\n   cha: number;\\n \\n   hack_exp: number;\\n   str_exp: number;\\n   def_exp: number;\\n   dex_exp: number;\\n   agi_exp: number;\\n   cha_exp: number;\\n \\n   hack_mult: number;\\n   str_mult: number;\\n   def_mult: number;\\n   dex_mult: number;\\n   agi_mult: number;\\n   cha_mult: number;\\n \\n   hack_asc_mult: number;\\n   str_asc_mult: number;\\n   def_asc_mult: number;\\n   dex_asc_mult: number;\\n   agi_asc_mult: number;\\n   cha_asc_mult: number;\\n \\n   hack_asc_points: number;\\n   str_asc_points: number;\\n   def_asc_points: number;\\n   dex_asc_points: number;\\n   agi_asc_points: number;\\n   cha_asc_points: number;\\n \\n   upgrades: string[];\\n   augmentations: string[];\\n \\n   respectGain: number;\\n   wantedLevelGain: number;\\n   moneyGain: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface GangMemberAscension {\\n   /** Amount of respect lost from ascending */\\n   respect: number;\\n   /** Hacking multiplier gained from ascending */\\n   hack: number;\\n   /** Strength multiplier gained from ascending */\\n   str: number;\\n   /** Defense multiplier gained from ascending */\\n   def: number;\\n   /** Dexterity multiplier gained from ascending */\\n   dex: number;\\n   /** Agility multiplier gained from ascending */\\n   agi: number;\\n   /** Charisma multiplier gained from ascending */\\n   cha: number;\\n }\\n \\n /**\\n  * Object representing a sleeve stats.\\n  * @public\\n  */\\n export interface SleeveSkills {\\n   /** Current shock of the sleeve [0-100] */\\n   shock: number;\\n   /** Current sync of the sleeve [0-100] */\\n   sync: number;\\n   /** Current hacking skill of the sleeve */\\n   hacking: number;\\n   /** Current strength of the sleeve */\\n   strength: number;\\n   /** Current defense of the sleeve */\\n   defense: number;\\n   /** Current dexterity of the sleeve */\\n   dexterity: number;\\n   /** Current agility of the sleeve */\\n   agility: number;\\n   /** Current charisma of the sleeve */\\n   charisma: number;\\n }\\n \\n /**\\n  * Object representing sleeve information.\\n  * @public\\n  */\\n export interface SleeveInformation {\\n   /** Location of the sleeve */\\n   city: string;\\n   /** Current hp of the sleeve */\\n   hp: number;\\n   /** Max hp of the sleeve */\\n   maxHp: number;\\n   /** Jobs available to the sleeve */\\n   jobs: string[];\\n   /** Job titles available to the sleeve */\\n   jobTitle: string[];\\n   /** Does this sleeve have access to the tor router */\\n   tor: boolean;\\n   /** Sleeve multipliers */\\n   mult: CharacterMult;\\n   /** Time spent on the current task in milliseconds */\\n   timeWorked: number;\\n   /** Earnings synchronized to other sleeves */\\n   earningsForSleeves: SleeveWorkGains;\\n   /** Earnings synchronized to the player */\\n   earningsForPlayer: SleeveWorkGains;\\n   /** Earnings for this sleeve */\\n   earningsForTask: SleeveWorkGains;\\n   /** Faction or company reputation gained for the current task */\\n   workRepGain: number;\\n }\\n \\n /**\\n  * Object representing a sleeve current task.\\n  * @public\\n  */\\n export interface SleeveTask {\\n   /** Task type */\\n   task: string;\\n   /** Crime currently attempting, if any */\\n   crime: string;\\n   /** Location of the task, if any */\\n   location: string;\\n   /** Stat being trained at the gym, if any */\\n   gymStatType: string;\\n   /** Faction work type being performed, if any */\\n   factionWorkType: string;\\n }\\n \\n /**\\n  * Object representing a port. A port is a serialized queue.\\n  * @public\\n  */\\n export interface NetscriptPort {\\n   /**\\n    * Write data to a port.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @returns The data popped off the queue if it was full.\\n    */\\n   write(value: string | number): null | string | number;\\n \\n   /**\\n    * Attempt to write data to the port.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @returns True if the data was added to the port, false if the port was full\\n    */\\n   tryWrite(value: string | number): boolean;\\n \\n   /**\\n    * Shift an element out of the port.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function will remove the first element from the port and return it.\\n    * If the port is empty, then the string “NULL PORT DATA” will be returned.\\n    * @returns the data read.\\n    */\\n   read(): string | number;\\n \\n   /**\\n    * Retrieve the first element from the port without removing it.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is used to peek at the data from a port. It returns the\\n    * first element in the specified port without removing that element. If\\n    * the port is empty, the string “NULL PORT DATA” will be returned.\\n    * @returns the data read\\n    */\\n   peek(): string | number;\\n \\n   /**\\n    * Check if the port is full.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @returns true if the port is full, otherwise false\\n    */\\n   full(): boolean;\\n \\n   /**\\n    * Check if the port is empty.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @returns true if the port is empty, otherwise false\\n    */\\n   empty(): boolean;\\n \\n   /**\\n    * Empties all data from the port.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    */\\n   clear(): void;\\n }\\n \\n /**\\n  * Stock market API\\n  * @public\\n  */\\n export interface TIX {\\n   /**\\n    * Returns an array of the symbols of the tradable stocks\\n    *\\n    * @remarks RAM cost: 2 GB\\n    * @returns Array of the symbols of the tradable stocks.\\n    */\\n   getSymbols(): string[];\\n \\n   /**\\n    * Returns the price of a stock\\n    *\\n    * @remarks\\n    * RAM cost: 2 GB\\n    * The stock’s price is the average of its bid and ask price.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1\\n    * stock.getPrice(\\\"FISG\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2\\n    * ns.stock.getPrice(\\\"FISG\\\");\\n    * ```\\n    * @param sym - Stock symbol.\\n    * @returns The price of a stock.\\n    */\\n   getPrice(sym: string): number;\\n \\n   /**\\n    * Returns the ask price of that stock.\\n    * @remarks RAM cost: 2 GB\\n    *\\n    * @param sym - Stock symbol.\\n    * @returns The ask price of a stock.\\n    */\\n   getAskPrice(sym: string): number;\\n \\n   /**\\n    * Returns the bid price of that stock.\\n    * @remarks RAM cost: 2 GB\\n    *\\n    * @param sym - Stock symbol.\\n    * @returns The bid price of a stock.\\n    */\\n   getBidPrice(sym: string): number;\\n \\n   /**\\n    * Returns the player’s position in a stock.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    * Returns an array of four elements that represents the player’s position in a stock.\\n    *\\n    * The first element is the returned array is the number of shares the player owns of\\n    * the stock in the Long position. The second element in the array is the average price\\n    * of the player’s shares in the Long position.\\n    *\\n    * The third element in the array is the number of shares the player owns of the stock\\n    * in the Short position. The fourth element in the array is the average price of the\\n    * player’s Short position.\\n    *\\n    * All elements in the returned array are numeric.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1\\n    * var pos = stock.getPosition(\\\"ECP\\\");\\n    * var shares      = pos[0];\\n    * var avgPx       = pos[1];\\n    * var sharesShort = pos[2];\\n    * var avgPxShort  = pos[3];\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2\\n    * const [shares, avgPx, sharesShort, avgPxShort] = ns.stock.getPosition(\\\"ECP\\\");\\n    * ```\\n    * @param sym - Stock symbol.\\n    * @returns Array of four elements that represents the player’s position in a stock.\\n    */\\n   getPosition(sym: string): [number, number, number, number];\\n \\n   /**\\n    * Returns the maximum number of shares of a stock.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    * This is the maximum amount of the stock that can be purchased\\n    * in both the Long and Short positions combined.\\n    *\\n    * @param sym - Stock symbol.\\n    * @returns Maximum number of shares that the stock has.\\n    */\\n   getMaxShares(sym: string): number;\\n \\n   /**\\n    * Calculates cost of buying stocks.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    * Calculates and returns how much it would cost to buy a given number of shares of a stock.\\n    * This takes into account spread, large transactions influencing the price of the stock and commission fees.\\n    *\\n    * @param sym - Stock symbol.\\n    * @param shares - Number of shares to purchase.\\n    * @param posType - Specifies whether the order is a “Long” or “Short” position.\\n    * @returns Cost to buy a given number of shares of a stock.\\n    */\\n   getPurchaseCost(sym: string, shares: number, posType: string): number;\\n \\n   /**\\n    * Calculate profit of selling stocks.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    * Calculates and returns how much you would gain from selling a given number of shares of a stock.\\n    * This takes into account spread, large transactions influencing the price of the stock and commission fees.\\n    *\\n    * @param sym - Stock symbol.\\n    * @param shares - Number of shares to sell.\\n    * @param posType - Specifies whether the order is a “Long” or “Short” position.\\n    * @returns Gain from selling a given number of shares of a stock.\\n    */\\n   getSaleGain(sym: string, shares: number, posType: string): number;\\n \\n   /**\\n    * Buy stocks.\\n    * @remarks\\n    * RAM cost: 2.5 GB\\n    * Attempts to purchase shares of a stock using a Market Order.\\n    *\\n    * If the player does not have enough money to purchase the specified number of shares,\\n    * then no shares will be purchased. Remember that every transaction on the stock exchange\\n    * costs a certain commission fee.\\n    *\\n    * If this function successfully purchases the shares, it will return the stock price at which\\n    * each share was purchased. Otherwise, it will return 0.\\n    *\\n    * @param sym - Stock symbol.\\n    * @param shares - Number of shares to purchased. Must be positive. Will be rounded to nearest integer.\\n    * @returns The stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\\n    */\\n   buy(sym: string, shares: number): number;\\n \\n   /**\\n    * Sell stocks.\\n    * @remarks\\n    * RAM cost: 2.5 GB\\n    * Attempts to sell shares of a stock using a Market Order.\\n    *\\n    * If the specified number of shares in the function exceeds the amount that the player\\n    * actually owns, then this function will sell all owned shares. Remember that every\\n    * transaction on the stock exchange costs a certain commission fee.\\n    *\\n    * The net profit made from selling stocks with this function is reflected in the script’s\\n    * statistics. This net profit is calculated as:\\n    *\\n    *    shares * (sell_price - average_price_of_purchased_shares)\\n    *\\n    * If the sale is successful, this function will return the stock price at\\n    * which each share was sold. Otherwise, it will return 0.\\n    *\\n    * @param sym - Stock symbol.\\n    * @param shares - Number of shares to sell. Must be positive. Will be rounded to nearest integer.\\n    * @returns The stock price at which each share was sold, otherwise 0 if the shares weren't sold.\\n    */\\n   sell(sym: string, shares: number): number;\\n \\n   /**\\n    * Short stocks.\\n    * @remarks\\n    * RAM cost: 2.5 GB\\n    * Attempts to purchase a short position of a stock using a Market Order.\\n    *\\n    * The ability to short a stock is **not** immediately available to the player and\\n    * must be unlocked later on in the game.\\n    *\\n    * If the player does not have enough money to purchase the specified number of shares,\\n    * then no shares will be purchased. Remember that every transaction on the stock exchange\\n    * costs a certain commission fee.\\n    *\\n    * If the purchase is successful, this function will return the stock price at which each\\n    * share was purchased. Otherwise, it will return 0.\\n    *\\n    * @param sym - Stock symbol.\\n    * @param shares - Number of shares to short. Must be positive. Will be rounded to nearest integer.\\n    * @returns The stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\\n    */\\n   short(sym: string, shares: number): number;\\n \\n   /**\\n    * Sell short stock.\\n    * @remarks\\n    * RAM cost: 2.5 GB\\n    * Attempts to sell a short position of a stock using a Market Order.\\n    *\\n    * The ability to short a stock is **not** immediately available to the player and\\n    * must be unlocked later on in the game.\\n    *\\n    * If the specified number of shares exceeds the amount that the player actually owns,\\n    * then this function will sell all owned shares. Remember that every transaction on\\n    * the stock exchange costs a certain commission fee.\\n    *\\n    * If the sale is successful, this function will return the stock price at which each\\n    * share was sold. Otherwise it will return 0.\\n    *\\n    * @param sym - Stock symbol.\\n    * @param shares - Number of shares to sell. Must be positive. Will be rounded to nearest integer.\\n    * @returns The stock price at which each share was sold, otherwise 0 if the shares weren't sold.\\n    */\\n   sellShort(sym: string, shares: number): number;\\n \\n   /**\\n    * Place order for stocks.\\n    * @remarks\\n    * RAM cost: 2.5 GB\\n    * Places an order on the stock market. This function only works for Limit and Stop Orders.\\n    *\\n    * The ability to place limit and stop orders is **not** immediately available to the player and\\n    * must be unlocked later on in the game.\\n    *\\n    * Returns true if the order is successfully placed, and false otherwise.\\n    *\\n    * @param sym - Stock symbol.\\n    * @param shares - Number of shares for order. Must be positive. Will be rounded to nearest integer.\\n    * @param price - Execution price for the order.\\n    * @param type - Type of order.\\n    * @param pos - Specifies whether the order is a “Long” or “Short” position.\\n    * @returns True if the order is successfully placed, and false otherwise.\\n    */\\n   placeOrder(sym: string, shares: number, price: number, type: string, pos: string): boolean;\\n \\n   /**\\n    * Cancel order for stocks.\\n    * @remarks\\n    * RAM cost: 2.5 GB\\n    * Cancels an oustanding Limit or Stop order on the stock market.\\n    *\\n    * The ability to use limit and stop orders is **not** immediately available to the player and\\n    * must be unlocked later on in the game.\\n    *\\n    * @param sym - Stock symbol.\\n    * @param shares - Number of shares for order. Must be positive. Will be rounded to nearest integer.\\n    * @param price - Execution price for the order.\\n    * @param type - Type of order.\\n    * @param pos - Specifies whether the order is a “Long” or “Short” position.\\n    */\\n   cancelOrder(sym: string, shares: number, price: number, type: string, pos: string): void;\\n \\n   /**\\n    * Returns your order book for the stock market.\\n    * @remarks\\n    * RAM cost: 2.5 GB\\n    * This is an object containing information for all the Limit and Stop Orders you have in the stock market.\\n    * For each symbol you have a position in, the returned object will have a key with that symbol's name.\\n    * The object's properties are each an array of {@link StockOrderObject}\\n    * The object has the following structure:\\n    *\\n    * ```ts\\n    * {\\n    *  string1: [ // Array of orders for this stock\\n    *      {\\n    *          shares: Order quantity\\n    *          price: Order price\\n    *          type: Order type\\n    *          position: Either \\\"L\\\" or \\\"S\\\" for Long or Short position\\n    *      },\\n    *      {\\n    *          ...\\n    *      },\\n    *      ...\\n    *  ],\\n    *  string2: [ // Array of orders for this stock\\n    *      ...\\n    *  ],\\n    *  ...\\n    * }\\n    * ```\\n    * The “Order type” property can have one of the following four values: \\\"Limit Buy Order\\\", \\\"Limit Sell Order\\\", \\\"Stop Buy Order\\\", \\\"Stop Sell Order\\\".\\n    * Note that the order book will only contain information for stocks that you actually have orders in.\\n    *\\n    * @example\\n    * ```ts\\n    * \\\"If you do not have orders in Nova Medical (NVMD), then the returned object will not have a “NVMD” property.\\\"\\n    * {\\n    *  ECP: [\\n    *      {\\n    *          shares: 5,\\n    *          price: 100,000\\n    *          type: \\\"Stop Buy Order\\\",\\n    *          position: \\\"S\\\",\\n    *      },\\n    *      {\\n    *          shares: 25,\\n    *          price: 125,000\\n    *          type: \\\"Limit Sell Order\\\",\\n    *          position: \\\"L\\\",\\n    *      },\\n    *  ],\\n    *  SYSC: [\\n    *      {\\n    *          shares: 100,\\n    *          price: 10,000\\n    *          type: \\\"Limit Buy Order\\\",\\n    *          position: \\\"L\\\",\\n    *      },\\n    *  ],\\n    * }\\n    * ```\\n    * @returns Object containing information for all the Limit and Stop Orders you have in the stock market.\\n    */\\n   getOrders(): StockOrder;\\n \\n   /**\\n    * Returns the volatility of the specified stock.\\n    * @remarks\\n    * RAM cost: 2.5 GB\\n    * Volatility represents the maximum percentage by which a stock’s price can change every tick.\\n    * The volatility is returned as a decimal value, NOT a percentage\\n    * (e.g. if a stock has a volatility of 3%, then this function will return 0.03, NOT 3).\\n    *\\n    * In order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\\n    *\\n    * @param sym - Stock symbol.\\n    * @returns Volatility of the specified stock.\\n    */\\n   getVolatility(sym: string): number;\\n \\n   /**\\n    * Returns the probability that the specified stock’s price will increase (as opposed to decrease) during the next tick.\\n    * @remarks\\n    * RAM cost: 2.5 GB\\n    * The probability is returned as a decimal value, NOT a percentage\\n    * (e.g. if a stock has a 60% chance of increasing, then this function will return 0.6, NOT 60).\\n    *\\n    * In other words, if this function returned 0.30 for a stock, then this means that the stock’s price has a\\n    * 30% chance of increasing and a 70% chance of decreasing during the next tick.\\n    *\\n    * In order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\\n    *\\n    * @param sym - Stock symbol.\\n    * @returns Probability that the specified stock’s price will increase (as opposed to decrease) during the next tick.\\n    */\\n   getForecast(sym: string): number;\\n \\n   /**\\n    * Purchase 4S Market Data Access.\\n    * @remarks RAM cost: 2.5 GB\\n    * @returns True if you successfully purchased it or if you already have access, false otherwise.\\n    */\\n   purchase4SMarketData(): boolean;\\n \\n   /**\\n    * Purchase 4S Market Data TIX API Access.\\n    * @remarks RAM cost: 2.5 GB\\n    * @returns True if you successfully purchased it or if you already have access, false otherwise.\\n    */\\n   purchase4SMarketDataTixApi(): boolean;\\n }\\n \\n /**\\n  * Singularity API\\n  * @remarks\\n  * This API requires Source-File 4 to use. The RAM cost of all these functions is multiplied by 16/4/1 based on Source-File 4 levels.\\n  * @public\\n  */\\n export interface Singularity {\\n   /**\\n    * Take university class.\\n    *\\n    * @remarks\\n    * RAM cost: 2 GB * 16/4/1\\n    *\\n    *\\n    * This function will automatically set you to start taking a course at a university.\\n    * If you are already in the middle of some “working” action (such as working at a\\n    * company, for a faction, or on a program), then running this function will automatically\\n    * cancel that action and give you your earnings.\\n    *\\n    * The cost and experience gains for all of these universities and classes are the same as\\n    * if you were to manually visit and take these classes.\\n    *\\n    * @param universityName - Name of university. You must be in the correct city for whatever university you specify.\\n    * @param courseName - Name of course.\\n    * @param focus - Acquire player focus on this class. Optional. Defaults to true.\\n    * @returns True if actions is successfully started, false otherwise.\\n    */\\n   universityCourse(universityName: string, courseName: string, focus?: boolean): boolean;\\n \\n   /**\\n    * Workout at the gym.\\n    *\\n    * @remarks\\n    * RAM cost: 2 GB * 16/4/1\\n    *\\n \\n    * This function will automatically set you to start working out at a gym to train\\n    * a particular stat. If you are already in the middle of some “working” action\\n    * (such as working at a company, for a faction, or on a program), then running\\n    * this function will automatically cancel that action and give you your earnings.\\n    *\\n    * The cost and experience gains for all of these gyms are the same as if you were\\n    * to manually visit these gyms and train\\n    *\\n    * @param gymName - Name of gym. You must be in the correct city for whatever gym you specify.\\n    * @param stat - The stat you want to train.\\n    * @param focus - Acquire player focus on this gym workout. Optional. Defaults to true.\\n    * @returns True if actions is successfully started, false otherwise.\\n    */\\n   gymWorkout(gymName: string, stat: string, focus?: boolean): boolean;\\n \\n   /**\\n    * Travel to another city.\\n    * @remarks\\n    * RAM cost: 2 GB * 16/4/1\\n    *\\n    *\\n    * This function allows the player to travel to any city. The cost for using this\\n    * function is the same as the cost for traveling through the Travel Agency.\\n    *\\n    * @param city - City to travel to.\\n    * @returns True if actions is successful, false otherwise.\\n    */\\n   travelToCity(city: string): boolean;\\n \\n   /**\\n    * Purchase the TOR router.\\n    * @remarks\\n    * RAM cost: 2 GB * 16/4/1\\n    *\\n    *\\n    * This function allows you to automatically purchase a TOR router. The cost for\\n    * purchasing a TOR router using this function is the same as if you were to\\n    * manually purchase one.\\n    *\\n    * @returns True if actions is successful, false otherwise.\\n    */\\n   purchaseTor(): boolean;\\n \\n   /**\\n    * Purchase a program from the dark web.\\n    * @remarks\\n    * RAM cost: 2 GB * 16/4/1\\n    *\\n    *\\n    * This function allows you to automatically purchase programs. You MUST have a\\n    * TOR router in order to use this function. The cost of purchasing programs\\n    * using this function is the same as if you were purchasing them through the Dark\\n    * Web using the Terminal buy command.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1\\n    * purchaseProgram(\\\"brutessh.exe\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2\\n    * ns.purchaseProgram(\\\"brutessh.exe\\\");\\n    * ```\\n    * @param programName - Name of program to purchase.\\n    * @returns True if the specified program is purchased, and false otherwise.\\n    */\\n   purchaseProgram(programName: string): boolean;\\n \\n   /**\\n    * Check if the player is busy.\\n    * @remarks\\n    * RAM cost: 0.5 GB * 16/4/1\\n    *\\n    *\\n    * Returns a boolean indicating whether or not the player is currently performing an\\n    * ‘action’. These actions include working for a company/faction, studying at a univeristy,\\n    * working out at a gym, creating a program, committing a crime, or carrying out a Hacking Mission.\\n    *\\n    * @returns True if the player is currently performing an ‘action’, false otherwise.\\n    */\\n   isBusy(): boolean;\\n \\n   /**\\n    * Stop the current action.\\n    * @remarks\\n    * RAM cost: 1 GB * 16/4/1\\n    *\\n    *\\n    * This function is used to end whatever ‘action’ the player is currently performing.\\n    * The player will receive whatever money/experience/etc. he has earned from that action.\\n    *\\n    * The actions that can be stopped with this function are:\\n    *\\n    * * Studying at a university\\n    * * Working for a company/faction\\n    * * Creating a program\\n    * * Committing a Crime\\n    *\\n    * This function will return true if the player’s action was ended.\\n    * It will return false if the player was not performing an action when this function was called.\\n    *\\n    * @returns True if the player’s action was ended, false if the player was not performing an action.\\n    */\\n   stopAction(): boolean;\\n \\n   /**\\n    * Upgrade home computer RAM.\\n    * @remarks\\n    * RAM cost: 3 GB * 16/4/1\\n    *\\n    *\\n    * This function will upgrade amount of RAM on the player’s home computer. The cost is\\n    * the same as if you were to do it manually.\\n    *\\n    * This function will return true if the player’s home computer RAM is successfully upgraded, and false otherwise.\\n    *\\n    * @returns True if the player’s home computer RAM is successfully upgraded, and false otherwise.\\n    */\\n   upgradeHomeRam(): boolean;\\n \\n   /**\\n    * Upgrade home computer cores.\\n    * @remarks\\n    * RAM cost: 3 GB * 16/4/1\\n    *\\n    *\\n    * This function will upgrade amount of cores on the player’s home computer. The cost is\\n    * the same as if you were to do it manually.\\n    *\\n    * This function will return true if the player’s home computer cores is successfully upgraded, and false otherwise.\\n    *\\n    * @returns True if the player’s home computer cores is successfully upgraded, and false otherwise.\\n    */\\n   upgradeHomeCores(): boolean;\\n \\n   /**\\n    * Get the price of upgrading home RAM.\\n    * @remarks\\n    * RAM cost: 1.5 GB * 16/4/1\\n    *\\n    *\\n    * Returns the cost of upgrading the player’s home computer RAM.\\n    *\\n    * @returns Cost of upgrading the player’s home computer RAM.\\n    */\\n   getUpgradeHomeRamCost(): number;\\n \\n   /**\\n    * Get the price of upgrading home cores.\\n    * @remarks\\n    * RAM cost: 1.5 GB * 16/4/1\\n    *\\n    *\\n    * Returns the cost of upgrading the player’s home computer cores.\\n    *\\n    * @returns Cost of upgrading the player’s home computer cores.\\n    */\\n   getUpgradeHomeCoresCost(): number;\\n \\n   /**\\n    * Work for a company.\\n    * @remarks\\n    * RAM cost: 3 GB * 16/4/1\\n    *\\n    *\\n    * This function will automatically set you to start working at the company\\n    * at which you are employed. If you are already in the middle of some “working”\\n    * action (such as working for a faction, training at a gym, or creating a program),\\n    * then running this function will automatically cancel that action and give you\\n    * your earnings.\\n    *\\n    * This function will return true if the player starts working, and false otherwise.\\n    *\\n    * Note that when you are working for a company, you will not actually receive your earnings (reputation, money, experience) until you FINISH the action.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //If you only want to work until you get 100,000 company reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n    * while (getCompanyRep(COMPANY HERE) < VALUE) {\\n    *    workForCompany();\\n    *    sleep(60000);\\n    * }\\n    * //This way, your company reputation will be updated every minute.\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //If you only want to work until you get 100,000 company reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n    * while (ns.getCompanyRep(COMPANY HERE) < VALUE) {\\n    *    ns.workForCompany();\\n    *    await ns.sleep(60000);\\n    * }\\n    * //This way, your company reputation will be updated every minute.\\n    * ```\\n    * @param companyName - Name of company to work for. Must be an exact match. Optional. If not specified, this argument defaults to the last job that you worked\\n    * @param focus - Acquire player focus on this work operation. Optional. Defaults to true.\\n    * @returns True if the player starts working, and false otherwise.\\n    */\\n   workForCompany(companyName?: string, focus?: boolean): boolean;\\n \\n   /**\\n    * Apply for a job at a company.\\n    * @remarks\\n    * RAM cost: 3 GB * 16/4/1\\n    *\\n    *\\n    * This function will automatically try to apply to the specified company\\n    * for a position in the specified field. This function can also be used to\\n    * apply for promotions by specifying the company and field you are already\\n    * employed at.\\n    *\\n    * This function will return true if you successfully get a job/promotion,\\n    * and false otherwise. Note that if you are trying to use this function to\\n    * apply for a promotion and you don’t get one, it will return false.\\n    *\\n    * @param companyName - Name of company to apply to.\\n    * @param field - Field to which you want to apply.\\n    * @returns True if the player successfully get a job/promotion, and false otherwise.\\n    */\\n   applyToCompany(companyName: string, field: string): boolean;\\n \\n   /**\\n    * Get company reputation.\\n    * @remarks\\n    * RAM cost: 1 GB * 16/4/1\\n    *\\n    *\\n    * This function will return the amount of reputation you have at the specified company.\\n    * If the company passed in as an argument is invalid, -1 will be returned.\\n    *\\n    * @param companyName - Name of the company.\\n    * @returns Amount of reputation you have at the specified company.\\n    */\\n   getCompanyRep(companyName: string): number;\\n \\n   /**\\n    * Get company favor.\\n    * @remarks\\n    * RAM cost: 1 GB * 16/4/1\\n    *\\n    *\\n    * This function will return the amount of favor you have at the specified company.\\n    * If the company passed in as an argument is invalid, -1 will be returned.\\n    *\\n    * @param companyName - Name of the company.\\n    * @returns Amount of favor you have at the specified company.\\n    */\\n   getCompanyFavor(companyName: string): number;\\n \\n   /**\\n    * Get company favor gain.\\n    * @remarks\\n    * RAM cost: 0.75 GB * 16/4/1\\n    *\\n    *\\n    * This function will return the amount of favor you will gain for the specified\\n    * company when you reset by installing Augmentations.\\n    *\\n    * @param companyName - Name of the company.\\n    * @returns Amount of favor you gain at the specified company when you reset by installing Augmentations.\\n    */\\n   getCompanyFavorGain(companyName: string): number;\\n \\n   /**\\n    * List all current faction invitations.\\n    * @remarks\\n    * RAM cost: 3 GB * 16/4/1\\n    *\\n    *\\n    * Returns an array with the name of all Factions you currently have oustanding invitations from.\\n    *\\n    * @returns Array with the name of all Factions you currently have oustanding invitations from.\\n    */\\n   checkFactionInvitations(): string[];\\n \\n   /**\\n    * Join a faction.\\n    * @remarks\\n    * RAM cost: 3 GB * 16/4/1\\n    *\\n    *\\n    * This function will automatically accept an invitation from a faction and join it.\\n    *\\n    * @param faction - Name of faction to join.\\n    * @returns True if player joined the faction, and false otherwise.\\n    */\\n   joinFaction(faction: string): boolean;\\n \\n   /**\\n    * Work for a faction.\\n    * @remarks\\n    * RAM cost: 3 GB * 16/4/1\\n    *\\n    *\\n    * This function will automatically set you to start working for the specified faction.\\n    * Obviously, you must be a member of the faction or else this function will fail. If\\n    * you are already in the middle of some “working” action (such as working for a company,\\n    * training at a gym, or creating a program), then running this function will automatically\\n    * cancel that action and give you your earnings.\\n    *\\n    * This function will return true if you successfully start working for the specified faction, and false otherwise.\\n    *\\n    * Note that when you are working for a faction, you will not actually receive your earnings (reputation, experience) until you FINISH the action.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //If you only want to work until you get 100,000 faction reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n    * while (getFactionRep(FACTION NAME) < VALUE) {\\n    *    workForFaction(FACNAME, WORKTYPE);\\n    *    sleep(60000);\\n    * }\\n    * //This way, your faction reputation will be updated every minute.\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //If you only want to work until you get 100,000 faction reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n    * while (ns.getFactionRep(FACTION NAME) < VALUE) {\\n    *    ns.workForFaction(FACNAME, WORKTYPE);\\n    *    await ns.sleep(60000);\\n    * }\\n    * //This way, your faction reputation will be updated every minute.\\n    * ```\\n    * @param faction - Name of faction to work for.\\n    * @param workType - Type of work to perform for the faction.\\n    * @param focus - Acquire player focus on this work operation. Optional. Defaults to true.\\n    * @returns True if the player starts working, and false otherwise.\\n    */\\n   workForFaction(faction: string, workType: string, focus?: boolean): boolean;\\n \\n   /**\\n    * Get faction reputation.\\n    * @remarks\\n    * RAM cost: 1 GB * 16/4/1\\n    *\\n    *\\n    * This function returns the amount of reputation you have for the specified faction.\\n    *\\n    * @param faction - Name of faction to work for.\\n    * @returns Amount of reputation you have for the specified faction.\\n    */\\n   getFactionRep(faction: string): number;\\n \\n   /**\\n    * Get faction favor.\\n    * @remarks\\n    * RAM cost: 1 GB * 16/4/1\\n    *\\n    *\\n    * This function returns the amount of favor you have for the specified faction.\\n    *\\n    * @param faction - Name of faction.\\n    * @returns Amount of favor you have for the specified faction.\\n    */\\n   getFactionFavor(faction: string): number;\\n \\n   /**\\n    * Get faction favor gain.\\n    * @remarks\\n    * RAM cost: 0.75 GB * 16/4/1\\n    *\\n    *\\n    * This function returns the amount of favor you will gain for the specified\\n    * faction when you reset by installing Augmentations.\\n    *\\n    * @param faction - Name of faction.\\n    * @returns Amount of favor you will gain for the specified faction when you reset by installing Augmentations.\\n    */\\n   getFactionFavorGain(faction: string): number;\\n \\n   /**\\n    * Donate to a faction.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * Attempts to donate money to the specified faction in exchange for reputation.\\n    * Returns true if you successfully donate the money, and false otherwise.\\n    *\\n    * @param faction - Name of faction to donate to.\\n    * @param amount - Amount of money to donate.\\n    * @returns True if the money was donated, and false otherwise.\\n    */\\n   donateToFaction(faction: string, amount: number): boolean;\\n \\n   /**\\n    * Create a program.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * This function will automatically set you to start working on creating the\\n    * specified program. If you are already in the middle of some “working” action\\n    * (such as working for a company, training at a gym, or taking a course), then\\n    * running this function will automatically cancel that action and give you your\\n    * earnings.\\n    *\\n    * This function returns true if you successfully start working on the specified program, and false otherwise.\\n    *\\n    * Note that creating a program using this function has the same hacking level requirements as it normally would. These level requirements are:\\n    * * BruteSSH.exe: 50\\n    * * FTPCrack.exe: 100\\n    * * relaySMTP.exe: 250\\n    * * HTTPWorm.exe: 500\\n    * * SQLInject.exe: 750\\n    * * DeepscanV1.exe: 75\\n    * * DeepscanV2.exe: 400\\n    * * ServerProfiler.exe: 75\\n    * * AutoLink.exe: 25\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * createProgram(“relaysmtp.exe”);\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * ns.createProgram(“relaysmtp.exe”);\\n    * ```\\n    * @param program - Name of program to create.\\n    * @param focus - Acquire player focus on this program creation. Optional. Defaults to true.\\n    * @returns True if you successfully start working on the specified program, and false otherwise.\\n    */\\n   createProgram(program: string, focus?: boolean): boolean;\\n \\n   /**\\n    * Commit a crime.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * This function is used to automatically attempt to commit crimes.\\n    * If you are already in the middle of some ‘working’ action (such\\n    * as working for a company or training at a gym), then running this\\n    * function will automatically cancel that action and give you your\\n    * earnings.\\n    *\\n    * This function returns the number of milliseconds it takes to attempt the\\n    * specified crime (e.g It takes 60 seconds to attempt the ‘Rob Store’ crime,\\n    * so running `commitCrime('rob store')` will return 60,000).\\n    *\\n    * Warning: I do not recommend using the time returned from this function to try\\n    * and schedule your crime attempts. Instead, I would use the isBusy Singularity\\n    * function to check whether you have finished attempting a crime. This is because\\n    * although the game sets a certain crime to be X amount of seconds, there is no\\n    * guarantee that your browser will follow that time limit.\\n    *\\n    * @param crime - Name of crime to attempt.\\n    * @returns The number of milliseconds it takes to attempt the specified crime.\\n    */\\n   commitCrime(crime: string): number;\\n \\n   /**\\n    * Get chance to successfully commit a crime.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * This function returns your chance of success at commiting the specified crime.\\n    *\\n    * @param crime - Name of crime.\\n    * @returns Chance of success at commiting the specified crime.\\n    */\\n   getCrimeChance(crime: string): number;\\n \\n   /**\\n    * Get stats related to a crime.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * Returns the stats of the crime.\\n    *\\n    * @param crime - Name of crime. Not case-sensitive\\n    * @returns The stats of the crime.\\n    */\\n   getCrimeStats(crime: string): CrimeStats;\\n \\n   /**\\n    * Get a list of owned augmentation.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * This function returns an array containing the names (as strings) of all Augmentations you have.\\n    *\\n    * @param purchased - Specifies whether the returned array should include Augmentations you have purchased but not yet installed. By default, this argument is false which means that the return value will NOT have the purchased Augmentations.\\n    * @returns Array containing the names (as strings) of all Augmentations you have.\\n    */\\n   getOwnedAugmentations(purchased?: boolean): string[];\\n \\n   /**\\n    * Get a list of augmentation available from a faction.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * Returns an array containing the names (as strings) of all Augmentations\\n    * that are available from the specified faction.\\n    *\\n    * @param faction - Name of faction.\\n    * @returns Array containing the names of all Augmentations.\\n    */\\n   getAugmentationsFromFaction(faction: string): string[];\\n \\n   /**\\n    * Get the pre-requisite of an augmentation.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * This function returns an array with the names of the prerequisite Augmentation(s) for the specified Augmentation.\\n    * If there are no prerequisites, a blank array is returned.\\n    *\\n    * @param augName - Name of Augmentation.\\n    * @returns Array with the names of the prerequisite Augmentation(s) for the specified Augmentation.\\n    */\\n   getAugmentationPrereq(augName: string): string[];\\n \\n   /**\\n    * Get the price and reputation of an augmentation.\\n    * @deprecated use getAugmentationPrice getAugmentationRepCost\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * This function returns an array with two elements that gives the cost for\\n    * the specified Augmentation. The first element in the returned array is the\\n    * reputation requirement of the Augmentation, and the second element is the\\n    * money cost.\\n    *\\n    * If an invalid Augmentation name is passed in for the augName argument, this\\n    * function will return the array [-1, -1].\\n    *\\n    * @param augName - Name of Augmentation.\\n    * @returns Array with first element as a reputation requirement and second element as the money cost.\\n    */\\n   getAugmentationCost(augName: string): [number, number];\\n \\n   /**\\n    * Get price of an augmentation.\\n    * @remarks\\n    * RAM cost: 2.5 GB * 16/4/1\\n    *\\n    *\\n    * @param augName - Name of Augmentation.\\n    * @returns Price of the augmentation.\\n    */\\n   getAugmentationPrice(augName: string): number;\\n \\n   /**\\n    * Get reputation requirement of an augmentation.\\n    * @remarks\\n    * RAM cost: 2.5 GB * 16/4/1\\n    *\\n    *\\n    * @param augName - Name of Augmentation.\\n    * @returns Reputation requirement of the augmentation.\\n    */\\n   getAugmentationRepReq(augName: string): number;\\n \\n   /**\\n    * Purchase an augmentation\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * This function will try to purchase the specified Augmentation through the given Faction.\\n    *\\n    * This function will return true if the Augmentation is successfully purchased, and false otherwise.\\n    *\\n    * @param faction - Name of faction to purchase Augmentation from.\\n    * @param augmentation - Name of Augmentation to purchase.\\n    * @returns True if the Augmentation is successfully purchased, and false otherwise.\\n    */\\n   purchaseAugmentation(faction: string, augmentation: string): boolean;\\n \\n   /**\\n    * Get the stats of an augmentation.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * This function returns augmentation stats.\\n    *\\n    * @param name - Name of Augmentation. CASE-SENSITIVE.\\n    * @returns Augmentation stats.\\n    */\\n   getAugmentationStats(name: string): AugmentationStats;\\n \\n   /**\\n    * Install your purchased augmentations.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * This function will automatically install your Augmentations, resetting the game as usual.\\n    *\\n    * @param cbScript - This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer.\\n    */\\n   installAugmentations(cbScript?: string): void;\\n \\n   /**\\n    * Returns an object with the Player’s stats.\\n    * @deprecated use getPlayer\\n    *\\n    * @remarks\\n    * RAM cost: 0.5 GB * 16/4/1\\n    *\\n    *\\n    * @example\\n    * ```ts\\n    * res = getStats();\\n    * print('My charisma level is: ' + res.charisma);\\n    * ```\\n    * @returns Object with the Player’s stats.\\n    */\\n   getStats(): PlayerSkills;\\n \\n   /**\\n    * Returns an object with various information about your character.\\n    * @deprecated use getPlayer\\n    *\\n    * @remarks\\n    * RAM cost: 0.5 GB * 16/4/1\\n    *\\n    *\\n    * @returns Object with various information about your character.\\n    */\\n   getCharacterInformation(): CharacterInfo;\\n \\n   /**\\n    * Hospitalize the player.\\n    * @remarks\\n    * RAM cost: 0.25 GB * 16/4/1\\n    *\\n    *\\n    * @returns The cost of the hospitalization.\\n    */\\n   hospitalize(): number;\\n \\n   /**\\n    * Soft reset the game.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * This function will perform a reset even if you don’t have any augmentation installed.\\n    *\\n    * @param cbScript - This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer.\\n    */\\n   softReset(cbScript: string): void;\\n \\n   /**\\n    * Go to a location.\\n    * @remarks\\n    * RAM cost: 5 GB * 16/4/1\\n    *\\n    *\\n    * Move the player to a specific location.\\n    *\\n    * @param locationName - Name of the location.\\n    * @returns True if the player was moved there, false otherwise.\\n    */\\n   goToLocation(locationName: string): boolean;\\n \\n   /**\\n    * Get the current server.\\n    * @remarks\\n    * RAM cost: 2 GB * 16/4/1\\n    *\\n    *\\n    * @returns Name of the current server.\\n    */\\n   getCurrentServer(): string;\\n \\n   /**\\n    * Connect to a server.\\n    * @remarks\\n    * RAM cost: 2 GB * 16/4/1\\n    *\\n    *\\n    * Run the connect HOSTNAME command in the terminal. Can only connect to neighbors.\\n    *\\n    * @returns True if the connect command was successful, false otherwise.\\n    */\\n   connect(hostname: string): boolean;\\n \\n   /**\\n    * Run the hack command in the terminal.\\n    * @remarks\\n    * RAM cost: 2 GB * 16/4/1\\n    *\\n    *\\n    * @returns Amount of money stolen by manual hacking.\\n    */\\n   manualHack(): Promise<number>;\\n \\n   /**\\n    * Run the backdoor command in the terminal.\\n    * @remarks\\n    * RAM cost: 2 GB * 16/4/1\\n    *\\n    *\\n    * @returns Promise waiting for the installation to finish.\\n    */\\n   installBackdoor(): Promise<void>;\\n \\n   /**\\n    * Check if the player is focused.\\n    * @remarks\\n    * RAM cost: 0.1 GB * 16/4/1\\n    *\\n    *\\n    * @returns True if the player is focused.\\n    */\\n   isFocused(): boolean;\\n \\n   /**\\n    * Set the players focus.\\n    * @remarks\\n    * RAM cost: 0.1 GB * 16/4/1\\n    *\\n    * @returns True if the focus was changed.\\n    */\\n   setFocus(focus: boolean): boolean;\\n }\\n \\n /**\\n  * Hacknet API\\n  * @remarks\\n  * Not all these functions are immediately available.\\n  * @public\\n  */\\n export interface Hacknet {\\n   /**\\n    * Get the number of hacknet nodes you own.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Returns the number of Hacknet Nodes you own.\\n    *\\n    * @returns number of hacknet nodes.\\n    */\\n   numNodes(): number;\\n \\n   /**\\n    * Get the maximum number of hacknet nodes.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @returns maximum number of hacknet nodes.\\n    */\\n   maxNumNodes(): number;\\n \\n   /**\\n    * Purchase a new hacknet node.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Purchases a new Hacknet Node. Returns a number with the index of the\\n    * Hacknet Node. This index is equivalent to the number at the end of\\n    * the Hacknet Node’s name (e.g The Hacknet Node named `hacknet-node-4`\\n    * will have an index of 4).\\n    *\\n    * If the player cannot afford to purchase a new Hacknet Node then the function will return -1.\\n    *\\n    * @returns The index of the Hacknet Node or if the player cannot afford to purchase a new Hacknet Node the function will return -1.\\n    */\\n   purchaseNode(): number;\\n \\n   /**\\n    * Get the price of the next hacknet node.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Returns the cost of purchasing a new Hacknet Node.\\n    *\\n    * @returns Cost of purchasing a new Hacknet Node.\\n    */\\n   getPurchaseNodeCost(): number;\\n \\n   /**\\n    * Get the stats of a hacknet node.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Returns an object containing a variety of stats about the specified Hacknet Node.\\n    *\\n    * Note that for Hacknet Nodes, production refers to the amount of money the node generates.\\n    * For Hacknet Servers (the upgraded version of Hacknet Nodes), production refers to the\\n    * amount of hashes the node generates.\\n    *\\n    * @param index - Index/Identifier of Hacknet Node\\n    * @returns Object containing a variety of stats about the specified Hacknet Node.\\n    */\\n   getNodeStats(index: number): NodeStats;\\n \\n   /**\\n    * Upgrade the level of a hacknet node.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Tries to upgrade the level of the specified Hacknet Node by n.\\n    *\\n    * Returns true if the Hacknet Node’s level is successfully upgraded by n\\n    * or if it is upgraded by some positive amount and the Node reaches its max level.\\n    *\\n    * Returns false otherwise.\\n    *\\n    * @param index - Index/Identifier of Hacknet Node.\\n    * @param n - Number of levels to purchase. Must be positive. Rounded to nearest integer.\\n    * @returns True if the Hacknet Node’s level is successfully upgraded, false otherwise.\\n    */\\n   upgradeLevel(index: number, n: number): boolean;\\n \\n   /**\\n    * Upgrade the RAM of a hacknet node.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Tries to upgrade the specified Hacknet Node’s RAM n times.\\n    * Note that each upgrade doubles the Node’s RAM.\\n    * So this is equivalent to multiplying the Node’s RAM by 2 n.\\n    *\\n    * Returns true if the Hacknet Node’s RAM is successfully upgraded n times\\n    * or if it is upgraded some positive number of times and the Node reaches it max RAM.\\n    *\\n    * Returns false otherwise.\\n    *\\n    * @param index - Index/Identifier of Hacknet Node.\\n    * @param n - Number of times to upgrade RAM. Must be positive. Rounded to nearest integer.\\n    * @returns True if the Hacknet Node’s ram is successfully upgraded, false otherwise.\\n    */\\n   upgradeRam(index: number, n: number): boolean;\\n \\n   /**\\n    * Upgrade the core of a hacknet node.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Tries to purchase n cores for the specified Hacknet Node.\\n    *\\n    * Returns true if it successfully purchases n cores for the Hacknet Node\\n    * or if it purchases some positive amount and the Node reaches its max number of cores.\\n    *\\n    * Returns false otherwise.\\n    *\\n    * @param index - Index/Identifier of Hacknet Node.\\n    * @param n - Number of cores to purchase. Must be positive. Rounded to nearest integer.\\n    * @returns True if the Hacknet Node’s cores are successfully purchased, false otherwise.\\n    */\\n   upgradeCore(index: number, n: number): boolean;\\n \\n   /**\\n    * Upgrade the cache of a hacknet node.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n    *\\n    * Tries to upgrade the specified Hacknet Server’s cache n times.\\n    *\\n    * Returns true if it successfully upgrades the Server’s cache n times,\\n    * or if it purchases some positive amount and the Server reaches its max cache level.\\n    *\\n    * Returns false otherwise.\\n    *\\n    * @param index - Index/Identifier of Hacknet Node.\\n    * @param n - Number of cache levels to purchase. Must be positive. Rounded to nearest integer.\\n    * @returns True if the Hacknet Node’s cores are successfully purchased, false otherwise.\\n    */\\n   upgradeCache(index: number, n: number): boolean;\\n \\n   /**\\n    * Calculate the cost of upgrading hacknet node levels.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Returns the cost of upgrading the specified Hacknet Node by n levels.\\n    *\\n    * If an invalid value for n is provided, then this function returns 0.\\n    * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n    *\\n    * @param index - Index/Identifier of Hacknet Node.\\n    * @param n - Number of levels to upgrade. Must be positive. Rounded to nearest integer.\\n    * @returns Cost of upgrading the specified Hacknet Node.\\n    */\\n   getLevelUpgradeCost(index: number, n: number): number;\\n \\n   /**\\n    * Calculate the cost of upgrading hacknet node RAM.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Returns the cost of upgrading the RAM of the specified Hacknet Node n times.\\n    *\\n    * If an invalid value for n is provided, then this function returns 0.\\n    * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n    *\\n    * @param index - Index/Identifier of Hacknet Node.\\n    * @param n - Number of times to upgrade RAM. Must be positive. Rounded to nearest integer.\\n    * @returns Cost of upgrading the specified Hacknet Node's ram.\\n    */\\n   getRamUpgradeCost(index: number, n: number): number;\\n \\n   /**\\n    * Calculate the cost of upgrading hacknet node cores.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Returns the cost of upgrading the number of cores of the specified Hacknet Node by n.\\n    *\\n    * If an invalid value for n is provided, then this function returns 0.\\n    * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n    *\\n    * @param index - Index/Identifier of Hacknet Node.\\n    * @param n - Number of times to upgrade cores. Must be positive. Rounded to nearest integer.\\n    * @returns Cost of upgrading the specified Hacknet Node's number of cores.\\n    */\\n   getCoreUpgradeCost(index: number, n: number): number;\\n \\n   /**\\n    * Calculate the cost of upgrading hacknet node cache.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n    *\\n    * Returns the cost of upgrading the cache level of the specified Hacknet Server by n.\\n    *\\n    * If an invalid value for n is provided, then this function returns 0.\\n    * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n    *\\n    * @param index - Index/Identifier of Hacknet Node.\\n    * @param n - Number of times to upgrade cache. Must be positive. Rounded to nearest integer.\\n    * @returns Cost of upgrading the specified Hacknet Node's cache.\\n    */\\n   getCacheUpgradeCost(index: number, n: number): number;\\n \\n   /**\\n    * Get the total number of hashes stored.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n    *\\n    * Returns the number of hashes you have.\\n    *\\n    * @returns Number of hashes you have.\\n    */\\n   numHashes(): number;\\n \\n   /**\\n    * Get the maximum number of hashes you can store.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n    *\\n    * Returns the number of hashes you can store.\\n    *\\n    * @returns Number of hashes you can store.\\n    */\\n   hashCapacity(): number;\\n \\n   /**\\n    * Get the cost of a hash upgrade.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n    *\\n    * Returns the number of hashes required for the specified upgrade. The name of the upgrade must be an exact match.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * var upgradeName = \\\"Sell for Corporation Funds\\\";\\n    * if (hacknet.numHashes() > hacknet.hashCost(upgradeName)) {\\n    *    hacknet.spendHashes(upgName);\\n    * }\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * const upgradeName = \\\"Sell for Corporation Funds\\\";\\n    * if (ns.hacknet.numHashes() > ns.hacknet.hashCost(upgradeName)) {\\n    *    ns.hacknet.spendHashes(upgName);\\n    * }\\n    * ```\\n    * @param upgName - Name of the upgrade of Hacknet Node.\\n    * @returns Number of hashes required for the specified upgrade.\\n    */\\n   hashCost(upgName: string): number;\\n \\n   /**\\n    * Purchase a hash upgrade.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n    *\\n    * Spend the hashes generated by your Hacknet Servers on an upgrade.\\n    * Returns a boolean value - true if the upgrade is successfully purchased, and false otherwise.\\n    *\\n    * The name of the upgrade must be an exact match.\\n    * The `upgTarget` argument is used for upgrades such as `Reduce Minimum Security`, which applies to a specific server.\\n    * In this case, the `upgTarget` argument must be the hostname of the server.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * hacknet.spendHashes(\\\"Sell for Corporation Funds\\\");\\n    * hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"foodnstuff\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * NS2:\\n    * ns.hacknet.spendHashes(\\\"Sell for Corporation Funds\\\");\\n    * ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"foodnstuff\\\");\\n    * ```\\n    * @param upgName - Name of the upgrade of Hacknet Node.\\n    * @param upgTarget - Object to which upgrade applies. Required for certain upgrades.\\n    * @returns True if the upgrade is successfully purchased, and false otherwise..\\n    */\\n   spendHashes(upgName: string, upgTarget?: string): boolean;\\n \\n   /**\\n    * Get the list of hash upgrades\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n    *\\n    * Returns the list of all available hash upgrades that can be used in the spendHashes function.\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * var upgrades = hacknet.getHashUpgrades(); // [\\\"Sell for Money\\\",\\\"Sell for Corporation Funds\\\",...]\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * const upgrades = ns.hacknet.getHashUpgrades(); // [\\\"Sell for Money\\\",\\\"Sell for Corporation Funds\\\",...]\\n    * ```\\n    * @returns An array containing the available upgrades\\n    */\\n   getHashUpgrades(): string[];\\n \\n   /**\\n    * Get the level of a hash upgrade.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n    *\\n    * @returns Level of the upgrade.\\n    */\\n   getHashUpgradeLevel(upgName: string): number;\\n \\n   /**\\n    * Get the multipler to study.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n    *\\n    * @returns Multiplier.\\n    */\\n   getStudyMult(): number;\\n \\n   /**\\n    * Get the multipler to training.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n    *\\n    * @returns Multiplier.\\n    */\\n   getTrainingMult(): number;\\n }\\n \\n /**\\n  * Bladeburner API\\n  * @remarks\\n  * You have to be employed in the Bladeburner division and be in BitNode-7\\n  * or have Source-File 7 in order to use this API.\\n  * @public\\n  */\\n export interface Bladeburner {\\n   /**\\n    * List all contracts.\\n    * @remarks\\n    * RAM cost: 0.4 GB\\n    *\\n    * Returns an array of strings containing the names of all Bladeburner contracts.\\n    *\\n    * @returns Array of strings containing the names of all Bladeburner contracts.\\n    */\\n   getContractNames(): string[];\\n \\n   /**\\n    * List all operations.\\n    * @remarks\\n    * RAM cost: 0.4 GB\\n    *\\n    * Returns an array of strings containing the names of all Bladeburner operations.\\n    *\\n    * @returns Array of strings containing the names of all Bladeburner operations.\\n    */\\n   getOperationNames(): string[];\\n \\n   /**\\n    * List all black ops.\\n    * @remarks\\n    * RAM cost: 0.4 GB\\n    *\\n    * Returns an array of strings containing the names of all Bladeburner Black Ops.\\n    *\\n    * @returns Array of strings containing the names of all Bladeburner Black Ops.\\n    */\\n   getBlackOpNames(): string[];\\n \\n   /**\\n    * List all general actions.\\n    * @remarks\\n    * RAM cost: 0.4 GB\\n    *\\n    * Returns an array of strings containing the names of all general Bladeburner actions.\\n    *\\n    * @returns Array of strings containing the names of all general Bladeburner actions.\\n    */\\n   getGeneralActionNames(): string[];\\n \\n   /**\\n    * List all skills.\\n    * @remarks\\n    * RAM cost: 0.4 GB\\n    *\\n    * Returns an array of strings containing the names of all general Bladeburner skills.\\n    *\\n    * @returns Array of strings containing the names of all general Bladeburner skills.\\n    */\\n   getSkillNames(): string[];\\n \\n   /**\\n    * Start an action.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Attempts to start the specified Bladeburner action.\\n    * Returns true if the action was started successfully, and false otherwise.\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match\\n    * @returns True if the action was started successfully, and false otherwise.\\n    */\\n   startAction(type: string, name: string): boolean;\\n \\n   /**\\n    * Stop current action.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Stops the current Bladeburner action.\\n    *\\n    */\\n   stopBladeburnerAction(): void;\\n \\n   /**\\n    * Get current action.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Returns an object that represents the player’s current Bladeburner action.\\n    * If the player is not performing an action, the function will return an object with the ‘type’ property set to “Idle”.\\n    *\\n    * @returns Object that represents the player’s current Bladeburner action.\\n    */\\n   getCurrentAction(): BladeburnerCurAction;\\n \\n   /**\\n    * Get the time to complete an action.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the number of seconds it takes to complete the specified action\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @returns Number of milliseconds it takes to complete the specified action.\\n    */\\n   getActionTime(type: string, name: string): number;\\n \\n   /**\\n    * Get estimate success chance of an action.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the estimated success chance for the specified action.\\n    * This chance is returned as a decimal value, NOT a percentage\\n    * (e.g. if you have an estimated success chance of 80%, then this function will return 0.80, NOT 80).\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @returns Estimated success chance for the specified action.\\n    */\\n   getActionEstimatedSuccessChance(type: string, name: string): [number, number];\\n \\n   /**\\n    * Get the reputation gain of an action.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the average Bladeburner reputation gain for successfully\\n    * completing the specified action.\\n    * Note that this value is an ‘average’ and the real reputation gain may vary slightly from this value.\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @param level - Optional action level at which to calculate the gain\\n    * @returns Average Bladeburner reputation gain for successfully completing the specified action.\\n    */\\n   getActionRepGain(type: string, name: string, level: number): number;\\n \\n   /**\\n    * Get action count remaining.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the remaining count of the specified action.\\n    *\\n    * Note that this is meant to be used for Contracts and Operations.\\n    * This function will return ‘Infinity’ for actions such as Training and Field Analysis.\\n    * This function will return 1 for BlackOps not yet completed regardless of wether\\n    * the player has the required rank to attempt the mission or not.\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @returns Remaining count of the specified action.\\n    */\\n   getActionCountRemaining(type: string, name: string): number;\\n \\n   /**\\n    * Get the maximum level of an action.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the maximum level for this action.\\n    *\\n    * Returns -1 if an invalid action is specified.\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @returns Maximum level of the specified action.\\n    */\\n   getActionMaxLevel(type: string, name: string): number;\\n \\n   /**\\n    * Get the current level of an action.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the current level of this action.\\n    *\\n    * Returns -1 if an invalid action is specified.\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @returns Current level of the specified action.\\n    */\\n   getActionCurrentLevel(type: string, name: string): number;\\n \\n   /**\\n    * Get wether an action is set to autolevel.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a boolean indicating whether or not this action is currently set to autolevel.\\n    *\\n    * Returns false if an invalid action is specified.\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @returns True if the action is set to autolevel, and false otherwise.\\n    */\\n   getActionAutolevel(type: string, name: string): boolean;\\n \\n   /**\\n    * Set an action autolevel.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Enable/disable autoleveling for the specified action.\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @param autoLevel - Whether or not to autolevel this action\\n    */\\n   setActionAutolevel(type: string, name: string, autoLevel: boolean): void;\\n \\n   /**\\n    * Set the level of an action.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Set the level for the specified action.\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @param level - Level to set this action to.\\n    */\\n   setActionLevel(type: string, name: string, level: number): void;\\n \\n   /**\\n    * Get player bladeburner rank.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the player’s Bladeburner Rank.\\n    *\\n    * @returns Player’s Bladeburner Rank.\\n    */\\n   getRank(): number;\\n \\n   /**\\n    * Get black op required rank.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Returns the rank required to complete this BlackOp.\\n    *\\n    * Returns -1 if an invalid action is specified.\\n    *\\n    * @param name - Name of BlackOp. Must be an exact match.\\n    * @returns Rank required to complete this BlackOp.\\n    */\\n   getBlackOpRank(name: string): number;\\n \\n   /**\\n    * Get bladeburner skill points.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the number of Bladeburner skill points you have.\\n    *\\n    * @returns Number of Bladeburner skill points you have.\\n    */\\n   getSkillPoints(): number;\\n \\n   /**\\n    * Get skill level.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * This function returns your level in the specified skill.\\n    *\\n    * The function returns -1 if an invalid skill name is passed in.\\n    *\\n    * @param skillName - Name of skill. Case-sensitive and must be an exact match\\n    * @returns Level in the specified skill.\\n    */\\n   getSkillLevel(name: string): number;\\n \\n   /**\\n    * Get cost to upgrade skill.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * This function returns the number of skill points needed to upgrade the specified skill.\\n    *\\n    * The function returns -1 if an invalid skill name is passed in.\\n    *\\n    * @param skillName - Name of skill. Case-sensitive and must be an exact match\\n    * @returns Number of skill points needed to upgrade the specified skill.\\n    */\\n   getSkillUpgradeCost(name: string): number;\\n \\n   /**\\n    * Upgrade skill.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Attempts to upgrade the specified Bladeburner skill.\\n    *\\n    * Returns true if the skill is successfully upgraded, and false otherwise.\\n    *\\n    * @param skillName - Name of skill to be upgraded. Case-sensitive and must be an exact match\\n    * @returns true if the skill is successfully upgraded, and false otherwise.\\n    */\\n   upgradeSkill(name: string): boolean;\\n \\n   /**\\n    * Get team size.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the number of Bladeburner team members you have assigned to the specified action.\\n    *\\n    * Setting a team is only applicable for Operations and BlackOps. This function will return 0 for other action types.\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @returns Number of Bladeburner team members that were assigned to the specified action.\\n    */\\n   getTeamSize(type: string, name: string): number;\\n \\n   /**\\n    * Set team size.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Set the team size for the specified Bladeburner action.\\n    *\\n    * Returns the team size that was set, or -1 if the function failed.\\n    *\\n    * @param type - Type of action.\\n    * @param name - Name of action. Must be an exact match.\\n    * @param size - Number of team members to set. Will be converted using Math.round().\\n    * @returns Number of Bladeburner team members you assigned to the specified action.\\n    */\\n   setTeamSize(type: string, name: string, size: number): number;\\n \\n   /**\\n    * Get estimated population in city.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the estimated number of Synthoids in the specified city,\\n    * or -1 if an invalid city was specified.\\n    *\\n    * @param cityName - Name of city. Case-sensitive\\n    * @returns Estimated number of Synthoids in the specified city.\\n    */\\n   getCityEstimatedPopulation(name: string): number;\\n \\n   /**\\n    * Get number of communities in a city.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the estimated number of Synthoid communities in the specified city,\\n    * or -1 if an invalid city was specified.\\n    *\\n    * @param cityName - Name of city. Case-sensitive\\n    * @returns Number of Synthoids communities in the specified city.\\n    */\\n   getCityCommunities(name: string): number;\\n \\n   /**\\n    * Get chaos of a city.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the chaos in the specified city,\\n    * or -1 if an invalid city was specified.\\n    *\\n    * @param cityName - Name of city. Case-sensitive\\n    * @returns Chaos in the specified city.\\n    */\\n   getCityChaos(name: string): number;\\n \\n   /**\\n    * Get current city.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the city that the player is currently in (for Bladeburner).\\n    *\\n    * @returns City that the player is currently in (for Bladeburner).\\n    */\\n   getCity(): string;\\n \\n   /**\\n    * Travel to another city in bladeburner.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    * Attempts to switch to the specified city (for Bladeburner only).\\n    *\\n    * Returns true if successful, and false otherwise\\n    *\\n    * @param cityName - Name of city. Case-sensitive\\n    * @returns true if successful, and false otherwise\\n    */\\n   switchCity(name: string): boolean;\\n \\n   /**\\n    * Get bladeburner stamina.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    * Returns an array with two elements:\\n    * * [Current stamina, Max stamina]\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * function getStaminaPercentage() {\\n    *    var res = bladeburner.getStamina();\\n    *    return res[0] / res[1];\\n    * }\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * function getStaminaPercentage() {\\n    *    const [current, max] = ns.bladeburner.getStamina();\\n    *    return current / max;\\n    * }\\n    * ```\\n    * @returns Array containing current stamina and max stamina.\\n    */\\n   getStamina(): [number, number];\\n \\n   /**\\n    * Join the bladeburner faction.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    * Attempts to join the Bladeburner faction.\\n    *\\n    * Returns true if you successfully join the Bladeburner faction, or if you are already a member.\\n    *\\n    * Returns false otherwise.\\n    *\\n    * @returns True if you successfully join the Bladeburner faction, or if you are already a member, false otherwise.\\n    */\\n   joinBladeburnerFaction(): boolean;\\n \\n   /**\\n    * Join the bladeburner division.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Attempts to join the Bladeburner division.\\n    *\\n    * Returns true if you successfully join the Bladeburner division, or if you are already a member.\\n    *\\n    * Returns false otherwise.\\n    *\\n    * @returns True if you successfully join the Bladeburner division, or if you are already a member, false otherwise.\\n    */\\n   joinBladeburnerDivision(): boolean;\\n \\n   /**\\n    * Get bladeburner bonus time.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Returns the amount of accumulated “bonus time” (seconds) for the Bladeburner mechanic.\\n    *\\n    * “Bonus time” is accumulated when the game is offline or if the game is inactive in the browser.\\n    *\\n    * “Bonus time” makes the game progress faster, up to 5x the normal speed.\\n    * For example, if an action takes 30 seconds to complete but you’ve accumulated over\\n    * 30 seconds in bonus time, then the action will only take 6 seconds in real life to complete.\\n    *\\n    * @returns Amount of accumulated “bonus time” (milliseconds) for the Bladeburner mechanic.\\n    */\\n   getBonusTime(): number;\\n }\\n \\n /**\\n  * Coding Contract API\\n  * @public\\n  */\\n export interface CodingContract {\\n   /**\\n    * Attemps a coding contract.\\n    * @remarks\\n    * RAM cost: 10 GB\\n    *\\n    * Attempts to solve the Coding Contract with the provided solution.\\n    *\\n    * @param answer - Solution for the contract.\\n    * @param fn - Filename of the contract.\\n    * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n    * @param opts - Optional parameters for configuring function behavior.\\n    * @returns True if the solution was correct, false otherwise. If the returnReward option is configured, then the function will instead return a string. If the contract is successfully solved, the string will contain a description of the contract’s reward. Otherwise, it will be an empty string.\\n    */\\n   attempt(answer: string[] | number, filename: string, host?: string, opts?: CodingAttemptOptions): boolean | string;\\n \\n   /**\\n    * Get the type of a coding contract.\\n    * @remarks\\n    * RAM cost: 5 GB\\n    *\\n    * Returns a name describing the type of problem posed by the Coding Contract.\\n    * (e.g. Find Largest Prime Factor, Total Ways to Sum, etc.)\\n    *\\n    * @param fn - Filename of the contract.\\n    * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n    * @returns Name describing the type of problem posed by the Coding Contract.\\n    */\\n   getContractType(filename: string, host?: string): string;\\n \\n   /**\\n    * Get the description.\\n    * @remarks\\n    * RAM cost: 5 GB\\n    *\\n    * Get the full text description for the problem posed by the Coding Contract.\\n    *\\n    * @param fn - Filename of the contract.\\n    * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n    * @returns Contract’s text description.\\n    */\\n   getDescription(filename: string, host?: string): string;\\n \\n   /**\\n    * Get the input data.\\n    * @remarks\\n    * RAM cost: 5 GB\\n    *\\n    * Get the data associated with the specific Coding Contract.\\n    * Note that this is not the same as the contract’s description.\\n    * This is just the data that the contract wants you to act on in order to solve\\n    *\\n    * @param filename - Filename of the contract.\\n    * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n    * @returns The specified contract’s data, data type depends on contract type.;\\n    */\\n   getData(filename: string, host?: string): any;\\n \\n   /**\\n    * Get the number of attempt remaining.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Get the number of tries remaining on the contract before it self-destructs.\\n    *\\n    * @param fn - Filename of the contract.\\n    * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n    * @returns How many attempts are remaining for the contract;\\n    */\\n   getNumTriesRemaining(filename: string, host?: string): number;\\n }\\n \\n /**\\n  * Gang API\\n  * @remarks\\n  * If you are not in BitNode-2, then you must have Source-File 2 in order to use this API.\\n  * @public\\n  */\\n export interface Gang {\\n   /**\\n    * Create a gang.\\n    * @remarks\\n    * RAM cost: 1GB\\n    *\\n    * Create a gang with the specified faction.\\n    * @returns True if the gang was created, false otherwise.\\n    */\\n   createGang(faction: string): boolean;\\n \\n   /**\\n    * Check if you're in a gang.\\n    * @remarks\\n    * RAM cost: 1GB\\n    * @returns True if you're in a gang, false otherwise.\\n    */\\n   inGang(): boolean;\\n \\n   /**\\n    * List all gang members.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Get the names of all Gang members\\n    *\\n    * @returns Names of all Gang members.\\n    */\\n   getMemberNames(): string[];\\n \\n   /**\\n    * Get information about your gang.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Get general information about the gang.\\n    *\\n    * @returns Object containing general information about the gang.\\n    */\\n   getGangInformation(): GangGenInfo;\\n \\n   /**\\n    * Get information about the other gangs.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Get territory and power information about all gangs.\\n    *\\n    * @returns Object containing territory and power information about all gangs.\\n    */\\n   getOtherGangInformation(): GangOtherInfo;\\n \\n   /**\\n    * Get information about a specific gang member.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Get stat and equipment-related information about a Gang Member\\n    *\\n    * @param name - Name of member.\\n    * @returns Object containing stat and equipment-related information about a Gang Member.\\n    */\\n   getMemberInformation(name: string): GangMemberInfo;\\n \\n   /**\\n    * Check if you can recruit a new gang member.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Returns boolean indicating whether a member can currently be recruited\\n    *\\n    * @returns True if a member can currently be recruited, false otherwise.\\n    */\\n   canRecruitMember(): boolean;\\n \\n   /**\\n    * Recruit a new gang member.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Attempt to recruit a new gang member.\\n    *\\n    * Possible reasons for failure:\\n    * * Cannot currently recruit a new member\\n    * * There already exists a member with the specified name\\n    *\\n    * @param name - Name of member to recruit.\\n    * @returns True if the member was successfully recruited, false otherwise.\\n    */\\n   recruitMember(name: string): boolean;\\n \\n   /**\\n    * List member task names.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Get the name of all valid tasks that Gang members can be assigned to.\\n    *\\n    * @returns All valid tasks that Gang members can be assigned to.\\n    */\\n   getTaskNames(): string[];\\n \\n   /**\\n    * Set gang member to task.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Attempts to assign the specified Gang Member to the specified task.\\n    * If an invalid task is specified, the Gang member will be set to idle (“Unassigned”).\\n    *\\n    * @param memberName - Name of Gang member to assign.\\n    * @param taskName - Task to assign.\\n    * @returns True if the Gang Member was successfully assigned to the task, false otherwise.\\n    */\\n   setMemberTask(memberName: string, taskName: string): boolean;\\n \\n   /**\\n    * Get stats of a task.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Get the stats of a gang task stats. This is typically used to evaluate which action should be executed next.\\n    *\\n    * @param name -  Name of the task.\\n    * @returns Detailed stats of a task.\\n    */\\n   getTaskStats(name: string): GangTaskStats;\\n \\n   /**\\n    * List equipment names.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Get the name of all possible equipment/upgrades you can purchase for your Gang Members.\\n    * This includes Augmentations.\\n    *\\n    * @returns Names of all Equipments/Augmentations.\\n    */\\n   getEquipmentNames(): string[];\\n \\n   /**\\n    * Get cost of equipment.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Get the amount of money it takes to purchase a piece of Equipment or an Augmentation.\\n    * If an invalid Equipment/Augmentation is specified, this function will return Infinity.\\n    *\\n    * @param equipName - Name of equipment.\\n    * @returns Cost to purchase the specified Equipment/Augmentation (number). Infinity for invalid arguments\\n    */\\n   getEquipmentCost(equipName: string): number;\\n \\n   /**\\n    * Get type of an equipment.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Get the specified equipment type.\\n    *\\n    * @param equipName - Name of equipment.\\n    * @returns Type of the equipment.\\n    */\\n   getEquipmentType(equipName: string): string;\\n \\n   /**\\n    * Get stats of an equipment.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Get the specified equipment stats.\\n    *\\n    * @param equipName - Name of equipment.\\n    * @returns A dictionary containing the stats of the equipment.\\n    */\\n   getEquipmentStats(equipName: string): EquipmentStats;\\n \\n   /**\\n    * Purchase an equipment for a gang member.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Attempt to purchase the specified Equipment/Augmentation for the specified Gang member.\\n    *\\n    * @param memberName - Name of Gang member to purchase the equipment for.\\n    * @param equipName - Name of Equipment/Augmentation to purchase.\\n    * @returns True if the equipment was successfully purchased. False otherwise\\n    */\\n   purchaseEquipment(memberName: string, equipName: string): boolean;\\n \\n   /**\\n    * Ascend a gang member.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Ascend the specified Gang Member.\\n    *\\n    * @param memberName - Name of member to ascend.\\n    * @returns Object with info about the ascension results. undefined if ascension did not occur.\\n    */\\n   ascendMember(memberName: string): GangMemberAscension | undefined;\\n \\n   /**\\n    * Get the result of an ascension without ascending.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Get the result of an ascension without ascending.\\n    *\\n    * @param memberName - Name of member.\\n    * @returns Object with info about the ascension results. undefined if ascension is impossible.\\n    */\\n   getAscensionResult(memberName: string): GangMemberAscension | undefined;\\n \\n   /**\\n    * Enable/Disable territory warfare.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Set whether or not the gang should engage in territory warfare\\n    *\\n    * @param engage - Whether or not to engage in territory warfare.\\n    */\\n   setTerritoryWarfare(engage: boolean): void;\\n \\n   /**\\n    * Get chance to win clash with other gang.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns the chance you have to win a clash with the specified gang. The chance is returned in decimal form, not percentage\\n    *\\n    * @param gangName - Target gang\\n    * @returns Chance you have to win a clash with the specified gang.\\n    */\\n   getChanceToWinClash(gangName: string): number;\\n \\n   /**\\n    * Get bonus time.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Returns the amount of accumulated “bonus time” (seconds) for the Gang mechanic.\\n    *\\n    * “Bonus time” is accumulated when the game is offline or if the game is inactive in the browser.\\n    *\\n    * “Bonus time” makes the game progress faster, up to 10x the normal speed.\\n    *\\n    * @returns Bonus time for the Gang mechanic in milliseconds.\\n    */\\n   getBonusTime(): number;\\n }\\n \\n /**\\n  * Sleeve API\\n  * @remarks\\n  * If you are not in BitNode-10, then you must have Source-File 10 in order to use this API.\\n  * @public\\n  */\\n export interface Sleeve {\\n   /**\\n    * Get the number of sleeves you own.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return the number of duplicate sleeves the player has.\\n    *\\n    * @returns number of duplicate sleeves the player has.\\n    */\\n   getNumSleeves(): number;\\n \\n   /**\\n    * Get the stats of a sleeve.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a structure containing the stats of the sleeve.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to get stats of.\\n    * @returns Object containing the stats of the sleeve.\\n    */\\n   getSleeveStats(sleeveNumber: number): SleeveSkills;\\n \\n   /**\\n    * Get information about a sleeve.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a struct containing tons of information about this sleeve\\n    *\\n    * @param sleeveNumber - Index of the sleeve to retrieve information.\\n    * @returns Object containing tons of information about this sleeve.\\n    */\\n   getInformation(sleeveNumber: number): SleeveInformation;\\n \\n   /**\\n    * Get task of a sleeve.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return the current task that the sleeve is performing. type is set to “Idle” if the sleeve isn’t doing anything.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to retrieve task from.\\n    * @returns Object containing information the current task that the sleeve is performing.\\n    */\\n   getTask(sleeveNumber: number): SleeveTask;\\n \\n   /**\\n    * Set a sleeve to shock recovery.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a boolean indicating whether or not this action was set successfully.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to start recovery.\\n    * @returns True if this action was set successfully, false otherwise.\\n    */\\n   setToShockRecovery(sleeveNumber: number): boolean;\\n \\n   /**\\n    * Set a sleeve to synchronize.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a boolean indicating whether or not this action was set successfully.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to start synchronizing.\\n    * @returns True if this action was set successfully, false otherwise.\\n    */\\n   setToSynchronize(sleeveNumber: number): boolean;\\n \\n   /**\\n    * Set a sleeve to commit crime.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a boolean indicating whether or not this action was set successfully.\\n    *\\n    * Returns false if an invalid action is specified.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to start commiting crime.\\n    * @param name - Name of the crime. Must be an exact match.\\n    * @returns True if this action was set successfully, false otherwise.\\n    */\\n   setToCommitCrime(sleeveNumber: number, name: string): boolean;\\n \\n   /**\\n    * Set a sleeve to work for a faction.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a boolean indicating whether or not the sleeve started working or this faction.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to work for the faction.\\n    * @param factionName - Name of the faction to work for.\\n    * @param factionWorkType - Name of the action to perform for this faction.\\n    * @returns True if the sleeve started working on this faction, false otherwise.\\n    */\\n   setToFactionWork(sleeveNumber: number, factionName: string, factionWorkType: string): boolean;\\n \\n   /**\\n    * Set a sleeve to work for a company.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a boolean indicating whether or not the sleeve started working or this company.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to work for the company.\\n    * @param companyName - Name of the company to work for.\\n    * @returns True if the sleeve started working on this company, false otherwise.\\n    */\\n   setToCompanyWork(sleeveNumber: number, companyName: string): boolean;\\n \\n   /**\\n    * Set a sleeve to take a class at a university.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a boolean indicating whether or not this action was set successfully.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to start taking class.\\n    * @param university - Name of the university to attend.\\n    * @param className - Name of the class to follow.\\n    * @returns True if this action was set successfully, false otherwise.\\n    */\\n   setToUniversityCourse(sleeveNumber: number, university: string, className: string): boolean;\\n \\n   /**\\n    * Set a sleeve to workout at the gym.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a boolean indicating whether or not the sleeve started working out.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to workout at the gym.\\n    * @param gymName - Name of the gym.\\n    * @param stat - Name of the stat to train.\\n    * @returns True if the sleeve started working out, false otherwise.\\n    */\\n   setToGymWorkout(sleeveNumber: number, gymName: string, stat: string): boolean;\\n \\n   /**\\n    * Make a sleeve travel to another city.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a boolean indicating whether or not the sleeve reached destination.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to travel.\\n    * @param cityName - Name of the destination city.\\n    * @returns True if the sleeve reached destination, false otherwise.\\n    */\\n   travel(sleeveNumber: number, cityName: string): boolean;\\n \\n   /**\\n    * Get augmentations installed on a sleeve.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a list of augmentation names that this sleeve has installed.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to retrieve augmentations from.\\n    * @returns List of augmentation names that this sleeve has installed.\\n    */\\n   getSleeveAugmentations(sleeveNumber: number): string[];\\n \\n   /**\\n    * List purchasable augs for a sleeve.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return a list of augmentations that the player can buy for this sleeve.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to retrieve purchasable augmentations from.\\n    * @returns List of augmentations that the player can buy for this sleeve.\\n    */\\n   getSleevePurchasableAugs(sleeveNumber: number): AugmentPair[];\\n \\n   /**\\n    * Purchase an aug for a sleeve.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Return true if the aug was purchased and installed on the sleeve.\\n    *\\n    * @param sleeveNumber - Index of the sleeve to buy an aug for.\\n    * @param augName - Name of the aug to buy. Must be an exact match.\\n    * @returns True if the aug was purchased and installed on the sleeve, false otherwise.\\n    */\\n   purchaseSleeveAug(sleeveNumber: number, augName: string): boolean;\\n }\\n \\n /**\\n  * Skills formulas\\n  * @public\\n  */\\n interface SkillsFormulas {\\n   /**\\n    * Calculate skill level.\\n    * @param exp - experience for that skill\\n    * @param skillMult - Multiplier for that skill, defaults to 1.\\n    * @returns The calculated skill level.\\n    */\\n   calculateSkill(exp: number, skillMult?: number): number;\\n   /**\\n    * Calculate exp for skill level.\\n    * @param skill - target skill level\\n    * @param skillMult - Multiplier for that skill, defaults to 1.\\n    * @returns The calculated exp required.\\n    */\\n   calculateExp(skill: number, skillMult?: number): number;\\n }\\n \\n /**\\n  * Hacking formulas\\n  * @public\\n  */\\n interface HackingFormulas {\\n   /**\\n    * Calculate hack chance.\\n    * @param server - Server info from {@link NS.getServer | getServer}\\n    * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n    * @returns The calculated hack chance.\\n    */\\n   hackChance(server: Server, player: Player): number;\\n   /**\\n    * Calculate hack exp for one thread.\\n    * @remarks\\n    * Multiply by thread to get total exp\\n    * @param server - Server info from {@link NS.getServer | getServer}\\n    * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n    * @returns The calculated hack exp.\\n    */\\n   hackExp(server: Server, player: Player): number;\\n   /**\\n    * Calculate hack percent for one thread.\\n    * @remarks\\n    * Multiply by thread to get total percent hacked.\\n    * @param server - Server info from {@link NS.getServer | getServer}\\n    * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n    * @returns The calculated hack percent.\\n    */\\n   hackPercent(server: Server, player: Player): number;\\n   /**\\n    * Calculate the percent a server would grow.\\n    * @param server - Server info from {@link NS.getServer | getServer}\\n    * @param threads - Amount of thread.\\n    * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n    * @param cores - Number of cores on the computer that will execute grow.\\n    * @returns The calculated grow percent.\\n    */\\n   growPercent(server: Server, threads: number, player: Player, cores?: number): number;\\n   /**\\n    * Calculate hack time.\\n    * @param server - Server info from {@link NS.getServer | getServer}\\n    * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n    * @returns The calculated hack time.\\n    */\\n   hackTime(server: Server, player: Player): number;\\n   /**\\n    * Calculate grow time.\\n    * @param server - Server info from {@link NS.getServer | getServer}\\n    * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n    * @returns The calculated grow time.\\n    */\\n   growTime(server: Server, player: Player): number;\\n   /**\\n    * Calculate weaken time.\\n    * @param server - Server info from {@link NS.getServer | getServer}\\n    * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n    * @returns The calculated weaken time.\\n    */\\n   weakenTime(server: Server, player: Player): number;\\n }\\n \\n /**\\n  * Hacknet Node formulas\\n  * @public\\n  */\\n interface HacknetNodesFormulas {\\n   /**\\n    * Calculate money gain rate.\\n    * @param level - level of the node.\\n    * @param ram - ram of the node.\\n    * @param cores - cores of the node.\\n    * @param mult - player production mult (default to 1)\\n    * @returns The calculated money gain rate.\\n    */\\n   moneyGainRate(level: number, ram: number, cores: number, mult?: number): number;\\n   /**\\n    * Calculate cost of upgrading hacknet node level.\\n    * @param startingLevel - starting level\\n    * @param extraLevels - amount of level to purchase (defaults to 1)\\n    * @param costMult - player cost reduction (default to 1)\\n    * @returns The calculated cost.\\n    */\\n   levelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\\n   /**\\n    * Calculate cost of upgrading hacknet node ram.\\n    * @param startingRam - starting ram\\n    * @param extraLevels - amount of level of ram to purchase (defaults to 1)\\n    * @param costMult - player cost reduction (default to 1)\\n    * @returns The calculated cost.\\n    */\\n   ramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\\n   /**\\n    * Calculate cost of upgrading hacknet node cores.\\n    * @param startingCore - starting cores\\n    * @param extraCores - amount of cores to purchase (defaults to 1)\\n    * @param costMult - player cost reduction (default to 1)\\n    * @returns The calculated cost.\\n    */\\n   coreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\\n   /**\\n    * Calculate the cost of a hacknet node.\\n    * @param n - number of the hacknet node\\n    * @param mult - player cost reduction (defaults to 1)\\n    * @returns The calculated cost.\\n    */\\n   hacknetNodeCost(n: number, mult: number): number;\\n   /**\\n    * All constants used by the game.\\n    * @returns An object with all hacknet node constants used by the game.\\n    */\\n   constants(): HacknetNodeConstants;\\n }\\n \\n /**\\n  * Hacknet Server formulas\\n  * @public\\n  */\\n interface HacknetServersFormulas {\\n   /**\\n    * Calculate hash gain rate.\\n    * @param level - level of the server.\\n    * @param ramUsed - ramUsed of the server.\\n    * @param maxRam - maxRam of the server.\\n    * @param cores - cores of the server.\\n    * @param mult - player production mult (default to 1)\\n    * @returns The calculated hash gain rate.\\n    */\\n   hashGainRate(level: number, ramUsed: number, maxRam: number, cores: number, mult?: number): number;\\n   /**\\n    * Calculate cost of upgrading hacknet server level.\\n    * @param startingLevel - starting level\\n    * @param extraLevels - amount of level to purchase (defaults to 1)\\n    * @param costMult - player cost reduction (default to 1)\\n    * @returns The calculated cost.\\n    */\\n   levelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\\n   /**\\n    * Calculate cost of upgrading hacknet server ram.\\n    * @param startingRam - starting ram\\n    * @param extraLevels - amount of level of ram to purchase (defaults to 1)\\n    * @param costMult - player cost reduction (default to 1)\\n    * @returns The calculated cost.\\n    */\\n   ramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\\n   /**\\n    * Calculate cost of upgrading hacknet server cores.\\n    * @param startingCore - starting cores\\n    * @param extraCores - amount of cores to purchase (defaults to 1)\\n    * @param costMult - player cost reduction (default to 1)\\n    * @returns The calculated cost.\\n    */\\n   coreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\\n   /**\\n    * Calculate cost of upgrading hacknet server cache.\\n    * @param startingCache - starting cache level\\n    * @param extraCache - amount of levels of cache to purchase (defaults to 1)\\n    * @returns The calculated cost.\\n    */\\n   cacheUpgradeCost(startingCache: number, extraCache?: number): number;\\n   /**\\n    * Calculate hash cost of an upgrade.\\n    * @param upgName - name of the upgrade\\n    * @param level - level of the upgrade\\n    * @returns The calculated hash cost.\\n    */\\n   hashUpgradeCost(upgName: number, level: number): number;\\n   /**\\n    * Calculate the cost of a hacknet server.\\n    * @param n - number of the hacknet server\\n    * @param mult - player cost reduction (defaults to 1)\\n    * @returns The calculated cost.\\n    */\\n   hacknetServerCost(n: number, mult?: number): number;\\n   /**\\n    * All constants used by the game.\\n    * @returns An object with all hacknet server constants used by the game.\\n    */\\n   constants(): HacknetServerConstants;\\n }\\n \\n /**\\n  * Gang formulas\\n  * @public\\n  */\\n interface GangFormulas {\\n   /**\\n    * Calculate the wanted penalty.\\n    * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n    * @returns The calculated wanted penalty.\\n    */\\n   wantedPenalty(gang: GangGenInfo): number;\\n   /**\\n    * Calculate respect gain per tick.\\n    * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n    * @param member - Gang info from {@link Gang.getMemberInformation | getMemberInformation}\\n    * @param task - Gang info from {@link Gang.getTaskStats | getTaskStats}\\n    * @returns The calculated respect gain.\\n    */\\n   respectGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n   /**\\n    * Calculate wanted gain per tick.\\n    * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n    * @param member - Member info from {@link Gang.getMemberInformation | getMemberInformation}\\n    * @param task - Task info from {@link Gang.getTaskStats | getTaskStats}\\n    * @returns The calculated wanted gain.\\n    */\\n   wantedLevelGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n   /**\\n    * Calculate money gain per tick.\\n    * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n    * @param member - Member info from {@link Gang.getMemberInformation | getMemberInformation}\\n    * @param task - Task info from {@link Gang.getTaskStats | getTaskStats}\\n    * @returns The calculated money gain.\\n    */\\n   moneyGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n \\n   /**\\n    * Calculate ascension point gain.\\n    * @param exp - Experience point before ascension.\\n    * @returns The calculated ascension point gain.\\n    */\\n   ascensionPointsGain(exp: number): number;\\n \\n   /**\\n    * Calculate ascension mult.\\n    * @param points - Amount of ascension points.\\n    * @returns The calculated ascension mult.\\n    */\\n   ascensionMultiplier(points: number): number;\\n }\\n \\n /**\\n  * Formulas API\\n  * @remarks\\n  * You need Formulas.exe on your home computer to use this API.\\n  * @public\\n  */\\n export interface Formulas {\\n   /** Skills formulas */\\n   skills: SkillsFormulas;\\n   /** Hacking formulas */\\n   hacking: HackingFormulas;\\n   /** Hacknet Nodes formulas */\\n   hacknetNodes: HacknetNodesFormulas;\\n   /** Hacknet Servers formulas */\\n   hacknetServers: HacknetServersFormulas;\\n   /** Gang formulas */\\n   gang: GangFormulas;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface Fragment {\\n   id: number;\\n   shape: boolean[][];\\n   type: number;\\n   power: number;\\n   limit: number;\\n }\\n \\n /**\\n  * @public\\n  */\\n export interface ActiveFragment {\\n   id: number;\\n   avgCharge: number;\\n   numCharge: number;\\n   rotation: number;\\n   x: number;\\n   y: number;\\n }\\n \\n /**\\n  * Stanek's Gift API.\\n  * @public\\n  */\\n interface Stanek {\\n   /**\\n    * Stanek's Gift width.\\n    * @remarks\\n    * RAM cost: 0.4 GB\\n    * @returns The width of the gift.\\n    */\\n   width(): number;\\n   /**\\n    * Stanek's Gift height.\\n    * @remarks\\n    * RAM cost: 0.4 GB\\n    * @returns The height of the gift.\\n    */\\n   height(): number;\\n \\n   /**\\n    * Charge a fragment, increasing its power.\\n    * @remarks\\n    * RAM cost: 0.4 GB\\n    * @param rootX - rootX Root X against which to align the top left of the fragment.\\n    * @param rootY - rootY Root Y against which to align the top left of the fragment.\\n    * @returns Promise that lasts until the charge action is over.\\n    */\\n   charge(rootX: number, rootY: number): Promise<void>;\\n \\n   /**\\n    * List possible fragments.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @returns List of possible fragments.\\n    */\\n   fragmentDefinitions(): Fragment[];\\n \\n   /**\\n    * List of fragments in Stanek's Gift.\\n    * @remarks\\n    * RAM cost: 5 GB\\n    *\\n    * @returns List of active fragments placed on Stanek's Gift.\\n    */\\n   activeFragments(): ActiveFragment[];\\n \\n   /**\\n    * Clear the board of all fragments.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    */\\n   clear(): void;\\n \\n   /**\\n    * Check if fragment can be placed at specified location.\\n    * @remarks\\n    * RAM cost: 0.5 GB\\n    *\\n    * @param rootX - rootX Root X against which to align the top left of the fragment.\\n    * @param rootY - rootY Root Y against which to align the top left of the fragment.\\n    * @param rotation - rotation A number from 0 to 3, the mount of 90 degree turn to take.\\n    * @param fragmentId - fragmentId ID of the fragment to place.\\n    * @returns true if the fragment can be placed at that position. false otherwise.\\n    */\\n   canPlace(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\\n   /**\\n    * Place fragment on Stanek's Gift.\\n    * @remarks\\n    * RAM cost: 5 GB\\n    *\\n    * @param rootX - X against which to align the top left of the fragment.\\n    * @param rootY - Y against which to align the top left of the fragment.\\n    * @param rotation - A number from 0 to 3, the mount of 90 degree turn to take.\\n    * @param fragmentId - ID of the fragment to place.\\n    * @returns true if the fragment can be placed at that position. false otherwise.\\n    */\\n   place(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\\n   /**\\n    * Get placed fragment at location.\\n    * @remarks\\n    * RAM cost: 5 GB\\n    *\\n    * @param rootX - X against which to align the top left of the fragment.\\n    * @param rootY - Y against which to align the top left of the fragment.\\n    * @returns The fragment at [rootX, rootY], if any.\\n    */\\n   get(rootX: number, rootY: number): ActiveFragment | undefined;\\n \\n   /**\\n    * Remove fragment at location.\\n    * @remarks\\n    * RAM cost: 0.15 GB\\n    *\\n    * @param rootX - X against which to align the top left of the fragment.\\n    * @param rootY - Y against which to align the top left of the fragment.\\n    * @returns The fragment at [rootX, rootY], if any.\\n    */\\n   remove(rootX: number, rootY: number): boolean;\\n }\\n \\n /**\\n  * User Interface API.\\n  * @public\\n  */\\n interface UserInterface {\\n   /**\\n    * Get the current theme\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @returns An object containing the theme's colors\\n    */\\n   getTheme(): UserInterfaceTheme;\\n \\n   /**\\n    * Sets the current theme\\n    * @remarks\\n    * RAM cost: 0 GB\\n    * @example\\n    * Usage example (NS2)\\n    * ```ts\\n    * const theme = ns.ui.getTheme();\\n    * theme.primary = '#ff5500';\\n    * ns.ui.setTheme(theme);\\n    * ```\\n    */\\n   setTheme(newTheme: UserInterfaceTheme): void;\\n \\n   /**\\n    * Resets the player's theme to the default values\\n    * @remarks\\n    * RAM cost: 0 GB\\n    */\\n   resetTheme(): void;\\n \\n   /**\\n    * Get the current styles\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @returns An object containing the player's styles\\n    */\\n   getStyles(): IStyleSettings;\\n \\n   /**\\n    * Sets the current styles\\n    * @remarks\\n    * RAM cost: 0 GB\\n    * @example\\n    * Usage example (NS2)\\n    * ```ts\\n    * const styles = ns.ui.getStyles();\\n    * styles.fontFamily = 'Comic Sans Ms';\\n    * ns.ui.setStyles(styles);\\n    * ```\\n    */\\n   setStyles(newStyles: IStyleSettings): void;\\n \\n   /**\\n    * Resets the player's styles to the default values\\n    * @remarks\\n    * RAM cost: 0 GB\\n    */\\n   resetStyles(): void;\\n \\n   /**\\n    * Gets the current game information (version, commit, ...)\\n    * @remarks\\n    * RAM cost: 0 GB\\n    */\\n   getGameInfo(): GameInfo;\\n }\\n \\n /**\\n  * Collection of all functions passed to scripts\\n  * @public\\n  * @remarks\\n  * <b>Basic ns1 usage example:</b>\\n  * ```ts\\n  *  // Basic ns functions can be used directly\\n  *  getHostname();\\n  *  // Some related functions are gathered within a common namespace\\n  *  stock.getPrice();\\n  * ```\\n  * {@link https://bitburner.readthedocs.io/en/latest/netscript/netscript1.html| ns1 in-game docs}\\n  * <hr>\\n  * <b>Basic ns2 usage example:</b>\\n  * ```ts\\n  * export async function main(ns) {\\n  *  // Basic ns functions can be accessed on the ns object\\n  *  ns.getHostname();\\n  *  // Some related functions are gathered under a sub-property of the ns object\\n  *  ns.stock.getPrice();\\n  *  // Some functions need to be await ed\\n  *  await ns.hack('n00dles');\\n  * }\\n  * ```\\n  * {@link https://bitburner.readthedocs.io/en/latest/netscript/netscriptjs.html| ns2 in-game docs}\\n  * <hr>\\n  */\\n export interface NS extends Singularity {\\n   /**\\n    * Namespace for hacknet functions.\\n    * @remarks RAM cost: 4 GB\\n    */\\n   readonly hacknet: Hacknet;\\n   /**\\n    *\\n    * Namespace for bladeburner functions.\\n    * @remarks RAM cost: 0 GB\\n    */\\n   readonly bladeburner: Bladeburner;\\n   /**\\n    *\\n    * Namespace for codingcontract functions.\\n    * @remarks RAM cost: 0 GB\\n    */\\n   readonly codingcontract: CodingContract;\\n   /**\\n    *\\n    * Namespace for gang functions.\\n    * @remarks RAM cost: 0 GB\\n    */\\n   readonly gang: Gang;\\n   /**\\n    *\\n    * Namespace for sleeve functions.\\n    * @remarks RAM cost: 0 GB\\n    */\\n   readonly sleeve: Sleeve;\\n   /**\\n    *\\n    * Namespace for stock functions.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    */\\n   readonly stock: TIX;\\n   /**\\n    *\\n    * Namespace for formulas functions.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    */\\n   readonly formulas: Formulas;\\n   /**\\n    * Namespace for stanek functions.\\n    * RAM cost: 0 GB\\n    */\\n   readonly stanek: Stanek;\\n   /**\\n    * Namespace for corporation functions.\\n    * RAM cost: 0 GB\\n    */\\n   readonly corporation: Corporation;\\n \\n   /**\\n    * Namespace for user interface functions.\\n    * RAM cost: 0 GB\\n    */\\n   readonly ui: UserInterface;\\n \\n   /**\\n    * Arguments passed into the script.\\n    *\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Arguments passed into a script can be accessed using a normal\\n    * array using the [] operator (args[0], args[1], etc…).\\n    *\\n    * It is also possible to get the number of arguments that was passed into a script using: 'args.length'\\n    * WARNING: Do not try to modify the args array. This will break the game.\\n    */\\n   readonly args: (string | number | boolean)[];\\n \\n   /**\\n    * Steal a servers money.\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Function that is used to try and hack servers to steal money and gain hacking experience.\\n    * The runtime for this command depends on your hacking level and the target server’s\\n    * security level when this function is called. In order to hack a server you must first gain root access to that server\\n    * and also have the required hacking level.\\n    *\\n    * A script can hack a server from anywhere. It does not need to be running on the same\\n    * server to hack that server. For example, you can create a script that hacks the `foodnstuff`\\n    * server and run that script on any server in the game.\\n    *\\n    * A successful `hack()` on a server will raise that server’s security level by 0.002.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * var earnedMoney = hack(\\\"foodnstuff\\\");\\n    * earnedMoney = earnedMoney + hack(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to hack\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * let earnedMoney = await ns.hack(\\\"foodnstuff\\\");\\n    * earnedMoney += await ns.hack(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to hack\\n    * ```\\n    * @param host - Hostname of the target server to hack.\\n    * @param opts - Optional parameters for configuring function behavior.\\n    * @returns The amount of money stolen if the hack is successful, and zero otherwise.\\n    */\\n   hack(host: string, opts?: BasicHGWOptions): Promise<number>;\\n \\n   /**\\n    * Spoof money in a servers bank account, increasing the amount available.\\n    * @remarks\\n    * RAM cost: 0.15 GB\\n    *\\n    * Use your hacking skills to increase the amount of money available on a server.\\n    * The runtime for this command depends on your hacking level and the target server’s\\n    * security level. When `grow` completes, the money available on a target server will\\n    * be increased by a certain, fixed percentage. This percentage is determined by the\\n    * target server’s growth rate (which varies between servers) and security level. Generally,\\n    * higher-level servers have higher growth rates. The getServerGrowth() function can be used\\n    * to obtain a server’s growth rate.\\n    *\\n    * Like hack, `grow` can be called on any server, regardless of where the script is running.\\n    * The grow() command requires root access to the target server, but there is no required hacking\\n    * level to run the command. It also raises the security level of the target server by 0.004.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * var availableMoney = getServerMoneyAvailable(\\\"foodnstuff\\\");\\n    * currentMoney = currentMoney * (1 + grow(\\\"foodnstuff\\\"));\\n    * currentMoney = currentMoney * (1 + grow(\\\"foodnstuff\\\", { threads: 5 })); // Only use 5 threads to grow\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * let availableMoney = ns.getServerMoneyAvailable(\\\"foodnstuff\\\");\\n    * currentMoney *= (1 + await ns.grow(\\\"foodnstuff\\\"));\\n    * currentMoney *= (1 + await ns.grow(\\\"foodnstuff\\\", { threads: 5 })); // Only use 5 threads to grow\\n    * ```\\n    * @param host - Hostname of the target server to grow.\\n    * @param opts - Optional parameters for configuring function behavior.\\n    * @returns The number by which the money on the server was multiplied for the growth.\\n    */\\n   grow(host: string, opts?: BasicHGWOptions): Promise<number>;\\n \\n   /**\\n    * Reduce a server security level.\\n    * @remarks\\n    * RAM cost: 0.15 GB\\n    *\\n    * Use your hacking skills to attack a server’s security, lowering the server’s security level.\\n    * The runtime for this command depends on your hacking level and the target server’s security\\n    * level when this function is called. This function lowers the security level of the target server by 0.05.\\n    *\\n    * Like hack and grow, `weaken` can be called on any server, regardless of\\n    * where the script is running. This command requires root access to the target server, but\\n    * there is no required hacking level to run the command.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * var currentSecurity = getServerSecurityLevel(\\\"foodnstuff\\\");\\n    * currentSecurity = currentSecurity - weaken(\\\"foodnstuff\\\");\\n    * currentSecurity = currentSecurity - weaken(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to weaken\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * let currentSecurity = ns.getServerSecurityLevel(\\\"foodnstuff\\\");\\n    * currentSecurity -= await ns.weaken(\\\"foodnstuff\\\");\\n    * currentSecurity -= await ns.weaken(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to weaken\\n    * ```\\n    * @param host - Hostname of the target server to weaken.\\n    * @param opts - Optional parameters for configuring function behavior.\\n    * @returns The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads.\\n    */\\n   weaken(host: string, opts?: BasicHGWOptions): Promise<number>;\\n \\n   /**\\n    * Predict the effect of weaken.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Returns the security decrease that would occur if a weaken with this many threads happened.\\n    *\\n    * @param threads - Amount of threads that will be used.\\n    * @param cores - Optional. The number of cores of the server that would run weaken.\\n    * @returns The security decrease.\\n    */\\n   weakenAnalyze(threads: number, cores?: number): number;\\n \\n   /**\\n    * Predict the effect of hack.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * This function returns the number of script threads you need when running the hack command\\n    * to steal the specified amount of money from the target server.\\n    * If hackAmount is less than zero or greater than the amount of money available on the server,\\n    * then this function returns -1.\\n    *\\n    * Warning: The value returned by this function isn’t necessarily a whole number.\\n    *\\n    * @example\\n    * ```ts\\n    * //For example, let’s say the foodnstuff server has $10m and you run:\\n    * hackAnalyzeThreads(\\\"foodnstuff\\\", 1e6);\\n    * //If this function returns 50, this means that if your next hack call is run on a script with 50 threads, it will steal $1m from the foodnstuff server.\\n    * ```\\n    * @param host - Hostname of the target server to analyze.\\n    * @param hackAmount - Amount of money you want to hack from the server.\\n    * @returns The number of threads needed to hack the server for hackAmount money.\\n    */\\n   hackAnalyzeThreads(host: string, hackAmount: number): number;\\n \\n   /**\\n    * Get the part of money stolen with a single thread.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Returns the part of the specified server’s money you will steal with a single thread hack.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //For example, assume the following returns 0.01:\\n    * var hackAmount = hackAnalyze(\\\"foodnstuff\\\");\\n    * //This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //For example, assume the following returns 0.01:\\n    * const hackAmount = ns.hackAnalyze(\\\"foodnstuff\\\");\\n    * //This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\\n    * ```\\n    * @param host - Hostname of the target server.\\n    * @returns The part of money you will steal from the target server with a single thread hack.\\n    */\\n   hackAnalyze(host: string): number;\\n \\n   /**\\n    * Get the security increase for a number of thread.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Returns the security increase that would occur if a hack with this many threads happened.\\n    *\\n    * @param threads - Amount of threads that will be used.\\n    * @returns The security increase.\\n    */\\n   hackAnalyzeSecurity(threads: number): number;\\n \\n   /**\\n    * Get the chance of successfully hacking a server.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Returns the chance you have of successfully hacking the specified server.\\n    *\\n    * This returned value is in decimal form, not percentage.\\n    *\\n    * @param host - Hostname of the target server.\\n    * @returns The chance you have of successfully hacking the target server.\\n    */\\n   hackAnalyzeChance(host: string): number;\\n \\n   /**\\n    * Calculate the number of grow thread needed to grow a server by a certain multiplier.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * This function returns the number of “growths” needed in order to increase\\n    * the amount of money available on the specified server by the specified amount.\\n    * The specified amount is multiplicative and is in decimal form, not percentage.\\n    *\\n    * Warning: The value returned by this function isn’t necessarily a whole number.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n    * var growTimes = growthAnalyze(\\\"foodnstuff\\\", 2);\\n    * //If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n    * const growTimes = ns.growthAnalyze(\\\"foodnstuff\\\", 2);\\n    * //If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n    * ```\\n    * @param host - Hostname of the target server.\\n    * @param growthAmount - Multiplicative factor by which the server is grown. Decimal form..\\n    * @returns The amount of grow calls needed to grow the specified server by the specified amount\\n    */\\n   growthAnalyze(host: string, growthAmount: number, cores?: number): number;\\n \\n   /**\\n    * Calculate the security increase for a number of thread.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Returns the security increase that would occur if a grow with this many threads happened.\\n    *\\n    * @param threads - Amount of threads that will be used.\\n    * @returns The security increase.\\n    */\\n   growthAnalyzeSecurity(threads: number): number;\\n \\n   /**\\n    * Suspends the script for n milliseconds.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @param millis - Number of milliseconds to sleep.\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * // This will count from 1 to 10 in your terminal, with one number every 5 seconds\\n    * for (var i=0; i<10; i++) {\\n    *   tprint(i + 1);\\n    *   sleep(5000);\\n    * }\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * // This will count from 1 to 10 in your terminal, with one number every 5 seconds\\n    * for (var i=0; i<10; i++) {\\n    *   ns.tprint(i + 1);\\n    *   await ns.sleep(5000);\\n    * }\\n    * ```\\n    * @returns\\n    */\\n   sleep(millis: number): Promise<void>;\\n \\n   /**\\n    * Suspends the script for n milliseconds. Doesn't block with concurrent calls.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @param millis - Number of milliseconds to sleep.\\n    * @returns\\n    */\\n   asleep(millis: number): Promise<void>;\\n \\n   /**\\n    * Prints one or move values or variables to the script’s logs.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @param args - Value(s) to be printed.\\n    */\\n   print(...args: any[]): void;\\n \\n   /**\\n    * Prints one or more values or variables to the Terminal.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @param args - Value(s) to be printed.\\n    */\\n   tprint(...args: any[]): void;\\n \\n   /**\\n    * Prints a raw value or a variable to the Terminal.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @param format - format of the message\\n    * @param msg - Value to be printed.\\n    */\\n   tprintf(format: string, ...values: any[]): void;\\n \\n   /**\\n    * Clears the script’s logs.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    */\\n   clearLog(): void;\\n \\n   /**\\n    * Disables logging for the given function.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Logging can be disabled for all functions by passing `ALL` as the argument.\\n    *\\n    * Note that this does not completely remove all logging functionality.\\n    * This only stops a function from logging when the function is successful.\\n    * If the function fails, it will still log the reason for failure.\\n    *\\n    * @param fn - Name of function for which to disable logging.\\n    */\\n   disableLog(fn: string): void;\\n \\n   /**\\n    * Enable logging for a certain function.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Re-enables logging for the given function. If `ALL` is passed into this\\n    * function as an argument, then it will revert the effects of disableLog(`ALL`).\\n    *\\n    * @param fn - Name of function for which to enable logging.\\n    */\\n   enableLog(fn: string): void;\\n \\n   /**\\n    * Checks the status of the logging for the given function.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @param fn - Name of function to check.\\n    * @returns Returns a boolean indicating whether or not logging is enabled for that function (or `ALL`)\\n    */\\n   isLogEnabled(fn: string): boolean;\\n \\n   /**\\n    * Get all the logs of a script.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Returns a script’s logs. The logs are returned as an array, where each line is an element in the array.\\n    * The most recently logged line is at the end of the array.\\n    * Note that there is a maximum number of lines that a script stores in its logs. This is configurable in the game’s options.\\n    * If the function is called with no arguments, it will return the current script’s logs.\\n    *\\n    * Otherwise, the fn, hostname/ip, and args… arguments can be used to get the logs from another script.\\n    * Remember that scripts are uniquely identified by both their names and arguments.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //Get logs from foo.script on the current server that was run with no args\\n    * getScriptLogs(\\\"foo.script\\\");\\n    *\\n    * //Open logs from foo.script on the foodnstuff server that was run with no args\\n    * getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //Open logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n    * getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //Get logs from foo.script on the current server that was run with no args\\n    * ns.getScriptLogs(\\\"foo.script\\\");\\n    *\\n    * //Open logs from foo.script on the foodnstuff server that was run with no args\\n    * ns.getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //Open logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n    * ns.getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n    * ```\\n    * @param fn - Optional. Filename of script to get logs from.\\n    * @param host - Optional. Hostname of the server that the script is on.\\n    * @param args - Arguments to identify which scripts to get logs for.\\n    * @returns Returns an string array, where each line is an element in the array. The most recently logged line is at the end of the array.\\n    */\\n   getScriptLogs(fn?: string, host?: string, ...args: any[]): string[];\\n \\n   /**\\n    * Open the tail window of a script.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Opens a script’s logs. This is functionally the same as the tail Terminal command.\\n    *\\n    * If the function is called with no arguments, it will open the current script’s logs.\\n    *\\n    * Otherwise, the fn, hostname/ip, and args… arguments can be used to get the logs from another script.\\n    * Remember that scripts are uniquely identified by both their names and arguments.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //Open logs from foo.script on the current server that was run with no args\\n    * tail(\\\"foo.script\\\");\\n    *\\n    * //Get logs from foo.script on the foodnstuff server that was run with no args\\n    * tail(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //Get logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n    * tail(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //Open logs from foo.script on the current server that was run with no args\\n    * ns.tail(\\\"foo.script\\\");\\n    *\\n    * //Get logs from foo.script on the foodnstuff server that was run with no args\\n    * ns.tail(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //Get logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n    * ns.tail(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n    * ```\\n    * @param fn - Optional. Filename or PID of the script being tailed. If omitted, the current script is tailed.\\n    * @param host - Optional. Hostname of the script being tailed. Defaults to the server this script is running on. If args are specified, this is not optional.\\n    * @param args - Arguments for the script being tailed.\\n    */\\n   tail(fn?: FilenameOrPID, host?: string, ...args: any[]): void;\\n \\n   /**\\n    * Get the list of servers connected to a server.\\n    * @remarks\\n    * RAM cost: 0.2 GB\\n    *\\n    * Returns an array containing the hostnames of all servers that are one\\n    * node way from the specified target server. The hostnames in the returned\\n    * array are strings.\\n    *\\n    * @param host - Optional, Hostname of the server to scan, default to current server.\\n    * @returns Returns an string of hostnames.\\n    */\\n   scan(host?: string): string[];\\n \\n   /**\\n    * Runs NUKE.exe on a server.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * Running NUKE.exe on a target server gives you root access which means you can executes scripts on said server. NUKE.exe must exist on your home computer.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * nuke(\\\"foodnstuff\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * ns.nuke(\\\"foodnstuff\\\");\\n    * ```\\n    * @param host - Hostname of the target server.\\n    */\\n   nuke(host: string): void;\\n \\n   /**\\n    * Runs BruteSSH.exe on a server.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * Runs the BruteSSH.exe program on the target server. BruteSSH.exe must exist on your home computer.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * brutessh(\\\"foodnstuff\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * ns.brutessh(\\\"foodnstuff\\\");\\n    * ```\\n    * @param host - Hostname of the target server.\\n    */\\n   brutessh(host: string): void;\\n \\n   /**\\n    * Runs FTPCrack.exe on a server.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * Runs the FTPCrack.exe program on the target server. FTPCrack.exe must exist on your home computer.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * ftpcrack(\\\"foodnstuff\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * ns.ftpcrack(\\\"foodnstuff\\\");\\n    * ```\\n    * @param host - Hostname of the target server.\\n    */\\n   ftpcrack(host: string): void;\\n \\n   /**\\n    * Runs relaySMTP.exe on a server.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * Runs the relaySMTP.exe program on the target server. relaySMTP.exe must exist on your home computer.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * relaysmtp(\\\"foodnstuff\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * ns.relaysmtp(\\\"foodnstuff\\\");\\n    * ```\\n    * @param host - Hostname of the target server.\\n    */\\n   relaysmtp(host: string): void;\\n \\n   /**\\n    * Runs HTTPWorm.exe on a server.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * Runs the HTTPWorm.exe program on the target server. HTTPWorm.exe must exist on your home computer.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * httpworm(\\\"foodnstuff\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * ns.httpworm(\\\"foodnstuff\\\");\\n    * ```\\n    * @param host - Hostname of the target server.\\n    */\\n   httpworm(host: string): void;\\n \\n   /**\\n    * Runs SQLInject.exe on a server.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * Runs the SQLInject.exe program on the target server. SQLInject.exe must exist on your home computer.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * sqlinject(\\\"foodnstuff\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * ns.sqlinject(\\\"foodnstuff\\\");\\n    * ```\\n    * @remarks RAM cost: 0.05 GB\\n    * @param host - Hostname of the target server.\\n    */\\n   sqlinject(host: string): void;\\n \\n   /**\\n    * Start another script on the current server.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Run a script as a separate process. This function can only be used to run scripts located on the\\n    * current server (the server running the script that calls this function). Requires a significant\\n    * amount of RAM to run this command.\\n    *\\n    * If the script was successfully started, then this functions returns the PID of that script.\\n    * Otherwise, it returns 0.\\n    *\\n    * PID stands for Process ID. The PID is a unique identifier for each script.\\n    * The PID will always be a positive integer.\\n    *\\n    * Running this function with a numThreads argument of 0 will return 0 without running the script.\\n    * However, running this function with a negative numThreads argument will cause a runtime error.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //The simplest way to use the run command is to call it with just the script name. The following example will run ‘foo.script’ single-threaded with no arguments:\\n    * run(\\\"foo.script\\\");\\n    *\\n    * //The following example will run ‘foo.script’ but with 5 threads instead of single-threaded:\\n    * run(\\\"foo.script\\\", 5);\\n    *\\n    * //This next example will run ‘foo.script’ single-threaded, and will pass the string ‘foodnstuff’ into the script as an argument:\\n    * run(\\\"foo.script\\\", 1, 'foodnstuff');\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //The simplest way to use the run command is to call it with just the script name. The following example will run ‘foo.script’ single-threaded with no arguments:\\n    * ns.run(\\\"foo.script\\\");\\n    *\\n    * //The following example will run ‘foo.script’ but with 5 threads instead of single-threaded:\\n    * ns.run(\\\"foo.script\\\", 5);\\n    *\\n    * //This next example will run ‘foo.script’ single-threaded, and will pass the string ‘foodnstuff’ into the script as an argument:\\n    * ns.run(\\\"foo.script\\\", 1, 'foodnstuff');\\n    * ```\\n    * @param script - Filename of script to run.\\n    * @param numThreads - Optional thread count for new script. Set to 1 by default. Will be rounded to nearest integer.\\n    * @param args - Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the second argument numThreads must be filled in with a value.\\n    * @returns Returns the PID of a successfully started script, and 0 otherwise.\\n    */\\n   run(script: string, numThreads?: number, ...args: Array<string | number | boolean>): number;\\n \\n   /**\\n    * Start another script on any server.\\n    * @remarks\\n    * RAM cost: 1.3 GB\\n    *\\n    * Run a script as a separate process on a specified server. This is similar to the run function\\n    * except that it can be used to run a script on any server, instead of just the current server.\\n    *\\n    * If the script was successfully started, then this functions returns the PID of that script.\\n    * Otherwise, it returns 0.\\n    *\\n    * PID stands for Process ID. The PID is a unique identifier for each script.\\n    * The PID will always be a positive integer.\\n    *\\n    * Running this function with a numThreads argument of 0 will return 0 without running the script.\\n    * However, running this function with a negative numThreads argument will cause a runtime error.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //The simplest way to use the exec command is to call it with just the script name and the target server. The following example will try to run generic-hack.script on the foodnstuff server:\\n    * exec(\\\"generic-hack.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //The following example will try to run the script generic-hack.script on the joesguns server with 10 threads:\\n    * exec(\\\"generic-hack.script\\\", \\\"joesguns\\\", 10);\\n    *\\n    * //This last example will try to run the script foo.script on the foodnstuff server with 5 threads. It will also pass the number 1 and the string “test” in as arguments to the script:\\n    * exec(\\\"foo.script\\\", \\\"foodnstuff\\\", 5, 1, \\\"test\\\");\\n    * ```\\n    * * @example\\n    * ```ts\\n    * // NS2:\\n    * //The simplest way to use the exec command is to call it with just the script name and the target server. The following example will try to run generic-hack.script on the foodnstuff server:\\n    * ns.exec(\\\"generic-hack.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //The following example will try to run the script generic-hack.script on the joesguns server with 10 threads:\\n    * ns.exec(\\\"generic-hack.script\\\", \\\"joesguns\\\", 10);\\n    *\\n    * //This last example will try to run the script foo.script on the foodnstuff server with 5 threads. It will also pass the number 1 and the string “test” in as arguments to the script:\\n    * ns.exec(\\\"foo.script\\\", \\\"foodnstuff\\\", 5, 1, \\\"test\\\");\\n    * ```\\n    * @param script - Filename of script to execute.\\n    * @param host - Hostname of the `target server` on which to execute the script.\\n    * @param numThreads - Optional thread count for new script. Set to 1 by default. Will be rounded to nearest integer.\\n    * @param args - Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the third argument numThreads must be filled in with a value.\\n    * @returns Returns the PID of a successfully started script, and 0 otherwise.\\n    */\\n   exec(script: string, host: string, numThreads?: number, ...args: Array<string | number | boolean>): number;\\n \\n   /**\\n    * Terminate current script and start another in 10s.\\n    * @remarks\\n    * RAM cost: 2 GB\\n    *\\n    * Terminates the current script, and then after a delay of about 10 seconds it will execute the\\n    * newly-specified script. The purpose of this function is to execute a new script without being\\n    * constrained by the RAM usage of the current one. This function can only be used to run scripts\\n    * on the local server.\\n    *\\n    * Because this function immediately terminates the script, it does not have a return value.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //The following example will execute the script ‘foo.script’ with 10 threads and the arguments ‘foodnstuff’ and 90:\\n    * spawn('foo.script', 10, 'foodnstuff', 90);\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //The following example will execute the script ‘foo.script’ with 10 threads and the arguments ‘foodnstuff’ and 90:\\n    * ns.spawn('foo.script', 10, 'foodnstuff', 90);\\n    * ```\\n    * @param script - Filename of script to execute.\\n    * @param numThreads - Number of threads to spawn new script with. Will be rounded to nearest integer.\\n    * @param args - Additional arguments to pass into the new script that is being run.\\n    */\\n   spawn(script: string, numThreads?: number, ...args: string[]): void;\\n \\n   /**\\n    * Terminate another script.\\n    * @remarks\\n    * RAM cost: 0.5 GB\\n    *\\n    * Kills the script on the target server specified by the script’s name and arguments.\\n    * Remember that scripts are uniquely identified by both their name and arguments.\\n    * For example, if `foo.script` is run with the argument 1, then this is not the same as\\n    * `foo.script` run with the argument 2, even though they have the same code.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //The following example will try to kill a script named foo.script on the foodnstuff server that was ran with no arguments:\\n    * kill(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //The following will try to kill a script named foo.script on the current server that was ran with no arguments:\\n    * kill(\\\"foo.script\\\", getHostname());\\n    *\\n    * //The following will try to kill a script named foo.script on the current server that was ran with the arguments 1 and “foodnstuff”:\\n    * kill(\\\"foo.script\\\", getHostname(), 1, \\\"foodnstuff\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //The following example will try to kill a script named foo.script on the foodnstuff server that was ran with no arguments:\\n    * ns.kill(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //The following will try to kill a script named foo.script on the current server that was ran with no arguments:\\n    * ns.kill(\\\"foo.script\\\", getHostname());\\n    *\\n    * //The following will try to kill a script named foo.script on the current server that was ran with the arguments 1 and “foodnstuff”:\\n    * ns.kill(\\\"foo.script\\\", getHostname(), 1, \\\"foodnstuff\\\");\\n    * ```\\n    * @param script - Filename or pid of the script to kill\\n    * @param host - Hostname of the server on which to kill the script.\\n    * @param args - Arguments to identify which script to kill.\\n    * @returns True if the script is successfully killed, and false otherwise.\\n    */\\n   kill(script: number): boolean;\\n   kill(script: string, host: string, ...args: string[]): boolean;\\n \\n   /**\\n    * Terminate all scripts on a server.\\n    * @remarks\\n    * RAM cost: 0.5 GB\\n    *\\n    * Kills all running scripts on the specified server. This function returns true\\n    * if any scripts were killed, and false otherwise. In other words, it will return\\n    * true if there are any scripts running on the target server.\\n    * If no host is defined, it will kill all scripts, where the script is running.\\n    *\\n    * @param host - IP or hostname of the server on which to kill all scripts.\\n    * @returns True if any scripts were killed, and false otherwise.\\n    */\\n   killall(host?: string): boolean;\\n \\n   /**\\n    * Terminates the current script immediately.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    */\\n   exit(): void;\\n \\n   /**\\n    * Copy file between servers.\\n    * @remarks\\n    * RAM cost: 0.6 GB\\n    *\\n    * Copies a script or literature (.lit) file(s) to another server. The files argument can be either a string\\n    * specifying a single file to copy, or an array of strings specifying multiple files to copy.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //Copies foo.lit from the helios server to the home computer:\\n    * scp(\\\"foo.lit\\\", \\\"helios\\\", \\\"home\\\");\\n    *\\n    * //Tries to copy three files from rothman-uni to home computer:\\n    * files = [\\\"foo1.lit\\\", \\\"foo2.script\\\", \\\"foo3.script\\\"];\\n    * scp(files, \\\"rothman-uni\\\", \\\"home\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //Copies foo.lit from the helios server to the home computer:\\n    * await ns.scp(\\\"foo.lit\\\", \\\"helios\\\", \\\"home\\\");\\n    *\\n    * //Tries to copy three files from rothman-uni to home computer:\\n    * files = [\\\"foo1.lit\\\", \\\"foo2.script\\\", \\\"foo3.script\\\"];\\n    * await ns.scp(files, \\\"rothman-uni\\\", \\\"home\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * //ns2, copies files from home to a target server\\n    * const server = ns.args[0];\\n    * const files = [\\\"hack.js\\\",\\\"weaken.js\\\",\\\"grow.js\\\"];\\n    * await ns.scp(files, \\\"home\\\", server);\\n    * ```\\n    * @param files - Filename or an array of filenames of script/literature files to copy.\\n    * @param source - Host of the source server, which is the server from which the file will be copied. This argument is optional and if it’s omitted the source will be the current server.\\n    * @param destination - Host of the destination server, which is the server to which the file will be copied.\\n    * @returns True if the script/literature file is successfully copied over and false otherwise. If the files argument is an array then this function will return true if at least one of the files in the array is successfully copied.\\n    */\\n   scp(files: string | string[], destination: string): Promise<boolean>;\\n   scp(files: string | string[], source: string, destination: string): Promise<boolean>;\\n \\n   /**\\n    * List files on a server.\\n    * @remarks\\n    * RAM cost: 0.2 GB\\n    *\\n    * Returns an array with the filenames of all files on the specified server\\n    * (as strings). The returned array is sorted in alphabetic order.\\n    *\\n    * @param host - Host of the target server.\\n    * @param grep - A substring to search for in the filename.\\n    * @returns Array with the filenames of all files on the specified server.\\n    */\\n   ls(host: string, grep?: string): string[];\\n \\n   /**\\n    * List running scripts on a server.\\n    * @remarks\\n    * RAM cost: 0.2 GB\\n    *\\n    * Returns an array with general information about all scripts running on the specified target server.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * const scripts = ps(\\\"home\\\");\\n    * for (let i = 0; i < scripts.length; ++i) {\\n    *     tprint(scripts[i].filename + ' ' + scripts[i].threads);\\n    *     tprint(scripts[i].args);\\n    * }\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * const ps = ns.ps(\\\"home\\\");\\n    * for (script of ps) {\\n    *     ns.tprint(`${script.filename} ${ps[i].threads}`);\\n    *     ns.tprint(script.args);\\n    * }\\n    * ```\\n    * @param host - Host address of the target server. If not specified, it will be the current server’s IP by default.\\n    * @returns Array with general information about all scripts running on the specified target server.\\n    */\\n   ps(host?: string): ProcessInfo[];\\n \\n   /**\\n    * Check if your have root access on a server.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * Returns a boolean indicating whether or not the player has root access to the specified target server.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * if (hasRootAccess(\\\"foodnstuff\\\") == false) {\\n    *    nuke(\\\"foodnstuff\\\");\\n    * }\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * if (ns.hasRootAccess(\\\"foodnstuff\\\") == false) {\\n    *    ns.nuke(\\\"foodnstuff\\\");\\n    * }\\n    * ```\\n    * @param host - Host of the target server\\n    * @returns True if player has root access to the specified target server, and false otherwise.\\n    */\\n   hasRootAccess(host: string): boolean;\\n \\n   /**\\n    * Returns a string with the hostname of the server that the script is running on.\\n    *\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    * @returns Hostname of the server that the script is on.\\n    */\\n   getHostname(): string;\\n \\n   /**\\n    * Returns the player’s current hacking level.\\n    *\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    * @returns Player’s current hacking level\\n    */\\n   getHackingLevel(): number;\\n \\n   /**\\n    * Get hacking related multipliers.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns an object containing the Player’s hacking related multipliers.\\n    * These multipliers are returned in fractional forms, not percentages\\n    * (e.g. 1.5 instead of 150%).\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * // Example of how this can be used:\\n    * var mults = getHackingMultipliers();\\n    * print(mults.chance);\\n    * print(mults.growth);\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * // Example of how this can be used:\\n    * const {chance, growth} = ns.getHackingMultipliers();\\n    * print(chance);\\n    * print(growth);\\n    * ```\\n    * @returns Object containing the Player’s hacking related multipliers.\\n    */\\n   getHackingMultipliers(): HackingMultipliers;\\n \\n   /**\\n    * Get hacknet related multipliers.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns an object containing the Player’s hacknet related multipliers.\\n    * These multipliers are returned in fractional forms, not percentages\\n    * (e.g. 1.5 instead of 150%).\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * // Example of how this can be used:\\n    * var mults = getHacknetMultipliers();\\n    * print(mults.production);\\n    * print(mults.purchaseCost);\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * // Example of how this can be used:\\n    * const {production, purchaseCost} = ns.getHacknetMultipliers();\\n    * print(production);\\n    * print(purchaseCost);\\n    * ```\\n    * @returns Object containing the Player’s hacknet related multipliers.\\n    */\\n   getHacknetMultipliers(): HacknetMultipliers;\\n \\n   /**\\n    * Returns a server object for the given server. Defaults to the running script's server if host is not specified.\\n    *\\n    * @remarks\\n    * RAM cost: 2 GB\\n    * @param host - Optional. Hostname for the requested server object.\\n    * @returns The requested server object.\\n    */\\n   getServer(host?: string): Server;\\n \\n   /**\\n    * Get money available on a server.\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Returns the amount of money available on a server.\\n    * Running this function on the home computer will return the player’s money.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * getServerMoneyAvailable(\\\"foodnstuff\\\");\\n    * getServerMoneyAvailable(\\\"home\\\"); //Returns player's money\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * ns.getServerMoneyAvailable(\\\"foodnstuff\\\");\\n    * ns.getServerMoneyAvailable(\\\"home\\\"); // Returns player's money\\n    * ```\\n    * @param host - Host of target server\\n    * @returns Amount of money available on the server.\\n    */\\n   getServerMoneyAvailable(host: string): number;\\n \\n   /**\\n    * Get maximum money available on a server.\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Returns the maximum amount of money that can be available on a server.\\n    *\\n    * @param host - Host of target server.\\n    * @returns Maximum amount of money available on the server.\\n    */\\n   getServerMaxMoney(host: string): number;\\n \\n   /**\\n    * Get a server growth parameter.\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Returns the server’s intrinsic “growth parameter”. This growth\\n    * parameter is a number typically between 0 and 100 that represents\\n    * how quickly the server’s money grows. This parameter affects the\\n    * percentage by which the server’s money is increased when using the\\n    * grow function. A higher growth parameter will result in a\\n    * higher percentage increase from grow.\\n    *\\n    * @param host - Host of target server.\\n    * @returns Parameter that affects the percentage by which the server’s money is increased when using the grow function.\\n    */\\n   getServerGrowth(host: string): number;\\n \\n   /**\\n    * Get server security level.\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Returns the security level of the target server. A server’s security\\n    * level is denoted by a number, typically between 1 and 100\\n    * (but it can go above 100).\\n    *\\n    * @param host - Host of target server.\\n    * @returns Security level of the target server.\\n    */\\n   getServerSecurityLevel(host: string): number;\\n \\n   /**\\n    * Returns the minimum security level of the target server.\\n    *\\n    * @remarks RAM cost: 0.1 GB\\n    * @param host - Host of target server.\\n    * @returns Minimum security level of the target server.\\n    */\\n   getServerMinSecurityLevel(host: string): number;\\n \\n   /**\\n    * @deprecated useless\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    * Returns the base security level of the target server. This is the security\\n    * level that the server starts out with. This is different than\\n    * getServerSecurityLevel because getServerSecurityLevel returns\\n    * the current security level of a server, which can constantly change due to\\n    * hack, grow, and weaken, calls on that server.\\n    * The base security level will stay the same until you reset by\\n    * installing an Augmentation(s).\\n    *\\n    * @param host - Host of target server.\\n    * @returns Base security level of the target server.\\n    */\\n   getServerBaseSecurityLevel(host: string): number;\\n \\n   /**\\n    * @deprecated use getServerMaxRam / getServerUsedRam\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Returns an array with two elements that gives information about a server’s memory (RAM).\\n    * The first element in the array is the amount of RAM that the server has total (in GB).\\n    * The second element in the array is the amount of RAM that is currently being used on\\n    * the server (in GB).\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * var serverRam = getServerRam(\\\"helios\\\");\\n    * var totalRam = serverRam[0];\\n    * var ramUsed = serverRam[1];\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * const [totalRam, ramUsed] = ns.getServerRam(\\\"helios\\\");\\n    * ```\\n    * @param host - Host of target server.\\n    * @returns Array with total and used memory on the specified server, in GB.\\n    */\\n   getServerRam(host: string): [number, number];\\n \\n   /**\\n    * Get the max RAM on a server.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * @param host - Hostname of the target server.\\n    * @returns max ram (GB)\\n    */\\n   getServerMaxRam(host: string): number;\\n   /**\\n    * Get the used RAM on a server.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * @param host - Hostname of the target server.\\n    * @returns used ram (GB)\\n    */\\n   getServerUsedRam(host: string): number;\\n \\n   /**\\n    * Returns the required hacking level of the target server.\\n    *\\n    * @remarks RAM cost: 0.1 GB\\n    * @param host - Host of target server.\\n    * @returns The required hacking level of the target server.\\n    */\\n   getServerRequiredHackingLevel(host: string): number;\\n \\n   /**\\n    * Returns the number of open ports required to successfully run NUKE.exe on the specified server.\\n    *\\n    * @remarks RAM cost: 0.1 GB\\n    * @param host - Host of target server.\\n    * @returns The number of open ports required to successfully run NUKE.exe on the specified server.\\n    */\\n   getServerNumPortsRequired(host: string): number;\\n \\n   /**\\n    * Returns a boolean denoting whether or not the specified server exists.\\n    *\\n    * @remarks RAM cost: 0.1 GB\\n    * @param host - Host of target server.\\n    * @returns True if specified server exists, and false otherwise.\\n    */\\n   serverExists(host: string): boolean;\\n \\n   /**\\n    * Check if a file exists.\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Returns a boolean indicating whether the specified file exists on the target server.\\n    * The filename for scripts is case-sensitive, but for other types of files it is not.\\n    * For example, fileExists(“brutessh.exe”) will work fine, even though the actual program\\n    * is named 'BruteSSH.exe'.\\n    *\\n    * If the hostname/ip argument is omitted, then the function will search through the current\\n    * server (the server running the script that calls this function) for the file.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //The function call will return true if the script named foo.script exists on the foodnstuff server, and false otherwise.\\n    * fileExists(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //The function call will return true if the current server contains the FTPCrack.exe program, and false otherwise.\\n    * fileExists(\\\"ftpcrack.exe\\\");\\n    * ```\\n    * * @example\\n    * ```ts\\n    * // NS2:\\n    * // The function call will return true if the script named foo.script exists on the foodnstuff server, and false otherwise.\\n    * ns.fileExists(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * // The function call will return true if the current server contains the FTPCrack.exe program, and false otherwise.\\n    * ns.fileExists(\\\"ftpcrack.exe\\\");\\n    * ```\\n    * @param filename - Filename of file to check.\\n    * @param host - Host of target server. This is optional. If it is not specified then the function will use the current server as the target server.\\n    * @returns True if specified file exists, and false otherwise.\\n    */\\n   fileExists(filename: string, host?: string): boolean;\\n \\n   /**\\n    * Check if a script is running.\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Returns a boolean indicating whether the specified script is running on the target server.\\n    * If you use a PID instead of a filename, the hostname and args parameters are unnecessary.\\n    * Remember that a script is uniquely identified by both its name and its arguments.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //The function call will return true if there is a script named foo.script with no arguments running on the foodnstuff server, and false otherwise:\\n    * isRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //The function call will return true if there is a script named foo.script with no arguments running on the current server, and false otherwise:\\n    * isRunning(\\\"foo.script\\\", getHostname());\\n    *\\n    * //The function call will return true if there is a script named foo.script running with the arguments 1, 5, and “test” (in that order) on the joesguns server, and false otherwise:\\n    * isRunning(\\\"foo.script\\\", \\\"joesguns\\\", 1, 5, \\\"test\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * //The function call will return true if there is a script named foo.script with no arguments running on the foodnstuff server, and false otherwise:\\n    * ns.isRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //The function call will return true if there is a script named foo.script with no arguments running on the current server, and false otherwise:\\n    * ns.isRunning(\\\"foo.script\\\", ns.getHostname());\\n    *\\n    * //The function call will return true if there is a script named foo.script running with the arguments 1, 5, and “test” (in that order) on the joesguns server, and false otherwise:\\n    * ns.isRunning(\\\"foo.script\\\", \\\"joesguns\\\", 1, 5, \\\"test\\\");\\n    * ```\\n    * @param script - Filename or PID of script to check. This is case-sensitive.\\n    * @param host - Host of target server.\\n    * @param args - Arguments to specify/identify which scripts to search for.\\n    * @returns True if specified script is running on the target server, and false otherwise.\\n    */\\n   isRunning(script: FilenameOrPID, host: string, ...args: string[]): boolean;\\n \\n   /**\\n    * Get general info about a running script.\\n    * @remarks\\n    * RAM cost: 0.3 GB\\n    *\\n    * Running with no args returns curent script.\\n    * If you use a PID as the first parameter, the hostname and args parameters are unnecessary.\\n    *\\n    * @param filename - Optional. Filename or PID of the script.\\n    * @param hostname - Optional. Name of host server the script is running on.\\n    * @param args  - Arguments to identify the script\\n    * @returns info about a running script\\n    */\\n   getRunningScript(filename?: FilenameOrPID, hostname?: string, ...args: (string | number)[]): RunningScript;\\n \\n   /**\\n    * Get cost of purchasing a server.\\n    * @remarks\\n    * RAM cost: 0.25 GB\\n    *\\n    * Returns the cost to purchase a server with the specified amount of ram.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * for (i = 1; i <= 20; i++) {\\n    *     tprint(i + \\\" -- \\\" + getPurchasedServerCost(Math.pow(2, i)));\\n    * }\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * for (i = 1; i <= 20; i++) {\\n    *     ns.tprint(i + \\\" -- \\\" + ns.getPurchasedServerCost(Math.pow(2, i)));\\n    * }\\n    * ```\\n    * @param ram - Amount of RAM of a potential purchased server, in GB. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20).\\n    * @returns The cost to purchase a server with the specified amount of ram.\\n    */\\n   getPurchasedServerCost(ram: number): number;\\n \\n   /**\\n    * Purchase a server.\\n    * @remarks\\n    * 2.25 GB\\n    *\\n    * Purchased a server with the specified hostname and amount of RAM.\\n    *\\n    * The hostname argument can be any data type, but it will be converted to a string\\n    * and have whitespace removed. Anything that resolves to an empty string will cause\\n    * the function to fail. If there is already a server with the specified hostname,\\n    * then the function will automatically append a number at the end of the hostname\\n    * argument value until it finds a unique hostname. For example, if the script calls\\n    * `purchaseServer(“foo”, 4)` but a server named “foo” already exists, the it will\\n    * automatically change the hostname to `foo-0`. If there is already a server with the\\n    * hostname `foo-0`, then it will change the hostname to `foo-1`, and so on.\\n    *\\n    * Note that there is a maximum limit to the amount of servers you can purchase.\\n    *\\n    * Returns the hostname of the newly purchased server as a string. If the function\\n    * fails to purchase a server, then it will return an empty string. The function will\\n    * fail if the arguments passed in are invalid, if the player does not have enough\\n    * money to purchase the specified server, or if the player has exceeded the maximum\\n    * amount of servers.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * var ram = 64;\\n    * var prefix = \\\"pserv-\\\";\\n    * for (i = 0; i < 5; ++i) {\\n    *    purchaseServer(prefix + i, ram);\\n    * }\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * const ram = 64;\\n    * const prefix = \\\"pserv-\\\";\\n    * for (i = 0; i < 5; ++i) {\\n    *    ns.purchaseServer(prefix + i, ram);\\n    * }\\n    * ```\\n    * @param hostname - Host of the purchased server.\\n    * @param ram - Amount of RAM of the purchased server, in GB. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20).\\n    * @returns The hostname of the newly purchased server.\\n    */\\n   purchaseServer(hostname: string, ram: number): string;\\n \\n   /**\\n    * Delete a purchased server.\\n    * @remarks\\n    * 2.25 GB\\n    *\\n    * Deletes one of your purchased servers, which is specified by its hostname.\\n    *\\n    * The hostname argument can be any data type, but it will be converted to a string.\\n    * Whitespace is automatically removed from the string. This function will not delete a\\n    * server that still has scripts running on it.\\n    *\\n    * @param host - Host of the server to delete.\\n    * @returns True if successful, and false otherwise.\\n    */\\n   deleteServer(host: string): boolean;\\n \\n   /**\\n    * Returns an array with the hostnames of all of the servers you have purchased.\\n    *\\n    * @remarks 2.25 GB\\n    * @returns Returns an array with the hostnames of all of the servers you have purchased.\\n    */\\n   getPurchasedServers(): string[];\\n \\n   /**\\n    * Returns the maximum number of servers you can purchase.\\n    *\\n    * @remarks RAM cost: 0.05 GB\\n    * @returns Returns the maximum number of servers you can purchase.\\n    */\\n   getPurchasedServerLimit(): number;\\n \\n   /**\\n    * Returns the maximum RAM that a purchased server can have.\\n    *\\n    * @remarks RAM cost: 0.05 GB\\n    * @returns Returns the maximum RAM (in GB) that a purchased server can have.\\n    */\\n   getPurchasedServerMaxRam(): number;\\n \\n   /**\\n    * Write data to a file.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function can be used to write data to a text file (.txt).\\n    *\\n    * This function will write data to that text file. If the specified text file does not exist,\\n    * then it will be created. The third argument mode, defines how the data will be written to\\n    * the text file. If *mode is set to “w”, then the data is written in “write” mode which means\\n    * that it will overwrite all existing data on the text file. If mode is set to any other value\\n    * then the data will be written in “append” mode which means that the data will be added at the\\n    * end of the text file.\\n    *\\n    * @param handle - Filename of the text file that will be written to.\\n    * @param data - Data to write.\\n    * @param mode - Defines the write mode. Only valid when writing to text files.\\n    */\\n   write(handle: string, data?: string[] | number | string, mode?: \\\"w\\\" | \\\"a\\\"): Promise<void>;\\n \\n   /**\\n    * Attempt to write to a port.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Attempts to write data to the specified Netscript Port.\\n    * If the port is full, the data will not be written.\\n    * Otherwise, the data will be written normally.\\n    *\\n    * @param port - Port or text file that will be written to.\\n    * @param data - Data to write.\\n    * @returns True if the data is successfully written to the port, and false otherwise.\\n    */\\n   tryWritePort(port: number, data: string[] | number): Promise<boolean>;\\n \\n   /**\\n    * Read content of a file.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is used to read data from a text file (.txt).\\n    *\\n    * This function will return the data in the specified text\\n    * file. If the text file does not exist, an empty string will be returned.\\n    *\\n    * @param handle - Filename to read from.\\n    * @returns Data in the specified text file.\\n    */\\n   read(handle: string): any;\\n \\n   /**\\n    * Get a copy of the data from a port without popping it.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * This function is used to peek at the data from a port. It returns the\\n    * first element in the specified port without removing that element. If\\n    * the port is empty, the string “NULL PORT DATA” will be returned.\\n    *\\n    * @param port - Port to peek. Must be an integer between 1 and 20.\\n    * @returns Data in the specified port.\\n    */\\n   peek(port: number): any;\\n \\n   /**\\n    * Clear data from a file.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Delete all data from that text file.\\n    *\\n    * @param handle - Text file to clear.\\n    */\\n   clear(handle: string): void;\\n \\n   /**\\n    * Clear data from a port.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Deleta all data from the underlying queue.\\n    *\\n    * @param handle - Port to clear.\\n    */\\n   clearPort(handle: number): void;\\n \\n   /**\\n    * Write data to a port.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Write data to that netscript port.\\n    * @returns The data popped off the queue if it was full.\\n    */\\n   writePort(port: number, data: string | number): Promise<any>;\\n   /**\\n    * Read data from a port.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Read data from that port. A port is a serialized queue.\\n    * This function will remove the first element from that queue and return it.\\n    * If the queue is empty, then the string “NULL PORT DATA” will be returned.\\n    * @returns the data read.\\n    */\\n   readPort(port: number): any;\\n \\n   /**\\n    * Get all data on a port.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Get a handle to a Netscript Port.\\n    *\\n    * WARNING: Port Handles only work in NetscriptJS (Netscript 2.0). They will not work in Netscript 1.0.\\n    *\\n    * @see https://bitburner.readthedocs.io/en/latest/netscript/netscriptmisc.html#netscript-ports\\n    * @param port - Port number. Must be an integer between 1 and 20.\\n    */\\n   getPortHandle(port: number): NetscriptPort;\\n \\n   /**\\n    * Delete a file.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Removes the specified file from the current server. This function works for every file\\n    * type except message (.msg) files.\\n    *\\n    * @param name - Filename of file to remove. Must include the extension.\\n    * @param host - Host Address of the server on which to delete the file. Optional. Defaults to current server.\\n    * @returns True if it successfully deletes the file, and false otherwise.\\n    */\\n   rm(name: string, host?: string): boolean;\\n \\n   /**\\n    * Check if any script with a filename is running.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Returns a boolean indicating whether any instance of the specified script is running\\n    * on the target server, regardless of its arguments.\\n    *\\n    * This is different than the isRunning function because it does not try to\\n    * identify a specific instance of a running script by its arguments.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * //The function call will return true if there is any script named foo.script running on the foodnstuff server, and false otherwise:\\n    * scriptRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //The function call will return true if there is any script named “foo.script” running on the current server, and false otherwise:\\n    * scriptRunning(\\\"foo.script\\\", getHostname());\\n    * ```\\n    * * @example\\n    * ```ts\\n    * // NS2:\\n    * //The function call will return true if there is any script named foo.script running on the foodnstuff server, and false otherwise:\\n    * ns.scriptRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n    *\\n    * //The function call will return true if there is any script named “foo.script” running on the current server, and false otherwise:\\n    * ns.scriptRunning(\\\"foo.script\\\", ns.getHostname());\\n    * ```\\n    * @param script - Filename of script to check. This is case-sensitive.\\n    * @param host - Host of target server.\\n    * @returns True if the specified script is running, and false otherwise.\\n    */\\n   scriptRunning(script: string, host: string): boolean;\\n \\n   /**\\n    * Kill all scripts with a filename.\\n    * @remarks\\n    * RAM cost: 1 GB\\n    *\\n    * Kills all scripts with the specified filename on the target server specified by hostname,\\n    * regardless of arguments.\\n    *\\n    * @param script - Filename of script to kill. This is case-sensitive.\\n    * @param host - Host of target server.\\n    * @returns true if one or more scripts were successfully killed, and false if none were.\\n    */\\n   scriptKill(script: string, host: string): boolean;\\n \\n   /**\\n    * Returns the current script name.\\n    *\\n    * @remarks RAM cost: 0 GB\\n    * @returns Current script name.\\n    */\\n   getScriptName(): string;\\n \\n   /**\\n    * Get the ram cost of a script.\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Returns the amount of RAM required to run the specified script on the target server.\\n    * Returns 0 if the script does not exist.\\n    *\\n    * @param script - Filename of script. This is case-sensitive.\\n    * @param host - Host of target server the script is located on. This is optional, If it is not specified then the function will se the current server as the target server.\\n    * @returns Amount of RAM (in GB) required to run the specified script on the target server, and 0 if the script does not exist.\\n    */\\n   getScriptRam(script: string, host?: string): number;\\n \\n   /**\\n    * Get the execution time of a hack() call.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *When `hack` completes an amount of money is stolen depending on the player's skills.\\n    * Returns the amount of time in milliseconds it takes to execute the hack Netscript function on the target server.\\n    * The function takes in an optional hackLvl parameter that can be specified to see what the hack time would be at different hacking levels.\\n    * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n    *\\n    * @param host - Host of target server.\\n    * @returns Returns the amount of time in milliseconds it takes to execute the hack Netscript function. Returns Infinity if called on a Hacknet Server.\\n    */\\n   getHackTime(host: string): number;\\n \\n   /**\\n    * Get the execution time of a grow() call.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * Returns the amount of time in milliseconds it takes to execute the grow Netscript function on the target server.\\n    * The function takes in an optional hackLvl parameter that can be specified to see what the grow time would be at different hacking levels.\\n    * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n    *\\n    * @param host - Host of target server.\\n    * @returns Returns the amount of time in milliseconds it takes to execute the grow Netscript function. Returns Infinity if called on a Hacknet Server.\\n    */\\n   getGrowTime(host: string): number;\\n \\n   /**\\n    * Get the execution time of a weaken() call.\\n    * @remarks\\n    * RAM cost: 0.05 GB\\n    *\\n    * Returns the amount of time in milliseconds it takes to execute the weaken Netscript function on the target server.\\n    * The function takes in an optional hackLvl parameter that can be specified to see what the weaken time would be at different hacking levels.\\n    * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n    *\\n    * @param host - Host of target server.\\n    * @returns Returns the amount of time in milliseconds it takes to execute the weaken Netscript function. Returns Infinity if called on a Hacknet Server.\\n    */\\n   getWeakenTime(host: string): number;\\n \\n   /**\\n    * Get the income of a script.\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Returns the amount of income the specified script generates while online\\n    * (when the game is open, does not apply for offline income). Remember that\\n    * a script is uniquely identified by both its name and its arguments. So for\\n    * example if you ran a script with the arguments “foodnstuff” and “5” then\\n    * in order to use this function to get that script’s income you must specify\\n    * those same arguments in the same order in this function call.\\n    *\\n    * This function can also be called with no arguments.\\n    * If called with no arguments, then this function will return an array of two values.\\n    * The first value is the total income (dollar / second) of all of your active scripts\\n    * (scripts that are currently running on any server).\\n    * The second value is the total income (dollar / second) that you’ve earned from scripts\\n    * since you last installed Augmentations.\\n    *\\n    * @param script - Filename of script.\\n    * @param host - Server on which script is running.\\n    * @param args - Arguments that the script is running with.\\n    * @returns Amount of income the specified script generates while online.\\n    */\\n   getScriptIncome(): [number, number];\\n   getScriptIncome(script: string, host: string, ...args: string[]): number;\\n \\n   /**\\n    * Get the exp gain of a script.\\n    * @remarks\\n    * RAM cost: 0.1 GB\\n    *\\n    * Returns the amount of hacking experience the specified script generates while online\\n    * (when the game is open, does not apply for offline experience gains). Remember that a\\n    * script is uniquely identified by both its name and its arguments.\\n    *\\n    * This function can also return the total experience gain rate of all of your active\\n    * scripts by running the function with no arguments.\\n    *\\n    * @param script - Filename of script.\\n    * @param host - Server on which script is running.\\n    * @param args - Arguments that the script is running with.\\n    * @returns Amount of hacking experience the specified script generates while online.\\n    */\\n   getScriptExpGain(): number;\\n   getScriptExpGain(script: string, host: string, ...args: string[]): number;\\n \\n   /**\\n    * Returns the amount of time in milliseconds that have passed since you last installed Augmentations.\\n    *\\n    * @remarks RAM cost: 0.05 GB\\n    * @returns Time in milliseconds that have passed since you last installed Augmentations.\\n    */\\n   getTimeSinceLastAug(): number;\\n \\n   /**\\n    * Format a string.\\n    *\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * see: https://github.com/alexei/sprintf.js\\n    * @param format - String to format.\\n    * @param args - Formating arguments.\\n    * @returns Formated text.\\n    */\\n   sprintf(format: string, ...args: any[]): string;\\n \\n   /**\\n    * Format a string with an array of arguments.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * see: https://github.com/alexei/sprintf.js\\n    * @param format - String to format.\\n    * @param args - Formating arguments.\\n    * @returns Formated text.\\n    */\\n   vsprintf(format: string, args: any[]): string;\\n \\n   /**\\n    * Format a number\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Converts a number into a string with the specified formatter.\\n    * This uses the numeraljs library, so the formatters must be compatible with that.\\n    * This is the same function that the game itself uses to display numbers.\\n    *\\n    * see: http://numeraljs.com/\\n    * @param n - Number to format.\\n    * @param format - Formatter.\\n    * @returns Formated number.\\n    */\\n   nFormat(n: number, format: string): string;\\n \\n   /**\\n    * Format time to readable string\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * @param milliseconds - Number of millisecond to format.\\n    * @param milliPrecision - Format time with subsecond precision, defaults to false.\\n    * @returns The formatted time.\\n    */\\n   tFormat(milliseconds: number, milliPrecision?: boolean): string;\\n \\n   /**\\n    * Prompt the player with a Yes/No modal.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Prompts the player with a dialog box with two options: “Yes” and “No”.\\n    * This function will return true if the player click “Yes” and false if\\n    * the player clicks “No”. The script’s execution is halted until the player\\n    * selects one of the options.\\n    *\\n    * @param txt - Text to appear in the prompt dialog box.\\n    * @returns True if the player click “Yes” and false if the player clicks “No”.\\n    */\\n   prompt(txt: string): Promise<boolean>;\\n \\n   /**\\n    * Open up a message box.\\n    * @param msg - Message to alert.\\n    */\\n   alert(msg: any): void;\\n \\n   /**\\n    * Queue a toast (bottom-right notification).\\n    * @param msg - Message in the toast.\\n    * @param variant - Type of toast, must be one of success, info, warning, error. Defaults to success.\\n    * @param duration - Duration of toast in ms. Can also be `null` to create a persistent toast. Defaults to 2000\\n    */\\n   toast(msg: any, variant?: string, duration?: number | null): void;\\n \\n   /**\\n    * Download a file from the internet.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Retrieves data from a URL and downloads it to a file on the specified server.\\n    * The data can only be downloaded to a script (.script, .ns, .js) or a text file (.txt).\\n    * If the file already exists, it will be overwritten by this command.\\n    * Note that it will not be possible to download data from many websites because they\\n    * do not allow cross-origin resource sharing (CORS).\\n    *\\n    * IMPORTANT: This is an asynchronous function that returns a Promise.\\n    * The Promise’s resolved value will be a boolean indicating whether or not the data was\\n    * successfully retrieved from the URL. Because the function is async and returns a Promise,\\n    * it is recommended you use wget in NetscriptJS (Netscript 2.0).\\n    *\\n    * In NetscriptJS, you must preface any call to wget with the await keyword (like you would hack or sleep).\\n    * wget will still work in Netscript 1.0, but the functions execution will not be synchronous\\n    * (i.e. it may not execute when you expect/want it to).\\n    * Furthermore, since Promises are not supported in ES5,\\n    * you will not be able to process the returned value of wget in Netscript 1.0.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * wget(\\\"https://raw.githubusercontent.com/danielyxie/bitburner/master/README.md\\\", \\\"game_readme.txt\\\");\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * await ns.wget(\\\"https://raw.githubusercontent.com/danielyxie/bitburner/master/README.md\\\", \\\"game_readme.txt\\\");\\n    * ```\\n    * @param url - URL to pull data from.\\n    * @param target - Filename to write data to. Must be script or text file.\\n    * @param host - Optional hostname/ip of server for target file.\\n    * @returns True if the data was successfully retrieved from the URL, false otherwise.\\n    */\\n   wget(url: string, target: string, host?: string): Promise<boolean>;\\n \\n   /**\\n    * Returns the amount of Faction favor required to be able to donate to a faction.\\n    *\\n    * @remarks RAM cost: 0.1 GB\\n    * @returns Amount of Faction favor required to be able to donate to a faction.\\n    */\\n   getFavorToDonate(): number;\\n \\n   /**\\n    * Get the current Bitnode multipliers.\\n    * @remarks\\n    * RAM cost: 4 GB\\n    *\\n    * Returns an object containing the current BitNode multipliers.\\n    * This function requires you to be in Bitnode 5 or have Source-File 5 in order to run.\\n    * The multipliers are returned in decimal forms (e.g. 1.5 instead of 150%).\\n    * The multipliers represent the difference between the current BitNode and\\n    * the original BitNode (BitNode-1).\\n    *\\n    * For example, if the CrimeMoney multiplier has a value of 0.1, then that means\\n    * that committing crimes in the current BitNode will only give 10% of the money\\n    * you would have received in BitNode-1.\\n    *\\n    * @example\\n    * ```ts\\n    * // NS1:\\n    * var mults = getBitNodeMultipliers();\\n    * print(mults.ServerMaxMoney);\\n    * print(mults.HackExpGain);\\n    * ```\\n    * @example\\n    * ```ts\\n    * // NS2:\\n    * const {ServerMaxMoney, HackExpGain} = ns.getBitNodeMultipliers();\\n    * print(ServerMaxMoney);\\n    * print(HackExpGain);\\n    * ```\\n    * @returns Object containing the current BitNode multipliers.\\n    */\\n   getBitNodeMultipliers(): BitNodeMultipliers;\\n \\n   /**\\n    * Get a list of acquired Source-Files.\\n    * @remarks\\n    * RAM cost: 5 GB\\n    *\\n    * Returns an array of source files\\n    *\\n    * @returns Array containing an object with number and level of the source file.\\n    */\\n   getOwnedSourceFiles(): SourceFileLvl[];\\n \\n   /**\\n    * Get information about the player.\\n    * @remarks\\n    * RAM cost: 0.5 GB\\n    *\\n    * Returns an object with information on the current player.\\n    *\\n    * @returns Player info\\n    */\\n   getPlayer(): Player;\\n \\n   /**\\n    * Add callback function when the script dies\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * NS2 exclusive\\n    *\\n    * Add callback to be executed when the script dies.\\n    */\\n   atExit(f: () => void): void;\\n \\n   /**\\n    * Move a file on the target server.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * NS2 exclusive\\n    *\\n    * Move the source file to the specified destination on the target server.\\n    *\\n    * This command only works for scripts and text files (.txt). It cannot, however,  be used\\n    * to convert from script to text file, or vice versa.\\n    *\\n    * This function can also be used to rename files.\\n    *\\n    * @param host - Host of target server.\\n    * @param source - Filename of the source file.\\n    * @param destination - Filename of the destination file.\\n    */\\n   mv(host: string, source: string, destination: string): void;\\n \\n   /**\\n    * Parse command line flags.\\n    * @remarks\\n    * RAM cost: 0 GB\\n    *\\n    * Allows unix like flag parsing.\\n    * @example\\n    * ```ts\\n    * // example.script\\n    * var data = flags([\\n    *     ['delay', 0], // a default number means this flag is a number\\n    *     ['server', 'foodnstuff'], //  a default string means this flag is a string\\n    *     ['exclude', []], // a default array means this flag is a default array of string\\n    *     ['help', false], // a default boolean means this flag is a boolean\\n    * ]);\\n    * tprint(data);\\n    *\\n    * // example.ns\\n    * export async function main(ns) {\\n    *   const data = ns.flags([\\n    *     ['delay', 0], // a default number means this flag is a number\\n    *     ['server', 'foodnstuff'], //  a default string means this flag is a string\\n    *     ['exclude', []], // a default array means this flag is a default array of string\\n    *     ['help', false], // a default boolean means this flag is a boolean\\n    *   ]);\\n    *   ns.tprint(data);\\n    * }\\n    *\\n    * // [home ~/]> run example.script\\n    * // {\\\"_\\\":[],\\\"delay\\\":0,\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":false}\\n    * // [home ~/]> run example.script --delay 3000\\n    * // {\\\"_\\\":[],\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000}\\n    * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi\\n    * // {\\\"_\\\":[],\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\"}\\n    * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi hello world\\n    * // {\\\"_\\\":[\\\"hello\\\",\\\"world\\\"],\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\"}\\n    * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi hello world --exclude a --exclude b\\n    * // {\\\"_\\\":[\\\"hello\\\",\\\"world\\\"],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\",\\\"exclude\\\":[\\\"a\\\",\\\"b\\\"]}\\n    * // [home ~/]> run example.script --help\\n    * // {\\\"_\\\":[],\\\"delay\\\":0,\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":true}\\n    * ```\\n    */\\n   flags(schema: [string, string | number | boolean | string[]][]): any;\\n \\n   /**\\n    * Share your computer with your factions.\\n    * @remarks\\n    * RAM cost: 2.4 GB\\n    *\\n    * Increases your rep gain of hacking contracts while share is called.\\n    * Scales with thread count.\\n    */\\n   share(): Promise<void>;\\n \\n   /**\\n    * Calculate your share power. Based on all the active share calls.\\n    * @remarks\\n    * RAM cost: 0.2 GB\\n    */\\n   getSharePower(): number;\\n }\\n \\n /**\\n  * Corporation Office API\\n  * @remarks\\n  * Requires the Office API upgrade from your corporation.\\n  * @public\\n  */\\n export interface OfficeAPI {\\n   /**\\n    * Assign an employee to a job.\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param employeeName - name of the employee\\n    * @param job - Name of the job.\\n    * @returns A promise that is fulfilled when the assignment is complete.\\n    */\\n   assignJob(divisionName: string, cityName: string, employeeName: string, job: string): Promise<void>;\\n   /**\\n    * Hire an employee.\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @returns The newly hired employee, if any\\n    */\\n   hireEmployee(divisionName: string, cityName: string): Employee | undefined;\\n   /**\\n    * Upgrade office size.\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param size - Amount of positions to open\\n    */\\n   upgradeOfficeSize(divisionName: string, cityName: string, size: number): void;\\n   /**\\n    * Throw a party for your employees\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param costPerEmployee - Amount to spend per employee.\\n    * @returns Amount of happiness increased.\\n    */\\n   throwParty(divisionName: string, cityName: string, costPerEmployee: number): Promise<number>;\\n   /**\\n    * Buy coffee for your employees\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @returns A promise that is fulfilled when the coffee is served.\\n    */\\n   buyCoffee(divisionName: string, cityName: string): Promise<void>;\\n   /**\\n    * Hire AdVert.\\n    * @param divisionName - Name of the division\\n    */\\n   hireAdVert(divisionName: string): void;\\n   /**\\n    * Purchase a research\\n    * @param divisionName - Name of the division\\n    * @param researchName - Name of the research\\n    */\\n   research(divisionName: string, researchName: string): void;\\n   /**\\n    * Get data about an office\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @returns Office data\\n    */\\n   getOffice(divisionName: string, cityName: string): Office;\\n   /**\\n    * Get data about an employee\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param employeeName - Name of the employee\\n    * @returns Employee data\\n    */\\n   getEmployee(divisionName: string, cityName: string, employeeName: string): Employee;\\n   /**\\n    * Get the cost to Hire AdVert\\n    * @param divisionName - Name of the division\\n    * @returns Cost\\n    */\\n   getHireAdVertCost(divisionName: string): number;\\n   /**\\n    * Get the number of times you have Hired AdVert\\n    * @param divisionName - Name of the division\\n    * @returns Number of times you have Hired AdVert\\n    */\\n   getHireAdVertCount(adivisionName: string): number;\\n   /**\\n    * Get the cost to unlock research\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @returns cost\\n    */\\n   getResearchCost(divisionName: string, researchName: string): number;\\n   /**\\n    * Gets if you have unlocked a research\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @returns true is unlocked, false if not\\n    */\\n   hasResearched(divisionName: string, researchName: string): boolean;\\n   /**\\n    * Set the auto job assignment for a job\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param job - Name of the job\\n    * @param amount - Number of employees to assign to that job\\n    * @returns A promise that is fulfilled when the assignment is complete.\\n    */\\n   setAutoJobAssignment(divisionName: string, cityName: string, job: string, amount: number): Promise<boolean>;\\n   /**\\n    * Cost to Upgrade office size.\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param size - Amount of positions to open\\n    * @returns Cost of upgrading the office\\n    */\\n   getOfficeSizeUpgradeCost(divisionName: string, cityName: string, asize: number): number;\\n }\\n \\n /**\\n  * Corporation Warehouse API\\n  * @remarks\\n  * Requires the Warehouse API upgrade from your corporation.\\n  * @public\\n  */\\n export interface WarehouseAPI {\\n   /**\\n    * Set material sell data.\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param materialName - Name of the material\\n    * @param amt - Amount to sell, can be \\\"MAX\\\"\\n    * @param price - Price to sell, can be \\\"MP\\\"\\n    */\\n   sellMaterial(divisionName: string, cityName: string, materialName: string, amt: string, price: string): void;\\n   /**\\n    * Set product sell data.\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param productName - Name of the product\\n    * @param amt - Amount to sell, can be \\\"MAX\\\"\\n    * @param price - Price to sell, can be \\\"MP\\\"\\n    * @param all - Sell in all city\\n    */\\n   sellProduct(\\n     divisionName: string,\\n     cityName: string,\\n     productName: string,\\n     amt: string,\\n     price: string,\\n     all: boolean,\\n   ): void;\\n   /**\\n    * Discontinue a product.\\n    * @param divisionName - Name of the division\\n    * @param productName - Name of the product\\n    */\\n   discontinueProduct(divisionName: string, productName: string): void;\\n   /**\\n    * Set smart supply\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param enabled - smart supply enabled\\n    */\\n   setSmartSupply(divisionName: string, cityName: string, enabled: boolean): void;\\n   /**\\n    * Set material buy data\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param materialName - Name of the material\\n    * @param amt - Amount of material to buy\\n    */\\n   buyMaterial(divisionName: string, cityName: string, materialName: string, amt: number): void;\\n   /**\\n    * Get warehouse data\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @returns warehouse data\\n    */\\n   getWarehouse(divisionName: string, cityName: string): Warehouse;\\n   /**\\n    * Get product data\\n    * @param divisionName - Name of the division\\n    * @param productName - Name of the product\\n    * @returns product data\\n    */\\n   getProduct(divisionName: string, productName: string): Product;\\n   /**\\n    * Get material data\\n    * @param divisionName - Name of the division\\n    * @param materialName - Name of the material\\n    * @returns material data\\n    */\\n   getMaterial(divisionName: string, cityName: string, materialName: string): Material;\\n   /**\\n    * Set market TA 1 for a material.\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param materialName - Name of the material\\n    * @param on - market ta enabled\\n    */\\n   setMaterialMarketTA1(divisionName: string, cityName: string, materialName: string, on: boolean): void;\\n   /**\\n    * Set market TA 2 for a material.\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param materialName - Name of the material\\n    * @param on - market ta enabled\\n    */\\n   setMaterialMarketTA2(divisionName: string, cityName: string, materialName: string, on: boolean): void;\\n   /**\\n    * Set market TA 1 for a product.\\n    * @param divisionName - Name of the division\\n    * @param productName - Name of the product\\n    * @param on - market ta enabled\\n    */\\n   setProductMarketTA1(divisionName: string, productName: string, on: boolean): void;\\n   /**\\n    * Set market TA 2 for a product.\\n    * @param divisionName - Name of the division\\n    * @param productName - Name of the product\\n    * @param on - market ta enabled\\n    */\\n   setProductMarketTA2(divisionName: string, productName: string, on: boolean): void;\\n   /**\\n    * Set material export data\\n    * @param sourceDivision - Source division\\n    * @param sourceCity - Source city\\n    * @param targetDivision - Target division\\n    * @param targetCity - Target city\\n    * @param materialName - Name of the material\\n    * @param amt - Amount of material to export.\\n    */\\n   exportMaterial(\\n     sourceDivision: string,\\n     sourceCity: string,\\n     targetDivision: string,\\n     targetCity: string,\\n     materialName: string,\\n     amt: number,\\n   ): void;\\n   /**\\n    * Cancel material export\\n    * @param sourceDivision - Source division\\n    * @param sourceCity - Source city\\n    * @param targetDivision - Target division\\n    * @param targetCity - Target city\\n    * @param materialName - Name of the material\\n    * @param amt - Amount of material to export.\\n    */\\n   cancelExportMaterial(\\n     sourceDivision: string,\\n     sourceCity: string,\\n     targetDivision: string,\\n     targetCity: string,\\n     materialName: string,\\n     amt: number,\\n   ): void;\\n   /**\\n    * Purchase warehouse for a new city\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    */\\n   purchaseWarehouse(divisionName: string, cityName: string): void;\\n   /**\\n    * Upgrade warehouse\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    */\\n   upgradeWarehouse(divisionName: string, cityName: string): void;\\n   /**\\n    * Create a new product\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    * @param productName - Name of the product\\n    * @param designInvest - Amount to invest for the design of the product.\\n    * @param marketingInvest - Amount to invest for the marketing of the product.\\n    */\\n   makeProduct(\\n     divisionName: string,\\n     cityName: string,\\n     productName: string,\\n     designInvest: number,\\n     marketingInvest: number,\\n   ): void;\\n   /**\\n    * Gets the cost to purchase a warehouse\\n    * @returns cost\\n    */\\n   getPurchaseWarehouseCost(): number;\\n   /**\\n    * Gets the cost to upgrade a warehouse to the next level\\n    * @returns cost to upgrade\\n    */\\n   getUpgradeWarehouseCost(adivisionName: any, acityName: any): number;\\n   /**\\n    * Check if you have a warehouse in city\\n    * @returns true if warehouse is present, false if not\\n    */\\n   hasWarehouse(adivisionName: any, acityName: any): boolean;\\n }\\n \\n /**\\n  * Corporation API\\n  * @public\\n  */\\n export interface Corporation extends WarehouseAPI, OfficeAPI {\\n   /**\\n    * Create a Corporation\\n    * @param divisionName - Name of the division\\n    * @param selfFund - If you should self fund, defaults to true, false will only work on Bitnode 3\\n    * @returns true if created and false if not\\n    */\\n   createCorporation(corporationName: string, selfFund: boolean): boolean;\\n   /**\\n    * Check if you have a one time unlockable upgrade\\n    * @param upgradeName - Name of the upgrade\\n    * @returns true if unlocked and false if not\\n    */\\n   hasUnlockUpgrade(upgradeName: string): boolean;\\n   /**\\n    * Gets the cost to unlock a one time unlockable upgrade\\n    * @param upgradeName - Name of the upgrade\\n    * @returns cost of the upgrade\\n    */\\n   getUnlockUpgradeCost(upgradeName: string): number;\\n   /**\\n    * Get the level of a levelable upgrade\\n    * @param upgradeName - Name of the upgrade\\n    * @returns the level of the upgrade\\n    */\\n   getUpgradeLevel(upgradeName: string): number;\\n   /**\\n    * Gets the cost to unlock the next level of a levelable upgrade\\n    * @param upgradeName - Name of the upgrade\\n    * @returns cost of the upgrade\\n    */\\n   getUpgradeLevelCost(upgradeName: string): number;\\n   /**\\n    * Gets the cost to expand into a new industry\\n    * @param industryName - Name of the industry\\n    * @returns cost\\n    */\\n   getExpandIndustryCost(industryName: string): number;\\n   /**\\n    * Gets the cost to expand into a new city\\n    * @returns cost\\n    */\\n   getExpandCityCost(): number;\\n   /**\\n    * Get an offer for investment based on you companies current valuation\\n    * @returns An offer of investment\\n    */\\n   getInvestmentOffer(): InvestmentOffer;\\n   /**\\n    * Accept investment based on you companies current valuation\\n    * @remarks\\n    * Is based on current valuation and will not honer a specific Offer\\n    * @returns An offer of investment\\n    */\\n   acceptInvestmentOffer(): boolean;\\n   /**\\n    * Go public\\n    * @param numShares - number of shares you would like to issue for your IPO\\n    * @returns true if you successfully go public, false if not\\n    */\\n   goPublic(numShares: number): boolean;\\n   /**\\n    * Bribe a faction\\n    * @param factionName - Faction name\\n    * @param amountCash - Amount of money to bribe\\n    * @param amountShares - Amount of shares to bribe\\n    * @returns True if successful, false if not\\n    */\\n   bribe(factionName: string, amountCash: number, amountShares: number): boolean;\\n   /**\\n    * Get corporation data\\n    * @returns Corporation data\\n    */\\n   getCorporation(): CorporationInfo;\\n   /**\\n    * Get division data\\n    * @param divisionName - Name of the division\\n    * @returns Division data\\n    */\\n   getDivision(divisionName: string): Division;\\n   /**\\n    * Expand to a new industry\\n    * @param industryType - Name of the industry\\n    * @param divisionName - Name of the division\\n    */\\n   expandIndustry(industryType: string, divisionName: string): void;\\n   /**\\n    * Expand to a new city\\n    * @param divisionName - Name of the division\\n    * @param cityName - Name of the city\\n    */\\n   expandCity(divisionName: string, cityName: string): void;\\n   /**\\n    * Unlock an upgrade\\n    * @param upgradeName - Name of the upgrade\\n    */\\n   unlockUpgrade(upgradeName: string): void;\\n   /**\\n    * Level an upgrade.\\n    * @param upgradeName - Name of the upgrade\\n    */\\n   levelUpgrade(upgradeName: string): void;\\n   /**\\n    * Issue dividends\\n    * @param percent - Percent of profit to issue as dividends.\\n    */\\n   issueDividends(percent: number): void;\\n }\\n \\n /**\\n  * General info about a corporation\\n  * @public\\n  */\\n interface CorporationInfo {\\n   /** Name of the corporation */\\n   name: string;\\n   /** Funds available */\\n   funds: number;\\n   /** Revenue per second this cycle */\\n   revenue: number;\\n   /** Expenses per second this cycle */\\n   expenses: number;\\n   /** Indicating if the company is public */\\n   public: boolean;\\n   /** Total number of shares issues by this corporation */\\n   totalShares: number;\\n   /** Amount of share owned */\\n   numShares: number;\\n   /** Cooldown until shares can be sold again */\\n   shareSaleCooldown: number;\\n   /** Amount of shares issued */\\n   issuedShares: number;\\n   /** Price of the shares */\\n   sharePrice: number;\\n   /** State of the corporation. Possible states are START, PURCHASE, PRODUCTION, SALE, EXPORT. */\\n   state: string;\\n   /** Array of all divisions */\\n   divisions: Division[];\\n }\\n \\n /**\\n  * Employee in an office\\n  * @public\\n  */\\n interface Employee {\\n   /** Name of the employee */\\n   name: string;\\n   /** Morale */\\n   mor: number;\\n   /** Happiness */\\n   hap: number;\\n   /** Energy */\\n   ene: number;\\n   int: number;\\n   cha: number;\\n   exp: number;\\n   cre: number;\\n   eff: number;\\n   /** Salary */\\n   sal: number;\\n   /** City */\\n   loc: string;\\n   /** Current job */\\n   pos: string;\\n }\\n \\n /**\\n  * Product in a warehouse\\n  * @public\\n  */\\n interface Product {\\n   /** Name of the product */\\n   name: string;\\n   /** Demand for the product */\\n   dmd: number;\\n   /** Competition for the product */\\n   cmp: number;\\n   /** Production cost */\\n   pCost: number;\\n   /** Sell cost, can be \\\"MP+5\\\" */\\n   sCost: string | number;\\n   /** Data refers to the production, sale, and quantity of the products\\n    * These values are specific to a city\\n    * For each city, the data is [qty, prod, sell] */\\n   cityData: { [key: string]: number[] };\\n   /** Creation progress - A number between 0-100 representing percentage */\\n   developmentProgress: number;\\n }\\n \\n /**\\n  * Material in a warehouse\\n  * @public\\n  */\\n interface Material {\\n   /** Name of the material */\\n   name: string;\\n   /** Amount of material  */\\n   qty: number;\\n   /** Quality of the material */\\n   qlt: number;\\n   /** Amount of material produced  */\\n   prod: number;\\n   /** Amount of material sold  */\\n   sell: number;\\n }\\n \\n /**\\n  * Warehouse for a division in a city\\n  * @public\\n  */\\n interface Warehouse {\\n   /** Amount of size upgrade bought */\\n   level: number;\\n   /** City in which the warehouse is located */\\n   loc: string;\\n   /** Total space in the warehouse */\\n   size: number;\\n   /** Used space in the warehouse */\\n   sizeUsed: number;\\n   /** Smart Supply status in the warehouse */\\n   smartSupplyEnabled: boolean;\\n }\\n \\n /**\\n  * Office for a division in a city.\\n  * @public\\n  */\\n interface Office {\\n   /** City of the office */\\n   loc: string;\\n   /** Maximum number of employee */\\n   size: number;\\n   /** Minimum amount of energy of the employees */\\n   minEne: number;\\n   /** Maximum amount of energy of the employees */\\n   maxEne: number;\\n   /** Minimum happiness of the employees */\\n   minHap: number;\\n   /** Maximum happiness of the employees */\\n   maxHap: number;\\n   /** Maximum morale of the employees */\\n   maxMor: number;\\n   /** Name of all the employees */\\n   employees: string[];\\n   /** Positions of the employees */\\n   employeeProd: EmployeeJobs;\\n }\\n \\n /**\\n  * Object representing the number of employee in each job.\\n  * @public\\n  */\\n interface EmployeeJobs {\\n   Operations: number;\\n   Engineer: number;\\n   Business: number;\\n   Management: number;\\n   \\\"Research & Development\\\": number;\\n   Training: number;\\n   Unassigned: number;\\n }\\n \\n /**\\n  * Corporation division\\n  * @public\\n  */\\n interface Division {\\n   /** Name of the division */\\n   name: string;\\n   /** Type of division, like Aggriculture */\\n   type: string;\\n   /** Awareness of the division */\\n   awareness: number;\\n   /** Popularity of the division */\\n   popularity: number;\\n   /** Production multiplier */\\n   prodMult: number;\\n   /** Amount of research in that division */\\n   research: number;\\n   /** Revenue last cycle */\\n   lastCycleRevenue: number;\\n   /** Expenses last cycle */\\n   lastCycleExpenses: number;\\n   /** Revenue this cycle */\\n   thisCycleRevenue: number;\\n   /** Expenses this cycle */\\n   thisCycleExpenses: number;\\n   /** All research bought */\\n   upgrades: number[];\\n   /** Cities in which this division has expanded */\\n   cities: string[];\\n   /** Products developed by this division */\\n   products: string[];\\n }\\n \\n /**\\n  * Corporation investment offer\\n  * @public\\n  */\\n interface InvestmentOffer {\\n   /** Amount of funds you will get from this investment */\\n   funds: number;\\n   /** Amount of share you will give in exchange for this investment */\\n   shares: number;\\n   /** Current round of funding (max 4) */\\n   round: number;\\n }\\n \\n /**\\n  * Interface Theme\\n  * @internal\\n  */\\n interface UserInterfaceTheme {\\n   [key: string]: string | undefined;\\n   primarylight: string;\\n   primary: string;\\n   primarydark: string;\\n   successlight: string;\\n   success: string;\\n   successdark: string;\\n   errorlight: string;\\n   error: string;\\n   errordark: string;\\n   secondarylight: string;\\n   secondary: string;\\n   secondarydark: string;\\n   warninglight: string;\\n   warning: string;\\n   warningdark: string;\\n   infolight: string;\\n   info: string;\\n   infodark: string;\\n   welllight: string;\\n   well: string;\\n   white: string;\\n   black: string;\\n   hp: string;\\n   money: string;\\n   hack: string;\\n   combat: string;\\n   cha: string;\\n   int: string;\\n   rep: string;\\n   disabled: string;\\n   backgroundprimary: string;\\n   backgroundsecondary: string;\\n   button: string;\\n }\\n \\n /**\\n  * Interface Styles\\n  * @internal\\n  */\\n interface IStyleSettings {\\n   fontFamily: string;\\n   lineHeight: number;\\n }\\n \\n /**\\n  * Game Information\\n  * @internal\\n  */\\n interface GameInfo {\\n   version: string;\\n   commit: string;\\n   platform: string;\\n }\",\"filename\":\"index.d.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":68,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"server-addToArray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":69,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet i = 0;\\n\\n\\twhile (\\\"asdf\\\") {\\n\\t\\tif (!ns.serverExists(\\\"ps\\\" + i)) {break;}\\n\\n\\t\\tlet hostname = \\\"ps\\\" + i;\\n\\t\\tns.killall(hostname);\\n\\t\\tawait ns.scp(\\\"farm.js\\\", hostname);\\n\\t\\tns.exec(\\\"farm.js\\\", hostname, 3);\\n\\t\\t++i;\\n\\t}\\t\\n}\",\"filename\":\"/Saves/server-updater-old.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":70,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"ps0\",\"ps1\",\"ps2\",\"ps3\",\"ps4\",\"ps5\",\"ps6\",\"ps7\",\"ps8\",\"ps9\",\"ps10\",\"ps11\",\"ps12\",\"ps13\",\"ps14\",\"ps15\",\"ps16\",\"ps17\",\"ps18\",\"ps19\",\"ps20\",\"ps21\",\"ps22\",\"ps23\",\"ps24\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"hacknet-lord-cfg.json.txt\",\"text\":\"{\\n\\t\\\"pillow\\\": 2000000\\n}\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-634418.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[172,77,144,95,133,18,116,44,193,68,73,99,5,15,182,109,177],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"49.7.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":67295005831,\"moneyMax\":1682375145775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1326,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"79.3.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52998685361,\"moneyMax\":1324967134025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1116,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"36.8.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":22380954925,\"moneyMax\":559523873125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":997,\"serverGrowth\":68}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12475.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,28],[3,4],[12,19],[5,15],[15,24]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"95.6.1.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":13654148382,\"moneyMax\":341353709550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1041,\"serverGrowth\":66}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"52.8.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":25291398777,\"moneyMax\":632284969425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1298,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-303809-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[53,51,145,76,139,13,62,20,163,55,85,173,10,36,78,2,126,44,40,101,97,166,166,96,54,177,155,106,82,35,163,57,157,24,83,96,74,7,96,20,163,61,188,174]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"23.0.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":16770342358,\"moneyMax\":419258558950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1101,\"serverGrowth\":59}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"28.8.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":15267271822,\"moneyMax\":381681795550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":972,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"3.1.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":15834618110,\"moneyMax\":395865452750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":980,\"serverGrowth\":97}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"43.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":27816244237,\"moneyMax\":695406105925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1218,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"81.9.5.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1472044167,\"moneyMax\":36801104175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1080,\"serverGrowth\":85}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"63.8.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1236,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"14.8.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1072581300,\"moneyMax\":26814532500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":899,\"serverGrowth\":76}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-146403-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[32,11,20,34,173,191],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"95.3.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":917301366,\"moneyMax\":22932534150,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":902,\"serverGrowth\":50}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"50.3.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":735337680,\"moneyMax\":18383442000,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":935,\"serverGrowth\":50}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"64.6.3.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":660552224,\"moneyMax\":16513805600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"47.5.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":769666156,\"moneyMax\":19241653900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":874,\"serverGrowth\":66}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-304422.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[5,6],[2,7,1],[6,1,9,7]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"15.6.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":953817580,\"moneyMax\":23845439500,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":883,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-553092.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":821123547,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-848262.cct\",\"type\":\"Total Ways to Sum\",\"data\":66,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"30.6.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1178599526,\"moneyMax\":29464988150,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":867,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-780751.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[19,1,3,41,40,30,13],[9,25,15,46,6,49,22],[15,39,1,14,20,41,29],[1,23,28,34,1,7,41]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"42.1.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":788754617,\"moneyMax\":19718865425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"78.0.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":558808105,\"moneyMax\":13970202625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":827,\"serverGrowth\":83}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"66.9.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":852303487,\"moneyMax\":21307587175,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":853,\"serverGrowth\":71}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-966709.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"714418380\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"5.5.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":782167212,\"moneyMax\":19554180300,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":875,\"serverGrowth\":71}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"0.7.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1146023878,\"moneyMax\":28650596950,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":863,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"97.3.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":955912940,\"moneyMax\":23897823500,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":857,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"86.5.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":910610916,\"moneyMax\":22765272900,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":780,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"87.8.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":876516655,\"moneyMax\":21912916375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"82.4.0.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":880341692,\"moneyMax\":22008542300,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":783,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"34.5.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1566214287,\"moneyMax\":39155357175,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":849,\"serverGrowth\":50}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"8.2.7.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1688589464,\"moneyMax\":42214736600,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":751,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"15.0.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":1124579036,\"moneyMax\":28114475900,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":821,\"serverGrowth\":73}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424135.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[9,5,38,16,9,11,14,4,21,16,31,33,25,5,38],[28,10,45,50,22,45,43,17,44,30,8,37,33,5,9],[1,11,39,4,5,40,37,10,50,3,14,10,26,32,27],[35,22,39,17,13,28,9,38,10,5,13,22,49,27,14],[47,39,16,2,38,30,15,30,11,45,10,15,17,40,42],[15,34,28,9,43,37,27,2,29,21,30,7,1,31,6],[19,32,22,3,11,39,49,36,22,14,18,17,17,34,15],[4,8,23,41,36,19,13,14,43,49,42,17,48,17,24],[39,16,47,33,22,39,10,25,34,27,28,5,14,10,40],[20,6,25,1,9,46,44,6,22,49,18,31,25,30,37],[48,50,33,19,23,48,4,14,24,39,47,50,37,15,37],[1,43,4,20,28,1,11,22,42,4,26,19,22,25,24]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"31.2.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1494670886,\"moneyMax\":37366772150,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":818,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"45.0.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1017036694,\"moneyMax\":25425917350,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":799,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"91.5.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":730620616,\"moneyMax\":18265515400,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":736,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"73.5.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[13024180,52,156,26],\"joesguns\":[444562092,2418,13494,1144]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4258.158912939416,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.32,\"onlineExpGained\":141089.55879991935,\"onlineMoneyMade\":457586272,\"onlineRunningTime\":22484.610000039494,\"pid\":2,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"threads\":26,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///b9a9e11c-e181-451f-84ad-e021acc9297c\",\"moduleSequenceNumber\":124}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///fcb84b90-875d-4946-b82d-64d83aadf991\",\"moduleSequenceNumber\":124}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":673035562,\"moneyMax\":16825889050,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":504,\"serverGrowth\":42}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-187757.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,0,0,4,10,7,7,7,6,8,2,9,0,5,0,0],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"48.0.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":744931216,\"moneyMax\":18623280400,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":599,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-370205.cct\",\"type\":\"Total Ways to Sum\",\"data\":23,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"62.3.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":382672885,\"moneyMax\":9566822125,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":410,\"serverGrowth\":46}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"84.3.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[0,0,364,52],\"sigma-cosmetics\":[273334282,1586,17316,1378]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7570.060525143114,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.321,\"onlineExpGained\":133872.194542633,\"onlineMoneyMade\":273334282,\"onlineRunningTime\":22484.610000039494,\"pid\":3,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":26,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///1be22a38-fcb3-4653-af76-043931e79e3d\",\"moduleSequenceNumber\":125}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///97f62104-55ee-4b2c-8ade-80ae7d4fb2dc\",\"moduleSequenceNumber\":125}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":201417941,\"moneyMax\":5035448525,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":376,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"60.1.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1015168705,\"moneyMax\":25379217625,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":754,\"serverGrowth\":75}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"64.3.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[3477461,13,78,13],\"sigma-cosmetics\":[135539131,806,8658,689]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1951.6562898463521,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.322,\"onlineExpGained\":66198.52695600843,\"onlineMoneyMade\":139016592,\"onlineRunningTime\":22484.610000039494,\"pid\":4,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///35c984c4-e6d0-4305-a9a5-64f1861af61d\",\"moduleSequenceNumber\":126}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///bb8c8e68-b107-4510-9432-5d64ba80987c\",\"moduleSequenceNumber\":126}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":221493968,\"moneyMax\":5537349200,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":433,\"serverGrowth\":50}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-723523-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[82,161,80,37,148,159,136,17,139,194,47,20,20,70,92,35,61,45,123,31,35,174],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"98.5.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":530130703,\"moneyMax\":13253267575,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":586,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-401026.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":957724950,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"23.8.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,273,13],\"joesguns\":[203039564,1157,6747,572]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4108.112506401989,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.322999999997,\"onlineExpGained\":71086.85633106477,\"onlineMoneyMade\":203039564,\"onlineRunningTime\":22484.610000039494,\"pid\":5,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///0c935aa5-dd1c-47e9-8d02-d9e4262bf966\",\"moduleSequenceNumber\":127}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///8344606c-672e-4025-b2ba-57feb70b1c74\",\"moduleSequenceNumber\":127}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":399221683,\"moneyMax\":9980542075,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":408,\"serverGrowth\":39}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"56.8.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,546,26],\"harakiri-sushi\":[683874386,2600,7098,702]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8216.225523948995,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.324999999997,\"onlineExpGained\":89245.2600744023,\"onlineMoneyMade\":683874386,\"onlineRunningTime\":22484.610000039494,\"pid\":6,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":26,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///8ad3c911-dc49-459f-9ed8-537ef766103e\",\"moduleSequenceNumber\":128}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///236ebeb8-8584-4785-abcd-c0e592210c0f\",\"moduleSequenceNumber\":128}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":174508632,\"moneyMax\":4362715800,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":324,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424415-Sector-12.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,10],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"6.1.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":76,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":235288344,\"moneyMax\":5882208600,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":371,\"serverGrowth\":51}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"94.9.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,273,13],\"sigma-cosmetics\":[131263158,793,8645,689]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4108.112889760752,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.325999999997,\"onlineExpGained\":67059.90296925123,\"onlineMoneyMade\":131263158,\"onlineRunningTime\":22484.610000039494,\"pid\":7,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///28995846-c943-4af8-addb-ebf1f73352c8\",\"moduleSequenceNumber\":129}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///f67f6589-0628-4060-ba3f-b801b8d446ff\",\"moduleSequenceNumber\":129}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":382,\"serverGrowth\":57}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"38.7.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":78,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":82049938,\"moneyMax\":2051248450,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":292,\"serverGrowth\":60}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"91.0.8.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[0,0,14,2],\"hong-fang-tea\":[11891863,61,313,26]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":291.1562283838982,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.326999999997,\"onlineExpGained\":3409.1515045533997,\"onlineMoneyMade\":11891863,\"onlineRunningTime\":22484.610000039494,\"pid\":8,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///f910df51-2bfa-4721-afc4-ec5eea8fbec6\",\"moduleSequenceNumber\":130}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///f84ba191-5984-4cf6-ae56-aacc6af868a8\",\"moduleSequenceNumber\":130}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":2.0580000000000003,\"minDifficulty\":1,\"moneyAvailable\":1448489,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"46.9.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[1015962,6,102,12],\"harakiri-sushi\":[177754674,714,1608,162]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1723.6838372027682,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.327999999998,\"onlineExpGained\":21165.855791408892,\"onlineMoneyMade\":178770636,\"onlineRunningTime\":22484.610000039494,\"pid\":9,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///cd33fccb-e8e7-4f46-af56-db156d2793ac\",\"moduleSequenceNumber\":131}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///2ec2ab96-26e0-4caa-9449-5ae2f67ae0e3\",\"moduleSequenceNumber\":131}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":6.675999999999121,\"minDifficulty\":3,\"moneyAvailable\":36367892.47321509,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"11.2.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[87847452,102,570,84]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":579.0908229125441,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.329999999998,\"onlineExpGained\":10176.014469734997,\"onlineMoneyMade\":87847452,\"onlineRunningTime\":22484.610000039494,\"pid\":10,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///5f87027c-87ed-46f0-b2f0-5a666daf6b0e\",\"moduleSequenceNumber\":132}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///b6069e80-8927-4c17-99d3-8bf603d2c2bf\",\"moduleSequenceNumber\":132}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":7.813999999997637,\"minDifficulty\":3,\"moneyAvailable\":39122266.52373465,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"24.6.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[28131792,198,4656,360]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1896.0525158144017,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.333,\"onlineExpGained\":33566.14269656054,\"onlineMoneyMade\":28131792,\"onlineRunningTime\":22484.610000039494,\"pid\":11,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///3babaae3-4eb2-43e8-a595-5625b1fb8a9f\",\"moduleSequenceNumber\":133}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///f4686d92-6c4b-4f83-90ce-874d0f640c11\",\"moduleSequenceNumber\":133}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.517999999999488,\"minDifficulty\":5,\"moneyAvailable\":44794375.0804974,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"57.9.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[2603770,13,104,13],\"iron-gym\":[160635540,195,1274,143]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2365.644870716448,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.334,\"onlineExpGained\":22718.577125331718,\"onlineMoneyMade\":163239310,\"onlineRunningTime\":22484.610000039494,\"pid\":12,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///9031cb9a-1d9b-4438-baa6-1d77719b41e5\",\"moduleSequenceNumber\":134}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///6a917f32-0a30-4750-9dfe-b32f8d93459a\",\"moduleSequenceNumber\":134}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"21.6.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[5828682,6,18,0],\"harakiri-sushi\":[183423570,738,1590,174]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":712.7273440213222,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.338,\"onlineExpGained\":20810.83599441889,\"onlineMoneyMade\":189252252,\"onlineRunningTime\":22484.610000039494,\"pid\":13,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///89911416-85fa-4e2e-b7dc-3f6ab43e335f\",\"moduleSequenceNumber\":135}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///e2b26eac-31c8-431f-92c6-25e4ddc3284d\",\"moduleSequenceNumber\":135}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"6.7.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[12433408,13,39,0],\"harakiri-sushi\":[373775103,1482,3510,351]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1544.2426747827183,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.34,\"onlineExpGained\":44533.83959734614,\"onlineMoneyMade\":386208511,\"onlineRunningTime\":22484.610000039494,\"pid\":14,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///79fecbef-3bf9-46c0-a14b-dfdadda04db3\",\"moduleSequenceNumber\":136}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///3af38cf1-8b81-4785-b63f-0a5441e7b4dc\",\"moduleSequenceNumber\":136}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"90.9.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[8345870,52,416,52],\"foodnstuff\":[147994522,962,19604,1534]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7469.299648281037,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.340999999997,\"onlineExpGained\":145578.74788647462,\"onlineMoneyMade\":156340392,\"onlineRunningTime\":22484.610000039494,\"pid\":15,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":26,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///8647f674-3210-4dca-8e31-6a61742beb5a\",\"moduleSequenceNumber\":137}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///a9f1b7f9-5f1e-4f8c-ae97-a99e3186cfd3\",\"moduleSequenceNumber\":137}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"58.8.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[54761160,342,4092,342]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1723.684587835312,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.341999999997,\"onlineExpGained\":30738.402670657073,\"onlineMoneyMade\":54761160,\"onlineRunningTime\":22484.610000039494,\"pid\":16,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///49613453-3c84-431f-9cf6-635e8184bea3\",\"moduleSequenceNumber\":138}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///ce344c4d-965e-483a-bdea-87844f602e02\",\"moduleSequenceNumber\":138}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":9.717999999999984,\"minDifficulty\":5,\"moneyAvailable\":55196989.82376805,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408746.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,10,-8,-3,6,-6,-1,-5,-1,5,9,-4,1,0,2,8,-1,-1,-6,-1,-7,-10,0,-2,-9,0,5,8,1,8,-9,-1,8,5,5,10,-10,6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"35.5.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[5460402,6,12,0],\"joesguns\":[94686606,558,3108,264]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":579.0910570828117,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.342999999997,\"onlineExpGained\":32366.137621310812,\"onlineMoneyMade\":100147008,\"onlineRunningTime\":22484.610000039494,\"pid\":17,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///671e7736-1546-4f1f-9dde-846342a50a0c\",\"moduleSequenceNumber\":139}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///a0821f6e-26db-46e5-a6b4-145faa0683db\",\"moduleSequenceNumber\":139}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.237999999999982,\"minDifficulty\":5,\"moneyAvailable\":74404579.37770405,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"87.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[2615873,13,104,13],\"harakiri-sushi\":[366610972,1456,3510,351]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2365.6456065696984,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.343999999997,\"onlineExpGained\":44716.33031435702,\"onlineMoneyMade\":369226845,\"onlineRunningTime\":22484.610000039494,\"pid\":18,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///3ef732ae-478f-4efb-9980-f9c8e9c1a4f6\",\"moduleSequenceNumber\":140}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///801bc7a8-70de-4ab5-9084-bd9223e3ebf9\",\"moduleSequenceNumber\":140}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"74.0.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[2243852,13,221,26],\"hong-fang-tea\":[153908040,754,4095,325]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3734.6502888178074,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.344999999998,\"onlineExpGained\":44110.96689200178,\"onlineMoneyMade\":156151892,\"onlineRunningTime\":22484.610000039494,\"pid\":19,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///96751e87-e18f-4fea-a40b-cdd73a12f8be\",\"moduleSequenceNumber\":141}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///6dbdf506-8360-4609-af47-40f95148a0bc\",\"moduleSequenceNumber\":141}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"58.9.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[2363387,13,169,26],\"harakiri-sushi\":[347349574,1365,3549,351]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3785.033323721078,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.346999999998,\"onlineExpGained\":44875.274616422255,\"onlineMoneyMade\":349712961,\"onlineRunningTime\":22484.610000039494,\"pid\":20,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///9f31a42b-6b95-4a3a-a9b1-e7c3bac05a94\",\"moduleSequenceNumber\":142}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///ef391abe-d974-4a04-90e1-6ed8a35f2ded\",\"moduleSequenceNumber\":142}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":66303701,\"moneyMax\":1657592525,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":190,\"serverGrowth\":40}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"43.2.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":92,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":42948431,\"moneyMax\":1073710775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":243,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"18.1.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[13455338,52,78,13],\"hong-fang-tea\":[168210185,832,4095,325]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2602.2104910020985,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.347999999998,\"onlineExpGained\":44080.55310609602,\"onlineMoneyMade\":181665523,\"onlineRunningTime\":22484.610000039494,\"pid\":21,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///7cbf9a81-88fc-4f37-a769-875309606757\",\"moduleSequenceNumber\":143}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///ae531c6d-7799-4411-9fb6-02ca0434f0ff\",\"moduleSequenceNumber\":143}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":13.604000000000005,\"minDifficulty\":10,\"moneyAvailable\":275820158.9420742,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"92.5.7.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":254.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[59508188,318,1378,212],\"iron-gym\":[2021745420,2014,10176,1166]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":34720.403994915265,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.349,\"onlineExpGained\":196385.85165090143,\"onlineMoneyMade\":2081253608,\"onlineRunningTime\":22484.610000039494,\"pid\":22,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"threads\":106,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///954de9c6-d8ab-4307-a507-85dffb1e86c0\",\"moduleSequenceNumber\":144}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///14274fc5-2642-4ea3-9e54-061fa69b6f04\",\"moduleSequenceNumber\":144}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":502,\"serverGrowth\":29}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-456168.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[84,196,119,82,70,149,84,114,93,108,164,108,4,125,197,15,151,54,82,167,111,72,10,31,44,19,102,193,161,17,30,48,76,185,176,153],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-19728.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0],[1,0,0,1,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,1],[0,0,0,0,0],[0,0,0,0,0],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,1],[0,0,0,0,1],[0,1,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"86.5.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1086,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"17.3.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":778,\"serverGrowth\":56}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"47.6.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":548,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"55.1.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,273,13],\"harakiri-sushi\":[353433041,1391,3536,351]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4108.115956630861,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.35,\"onlineExpGained\":45205.425811440386,\"onlineMoneyMade\":353433041,\"onlineRunningTime\":22484.610000039494,\"pid\":23,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///9abc5c11-4605-469a-82bf-df95fc0d743c\",\"moduleSequenceNumber\":145}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///4d87e6d7-3bc2-4cb7-a0cb-81ef5ce34ed2\",\"moduleSequenceNumber\":145}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":347,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"90.2.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[4066413,26,208,26],\"harakiri-sushi\":[311252929,1235,3575,351]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3734.6512181723856,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.353,\"onlineExpGained\":44110.96689200179,\"onlineMoneyMade\":315319342,\"onlineRunningTime\":22484.610000039494,\"pid\":24,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":13,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///2d2db814-b8af-43dc-93fc-fa449326f96f\",\"moduleSequenceNumber\":146}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///2fc4b546-7fdd-4de0-a8f1-8a4e1947a197\",\"moduleSequenceNumber\":146}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":205,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-245296.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[105,76,5,96,10,67,75,166,41,179,186,59,75,87,71,98,8,30,108,124,148,149,3,189,62,143,168,38,36,186,121,52,165,43,72,28,162,163,44,147,11,104,88,112,130,75,30,153,129],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"31.2.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"25.9.9.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[73807542,300,834,93]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":450.3826830477289,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.355,\"onlineExpGained\":10044.057242046321,\"onlineMoneyMade\":73807542,\"onlineRunningTime\":22484.610000039494,\"pid\":25,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///44aca5a7-2038-4a19-8ce6-354ccc694b2e\",\"moduleSequenceNumber\":147}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///28db4b42-934c-47cc-94d6-f4725684f36b\",\"moduleSequenceNumber\":147}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"34.6.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"70.1.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"ps0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps0\",\"httpPortOpen\":false,\"ip\":\"22.2.4.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[43720272,54,297,33]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":356.3638715403566,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.356,\"onlineExpGained\":5197.7485673842475,\"onlineMoneyMade\":43720272,\"onlineRunningTime\":22484.610000039494,\"pid\":26,\"ramUsage\":2.4,\"server\":\"ps0\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///583eed6d-31d0-4617-b598-cb117fc1f07a\",\"moduleSequenceNumber\":148}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///b15c5550-e2e0-4269-8965-2de8ccea5898\",\"moduleSequenceNumber\":148}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps0\",\"moduleSequenceNumber\":148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps1\",\"httpPortOpen\":false,\"ip\":\"87.5.9.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[2667201,3,6,0],\"foodnstuff\":[11727807,84,2256,189]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":289.54567264618595,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.358999999997,\"onlineExpGained\":16406.088683246748,\"onlineMoneyMade\":14395008,\"onlineRunningTime\":22484.610000039494,\"pid\":27,\"ramUsage\":2.4,\"server\":\"ps1\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///25d7781e-ee7e-4701-aa61-d55a690da499\",\"moduleSequenceNumber\":149}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///8844b7a9-8e25-4e17-b204-c741695b1b2a\",\"moduleSequenceNumber\":149}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps1\",\"moduleSequenceNumber\":149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps2\",\"httpPortOpen\":false,\"ip\":\"55.0.2.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[0,0,42,6],\"hong-fang-tea\":[37379673,192,945,75]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":873.4695817605776,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.359999999997,\"onlineExpGained\":10294.700179918445,\"onlineMoneyMade\":37379673,\"onlineRunningTime\":22484.610000039494,\"pid\":28,\"ramUsage\":2.4,\"server\":\"ps2\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///954692ac-a2db-447d-8c28-530f285a4e22\",\"moduleSequenceNumber\":150}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///d8435201-501a-441b-8b7a-630d91da5b7b\",\"moduleSequenceNumber\":150}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps2\",\"moduleSequenceNumber\":150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps3\",\"httpPortOpen\":false,\"ip\":\"39.5.6.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[2646582,3,6,0],\"sigma-cosmetics\":[27172695,174,1986,168]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":289.5456906592834,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.360999999997,\"onlineExpGained\":15132.158023112794,\"onlineMoneyMade\":29819277,\"onlineRunningTime\":22484.610000039494,\"pid\":29,\"ramUsage\":2.4,\"server\":\"ps3\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///482a42c6-4792-4231-a075-63345acea9a4\",\"moduleSequenceNumber\":151}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///457d1a38-9d5c-4d6f-b313-72358648907c\",\"moduleSequenceNumber\":151}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps3\",\"moduleSequenceNumber\":151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps4\",\"httpPortOpen\":false,\"ip\":\"69.8.7.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[2199417,9,18,3],\"sigma-cosmetics\":[29391747,189,1983,168]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":559.5664856268892,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.361999999997,\"onlineExpGained\":15315.838092941412,\"onlineMoneyMade\":31591164,\"onlineRunningTime\":22484.610000039494,\"pid\":30,\"ramUsage\":2.4,\"server\":\"ps4\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///7f7669f2-5916-4ac0-840d-71a4bf2785f0\",\"moduleSequenceNumber\":152}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///f7903705-397e-43a4-bce8-61213b943603\",\"moduleSequenceNumber\":152}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps4\",\"moduleSequenceNumber\":152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps5\",\"httpPortOpen\":false,\"ip\":\"19.8.4.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[949506,6,48,6],\"iron-gym\":[43124373,51,288,39]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":861.8428568920639,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.362999999998,\"onlineExpGained\":5434.140889750495,\"onlineMoneyMade\":44073879,\"onlineRunningTime\":22484.610000039494,\"pid\":31,\"ramUsage\":2.4,\"server\":\"ps5\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///3de6b23a-d0e8-40ea-8b9a-844421baed33\",\"moduleSequenceNumber\":153}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///ba7e7093-9c0c-43f7-a09d-53a8aabc22e7\",\"moduleSequenceNumber\":153}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps5\",\"moduleSequenceNumber\":153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps6\",\"httpPortOpen\":false,\"ip\":\"45.6.9.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[0,0,27,0],\"sigma-cosmetics\":[25910229,168,1983,174]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":491.3267008727488,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.363999999998,\"onlineExpGained\":15188.761982510792,\"onlineMoneyMade\":25910229,\"onlineRunningTime\":22484.610000039494,\"pid\":32,\"ramUsage\":2.4,\"server\":\"ps6\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///18eadd0c-a981-4704-ad5e-c84b89660e18\",\"moduleSequenceNumber\":154}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///d3d4f3a7-9ffe-4bf6-9fb7-04da54c4c87b\",\"moduleSequenceNumber\":154}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps6\",\"moduleSequenceNumber\":154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps7\",\"httpPortOpen\":false,\"ip\":\"93.7.4.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[0,0,42,6],\"iron-gym\":[39021240,48,291,33]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":873.4697176104085,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.364999999998,\"onlineExpGained\":5419.395838997995,\"onlineMoneyMade\":39021240,\"onlineRunningTime\":22484.610000039494,\"pid\":33,\"ramUsage\":2.4,\"server\":\"ps7\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///3a7205ae-3893-4aa5-a7ea-53c1e7e23cbe\",\"moduleSequenceNumber\":155}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///f958294c-85d7-4461-bec5-07de2d701959\",\"moduleSequenceNumber\":155}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps7\",\"moduleSequenceNumber\":155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps8\",\"httpPortOpen\":false,\"ip\":\"89.6.1.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[2176854,9,18,3],\"iron-gym\":[29929896,36,294,33]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":545.9186244501918,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.368,\"onlineExpGained\":5162.936689190247,\"onlineMoneyMade\":32106750,\"onlineRunningTime\":22484.610000039494,\"pid\":34,\"ramUsage\":2.4,\"server\":\"ps8\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///69cc6ab4-61b6-409f-96c7-cfd21a32c553\",\"moduleSequenceNumber\":156}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///070bd5f7-515e-452b-8c4b-2e8acb2566c3\",\"moduleSequenceNumber\":156}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps8\",\"moduleSequenceNumber\":156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps9\",\"httpPortOpen\":false,\"ip\":\"42.9.3.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[596802,3,27,0],\"iron-gym\":[35484903,42,291,36]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":545.9186414314207,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.369,\"onlineExpGained\":5202.842628287247,\"onlineMoneyMade\":36081705,\"onlineRunningTime\":22484.610000039494,\"pid\":35,\"ramUsage\":2.4,\"server\":\"ps9\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///2c7da16a-197e-41bf-9092-44c1c33caa7d\",\"moduleSequenceNumber\":157}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///7903f165-6564-4186-b20d-3b0652f3dbe2\",\"moduleSequenceNumber\":157}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps9\",\"moduleSequenceNumber\":157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps10\",\"httpPortOpen\":false,\"ip\":\"92.9.8.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[1526301,6,18,3],\"hong-fang-tea\":[36299088,186,945,75]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":491.3267925713846,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.37,\"onlineExpGained\":10086.849938756197,\"onlineMoneyMade\":37825389,\"onlineRunningTime\":22484.610000039494,\"pid\":36,\"ramUsage\":2.4,\"server\":\"ps10\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///aa9a1662-61b6-4a94-bcb2-eac9228c5647\",\"moduleSequenceNumber\":158}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///2618641d-53f0-4867-b170-e5ca8ae36327\",\"moduleSequenceNumber\":158}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps10\",\"moduleSequenceNumber\":158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps11\",\"httpPortOpen\":false,\"ip\":\"36.1.9.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[0,0,51,6],\"hong-fang-tea\":[33969420,177,948,75]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":818.7509177905798,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.371,\"onlineExpGained\":10184.604888003696,\"onlineMoneyMade\":33969420,\"onlineRunningTime\":22484.610000039494,\"pid\":37,\"ramUsage\":2.4,\"server\":\"ps11\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///02a859b9-317d-4ffc-85f6-6f8775f31f72\",\"moduleSequenceNumber\":159}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///7b22d36a-1de3-4302-92ba-f22064be0979\",\"moduleSequenceNumber\":159}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps11\",\"moduleSequenceNumber\":159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps12\",\"httpPortOpen\":false,\"ip\":\"71.7.0.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[49738773,297,1584,141]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":873.4699349701378,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.373,\"onlineExpGained\":16530.207414785906,\"onlineMoneyMade\":49738773,\"onlineRunningTime\":22484.610000039494,\"pid\":38,\"ramUsage\":2.4,\"server\":\"ps12\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///b8bb0379-87c6-403d-92c7-dcea7d63a4d2\",\"moduleSequenceNumber\":160}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///9c7068e3-3ca4-459d-af42-d2a2bc502318\",\"moduleSequenceNumber\":160}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps12\",\"moduleSequenceNumber\":160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps13\",\"httpPortOpen\":false,\"ip\":\"8.6.2.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[42698604,255,1602,141]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":873.4700436500024,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.376999999997,\"onlineExpGained\":16310.130688849402,\"onlineMoneyMade\":42698604,\"onlineRunningTime\":22484.610000039494,\"pid\":39,\"ramUsage\":2.4,\"server\":\"ps13\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///29e8a009-092c-445d-936a-f9c2346df89e\",\"moduleSequenceNumber\":161}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///e93a8d39-103e-4ee9-a81d-c43967a476c7\",\"moduleSequenceNumber\":161}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps13\",\"moduleSequenceNumber\":161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps14\",\"httpPortOpen\":false,\"ip\":\"66.3.7.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[25979898,168,2037,177]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":818.7510960658088,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.377999999997,\"onlineExpGained\":15335.422870855287,\"onlineMoneyMade\":25979898,\"onlineRunningTime\":22484.610000039494,\"pid\":40,\"ramUsage\":2.4,\"server\":\"ps14\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///2309dc67-1723-453a-a244-3aa7b999c5c3\",\"moduleSequenceNumber\":162}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///88ba8aa0-a901-4a44-9a6f-43cce418d995\",\"moduleSequenceNumber\":162}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps14\",\"moduleSequenceNumber\":162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps15\",\"httpPortOpen\":false,\"ip\":\"3.4.1.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[0,0,27,0],\"sigma-cosmetics\":[24196803,156,1983,177]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":504.97488469279443,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.377999999997,\"onlineExpGained\":15136.969285800918,\"onlineMoneyMade\":24196803,\"onlineRunningTime\":22484.610000039494,\"pid\":41,\"ramUsage\":2.4,\"server\":\"ps15\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///b30276c2-1512-427d-9d37-f041fdb236e6\",\"moduleSequenceNumber\":163}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///336772b2-9ba1-4588-838e-45fe844661a8\",\"moduleSequenceNumber\":163}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps15\",\"moduleSequenceNumber\":163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps16\",\"httpPortOpen\":false,\"ip\":\"97.0.9.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[88988922,354,825,84]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":491.32694540244427,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.379999999997,\"onlineExpGained\":10361.945846176823,\"onlineMoneyMade\":88988922,\"onlineRunningTime\":22484.610000039494,\"pid\":42,\"ramUsage\":2.4,\"server\":\"ps16\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///9c7f7e27-f105-459e-b0f2-e801587678f0\",\"moduleSequenceNumber\":164}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///ee183778-9e59-44e7-a17a-3f5ae301447f\",\"moduleSequenceNumber\":164}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps16\",\"moduleSequenceNumber\":164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps17\",\"httpPortOpen\":false,\"ip\":\"68.9.3.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[0,0,51,6],\"harakiri-sushi\":[91553943,369,789,87]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":818.7511724694785,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.380999999998,\"onlineExpGained\":10600.305370328195,\"onlineMoneyMade\":91553943,\"onlineRunningTime\":22484.610000039494,\"pid\":43,\"ramUsage\":2.4,\"server\":\"ps17\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///53fc427e-3bc7-4e47-83b1-9367afb83491\",\"moduleSequenceNumber\":165}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///4735c26a-3526-44de-a59c-42648dfbfd7c\",\"moduleSequenceNumber\":165}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps17\",\"moduleSequenceNumber\":165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps18\",\"httpPortOpen\":false,\"ip\":\"49.8.9.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[597324,3,27,0],\"foodnstuff\":[12531984,90,2259,186]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":545.9188621873958,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.381999999998,\"onlineExpGained\":16554.702541139755,\"onlineMoneyMade\":13129308,\"onlineRunningTime\":22484.610000039494,\"pid\":44,\"ramUsage\":2.4,\"server\":\"ps18\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///e2099a88-a604-4ea3-929b-458c866d32c2\",\"moduleSequenceNumber\":166}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///f81508b5-c07b-43c3-8460-9ef20da16cf7\",\"moduleSequenceNumber\":166}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps18\",\"moduleSequenceNumber\":166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps19\",\"httpPortOpen\":false,\"ip\":\"8.2.3.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[0,0,42,6],\"sigma-cosmetics\":[25219431,162,1986,174]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":873.4702066697994,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.382999999998,\"onlineExpGained\":15330.979799801788,\"onlineMoneyMade\":25219431,\"onlineRunningTime\":22484.610000039494,\"pid\":45,\"ramUsage\":2.4,\"server\":\"ps19\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///f05b63e1-9819-4aea-b608-9c76711bcacf\",\"moduleSequenceNumber\":167}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///0d9aa8da-76ee-4371-ab71-4fe0c5844d8a\",\"moduleSequenceNumber\":167}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps19\",\"moduleSequenceNumber\":167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps20\",\"httpPortOpen\":false,\"ip\":\"92.7.5.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,63,3],\"harakiri-sushi\":[82013124,333,807,81]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":948.027761853119,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.384,\"onlineExpGained\":10499.267007359946,\"onlineMoneyMade\":82013124,\"onlineRunningTime\":22484.610000039494,\"pid\":46,\"ramUsage\":2.4,\"server\":\"ps20\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///2251489b-7c8f-463a-b101-a97792858f17\",\"moduleSequenceNumber\":168}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///7395281e-a71c-4896-bd87-ea25f2761659\",\"moduleSequenceNumber\":168}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps20\",\"moduleSequenceNumber\":168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps21\",\"httpPortOpen\":false,\"ip\":\"55.3.2.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[0,0,42,6],\"harakiri-sushi\":[76491579,309,807,90]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":873.470288179698,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.386,\"onlineExpGained\":10276.36045275707,\"onlineMoneyMade\":76491579,\"onlineRunningTime\":22484.610000039494,\"pid\":47,\"ramUsage\":2.4,\"server\":\"ps21\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///eb980995-d899-496b-8c22-d88e232da138\",\"moduleSequenceNumber\":169}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///1261c445-b9b8-4e39-a011-2679b7dd3a5d\",\"moduleSequenceNumber\":169}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps21\",\"moduleSequenceNumber\":169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps22\",\"httpPortOpen\":false,\"ip\":\"60.3.2.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[590958,3,27,0],\"joesguns\":[46011132,276,1548,138]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":545.91894709354,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.387,\"onlineExpGained\":16273.451234526654,\"onlineMoneyMade\":46602090,\"onlineRunningTime\":22484.610000039494,\"pid\":48,\"ramUsage\":2.4,\"server\":\"ps22\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///9bf09a2a-683c-4b57-bb46-ebc62352e0f2\",\"moduleSequenceNumber\":170}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///cb09a1c7-67fe-4288-87ca-468bc94e2712\",\"moduleSequenceNumber\":170}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps22\",\"moduleSequenceNumber\":170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps23\",\"httpPortOpen\":false,\"ip\":\"5.6.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[1495119,6,18,3],\"sigma-cosmetics\":[25545981,165,1986,174]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":491.32705238418606,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.387,\"onlineExpGained\":15179.110992661293,\"onlineMoneyMade\":27041100,\"onlineRunningTime\":22484.610000039494,\"pid\":49,\"ramUsage\":2.4,\"server\":\"ps23\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///63fd3bc3-a12f-4972-a4cf-37a800656cf3\",\"moduleSequenceNumber\":171}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///7622dd47-056b-4b66-861b-083498cc498e\",\"moduleSequenceNumber\":171}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps23\",\"moduleSequenceNumber\":171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ps24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"ps24\",\"httpPortOpen\":false,\"ip\":\"24.4.1.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[1479765,6,18,3],\"foodnstuff\":[10301409,75,2253,192]},\"filename\":\"farm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":491.32706766729206,\"offlineMoneyMade\":0,\"offlineRunningTime\":32148.388,\"onlineExpGained\":16448.2161578705,\"onlineMoneyMade\":11781174,\"onlineRunningTime\":22484.610000039494,\"pid\":50,\"ramUsage\":2.4,\"server\":\"ps24\",\"threads\":3,\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///98fe036e-4bb6-4c42-b6c9-40c5b6334f3d\",\"moduleSequenceNumber\":172}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\tlet targets = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\", \\\"iron-gym\\\"]\\n\\n\\tlet target = targets[Math.floor(Math.random()*targets.length)];\\n\\n\\t// Make sure the server has at least 75% of possible money before hacking it\\n\\tlet moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\n\\t// If the security is higher than this we must weaken first\\n\\tlet securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\t\\n\\t// Infinitly loop hack/grow/weaken on target\\n\\twhile(true) {\\n\\t\\tif(ns.getServerSecurityLevel(target) > securityThresh){\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif(ns.getServerMoneyAvailable(target) < moneyThresh){\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///c7363833-44fd-4828-8452-fc8e152ae3fc\",\"moduleSequenceNumber\":172}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ps24\",\"moduleSequenceNumber\":172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"24.6.3.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.028,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.3644,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0112,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.4549,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":22179.31873565796}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":22178.75507515254}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":2.7849,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":24229.208236382292}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":9.3124,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":69159.80272867138}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":24285.67072691583,\"lastPrice\":24320.016030923176,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":false,\"otlkMag\":17.752545330349896,\"otlkMagForecast\":29.87315476471851,\"cap\":514051517,\"spreadPerc\":0.4,\"shareTxForMovement\":39860,\"shareTxUntilMovement\":39860,\"totalShares\":112500000,\"maxShares\":22500000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":62672.24203228392,\"lastPrice\":62585.79027256288,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":false,\"otlkMag\":18.19327389303704,\"otlkMagForecast\":33.02032797628403,\"cap\":558614025,\"spreadPerc\":0.2,\"shareTxForMovement\":47796,\"shareTxUntilMovement\":20686,\"totalShares\":79100000,\"maxShares\":15800000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":12116.397094971124,\"lastPrice\":12084.99761415332,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":11.160924044166952,\"otlkMagForecast\":60.51619050283311,\"cap\":94874819,\"spreadPerc\":0.1,\"shareTxForMovement\":53679,\"shareTxUntilMovement\":53679,\"totalShares\":131200000,\"maxShares\":26200000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":24181.719422240363,\"lastPrice\":24123.009431314447,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":10.177992093104049,\"otlkMagForecast\":38.4938022998319,\"cap\":277777581,\"spreadPerc\":0.3,\"shareTxForMovement\":68235,\"shareTxUntilMovement\":66415,\"totalShares\":68700000,\"maxShares\":13700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":65490.202248676826,\"lastPrice\":65623.74392637581,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":12.478811307696361,\"otlkMagForecast\":38.94079317031428,\"cap\":539411577,\"spreadPerc\":0.3,\"shareTxForMovement\":76614,\"shareTxUntilMovement\":76614,\"totalShares\":44100000,\"maxShares\":8800000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":108057.69812428257,\"lastPrice\":107692.88283232847,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":true,\"otlkMag\":16.172369819430077,\"otlkMagForecast\":64.23603539614908,\"cap\":1438845790,\"spreadPerc\":0.2,\"shareTxForMovement\":35079,\"shareTxUntilMovement\":31509,\"totalShares\":30900000,\"maxShares\":6200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":27553.850921918114,\"lastPrice\":27629.97295821156,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":11.008247865262128,\"otlkMagForecast\":63.09363278152315,\"cap\":499942660,\"spreadPerc\":0.2,\"shareTxForMovement\":72573,\"shareTxUntilMovement\":72573,\"totalShares\":79000000,\"maxShares\":15800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":32236.2495385356,\"lastPrice\":32374.077289069584,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":false,\"otlkMag\":13.474624524099195,\"otlkMagForecast\":33.97244406870023,\"cap\":697362676,\"spreadPerc\":0.9,\"shareTxForMovement\":88149,\"shareTxUntilMovement\":88149,\"totalShares\":60400000,\"maxShares\":12100000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":10881.478509337141,\"lastPrice\":10910.466741738792,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":8.657346092123593,\"otlkMagForecast\":58.375213304645044,\"cap\":46712100,\"spreadPerc\":0.3,\"shareTxForMovement\":51654,\"shareTxUntilMovement\":51654,\"totalShares\":59300000,\"maxShares\":11900000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":17466.919119628554,\"lastPrice\":17501.387142030188,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":9.436878816351006,\"otlkMagForecast\":39.55128171045703,\"cap\":264467198,\"spreadPerc\":1,\"shareTxForMovement\":100930,\"shareTxUntilMovement\":100930,\"totalShares\":69500000,\"maxShares\":13900000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":15139.323586404698,\"lastPrice\":15171.688066522427,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":9.056233646252064,\"otlkMagForecast\":59.72296120676636,\"cap\":123807556,\"spreadPerc\":1,\"shareTxForMovement\":68884,\"shareTxUntilMovement\":68884,\"totalShares\":55400000,\"maxShares\":11100000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":8052.3780641687845,\"lastPrice\":8031.77390557002,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":5.883102039945512,\"otlkMagForecast\":55.385157325236946,\"cap\":63173173,\"spreadPerc\":0.3,\"shareTxForMovement\":77050,\"shareTxUntilMovement\":77050,\"totalShares\":122200000,\"maxShares\":24400000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":29708.700604001286,\"lastPrice\":29767.325719909182,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":5.658903253652086,\"otlkMagForecast\":58.22553418655016,\"cap\":30994478,\"spreadPerc\":0.8,\"shareTxForMovement\":68006,\"shareTxUntilMovement\":68006,\"totalShares\":36800000,\"maxShares\":7400000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":18865.20031656407,\"lastPrice\":18832.373427030976,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":true,\"otlkMag\":9.281376627124864,\"otlkMagForecast\":59.56397324150863,\"cap\":278865534,\"spreadPerc\":0.5,\"shareTxForMovement\":67988,\"shareTxUntilMovement\":67988,\"totalShares\":49300000,\"maxShares\":9900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":9356.045934077953,\"lastPrice\":9375.12393395832,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":5.388960188741813,\"otlkMagForecast\":44.551680951503414,\"cap\":167324044,\"spreadPerc\":0.8,\"shareTxForMovement\":112195,\"shareTxUntilMovement\":112195,\"totalShares\":79900000,\"maxShares\":16000000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":5008.472841071785,\"lastPrice\":4997.4606688601425,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":5.249089436461104,\"otlkMagForecast\":55.063488693217884,\"cap\":51684145,\"spreadPerc\":0.5,\"shareTxForMovement\":100052,\"shareTxUntilMovement\":100052,\"totalShares\":67700000,\"maxShares\":13500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":28669.838694969883,\"lastPrice\":28737.72881129467,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":6.85974837966601,\"otlkMagForecast\":40.48112099924419,\"cap\":108942974,\"spreadPerc\":0.8,\"shareTxForMovement\":83730,\"shareTxUntilMovement\":83730,\"totalShares\":26400000,\"maxShares\":5300000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":13293.525872891618,\"lastPrice\":13267.345002548882,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":10.315590824720386,\"otlkMagForecast\":39.024095817796635,\"cap\":550565334,\"spreadPerc\":0.6,\"shareTxForMovement\":124008,\"shareTxUntilMovement\":124008,\"totalShares\":31200000,\"maxShares\":6200000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":20529.61300518252,\"lastPrice\":20582.278257878028,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":5.434504400884815,\"otlkMagForecast\":45.726555372643695,\"cap\":58636428,\"spreadPerc\":1,\"shareTxForMovement\":111057,\"shareTxUntilMovement\":111057,\"totalShares\":36500000,\"maxShares\":7300000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":7236.778175701174,\"lastPrice\":7295.566491822382,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.47,\"b\":false,\"otlkMag\":5.641660883868251,\"otlkMagForecast\":51.13403259172464,\"cap\":143516127,\"spreadPerc\":0.5,\"shareTxForMovement\":12755,\"shareTxUntilMovement\":12755,\"totalShares\":72600000,\"maxShares\":14500000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7247.433903341834,\"lastPrice\":7216.579046750181,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":6.180549739362639,\"otlkMagForecast\":56.63743230665377,\"cap\":35557128,\"spreadPerc\":0.8,\"shareTxForMovement\":38904,\"shareTxUntilMovement\":38904,\"totalShares\":61600000,\"maxShares\":12300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":7278.775106492542,\"lastPrice\":7295.053667846336,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":1.2340556504261677,\"otlkMagForecast\":53.0126849326743,\"cap\":48518847,\"spreadPerc\":0.4,\"shareTxForMovement\":84753,\"shareTxUntilMovement\":84753,\"totalShares\":32400000,\"maxShares\":6500000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":11467.978947747692,\"lastPrice\":11391.549315672155,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.04,\"b\":true,\"otlkMag\":6.294124366171814,\"otlkMagForecast\":58.4608904130657,\"cap\":117402597,\"spreadPerc\":1.6,\"shareTxForMovement\":75077,\"shareTxUntilMovement\":75077,\"totalShares\":44600000,\"maxShares\":8900000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":12616.238439753712,\"lastPrice\":12546.912628188556,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.68,\"b\":false,\"otlkMag\":5.236568387025746,\"otlkMagForecast\":44.21211867869924,\"cap\":164668530,\"spreadPerc\":0.8,\"shareTxForMovement\":75652,\"shareTxUntilMovement\":75652,\"totalShares\":27400000,\"maxShares\":5500000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":4328.489484043184,\"lastPrice\":4316.422695563903,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":5.6249261263636585,\"otlkMagForecast\":45.629203031159555,\"cap\":69794452,\"spreadPerc\":1.1,\"shareTxForMovement\":84752,\"shareTxUntilMovement\":84752,\"totalShares\":65400000,\"maxShares\":13100000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":204.89680587769723,\"lastPrice\":206.9656242799965,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.07,\"b\":false,\"otlkMag\":6.594725234857122,\"otlkMagForecast\":43.44000137126744,\"cap\":27975115,\"spreadPerc\":1,\"shareTxForMovement\":37940,\"shareTxUntilMovement\":37940,\"totalShares\":32400000,\"maxShares\":6500000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3072.353581976783,\"lastPrice\":3062.683677501268,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":1.3169928382186433,\"otlkMagForecast\":53.22719324308144,\"cap\":18887789,\"spreadPerc\":0.8,\"shareTxForMovement\":89208,\"shareTxUntilMovement\":89208,\"totalShares\":21500000,\"maxShares\":4300000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1085.1853564947855,\"lastPrice\":1087.8264540997154,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":3.471649460558494,\"otlkMagForecast\":50.67606533701019,\"cap\":12241178,\"spreadPerc\":0.8,\"shareTxForMovement\":137419,\"shareTxUntilMovement\":137419,\"totalShares\":44900000,\"maxShares\":9000000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2270.705055450464,\"lastPrice\":2283.47548907535,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.71,\"b\":false,\"otlkMag\":5.382498407775032,\"otlkMagForecast\":46.15638479343501,\"cap\":21645578,\"spreadPerc\":1.1,\"shareTxForMovement\":28588,\"shareTxUntilMovement\":28588,\"totalShares\":18700000,\"maxShares\":3700000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1247.375566562876,\"lastPrice\":1236.3560722790987,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.71,\"b\":false,\"otlkMag\":8.293893710782408,\"otlkMagForecast\":44.538803414149605,\"cap\":2262478,\"spreadPerc\":0.9,\"shareTxForMovement\":41108,\"shareTxUntilMovement\":41108,\"totalShares\":38700000,\"maxShares\":7700000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":2442.313914279954,\"lastPrice\":2452.7561536136786,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":18.928273938192273,\"otlkMagForecast\":63.882396316440946,\"cap\":12504459,\"spreadPerc\":1,\"shareTxForMovement\":42171,\"shareTxUntilMovement\":42171,\"totalShares\":80200000,\"maxShares\":16000000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":20806.553055349665,\"lastPrice\":20752.633151732673,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":7.755851654451558,\"otlkMagForecast\":57.58414589503397,\"cap\":559897510,\"spreadPerc\":0.4,\"shareTxForMovement\":100311,\"shareTxUntilMovement\":100311,\"totalShares\":14500000,\"maxShares\":2900000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":30707.84024261075,\"lastPrice\":30770.456883935807,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":12.991460541760063,\"otlkMagForecast\":37.78877282538591,\"cap\":356430953,\"spreadPerc\":0.2,\"shareTxForMovement\":182124,\"shareTxUntilMovement\":182124,\"totalShares\":21100000,\"maxShares\":4200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":934,\"lastUpdate\":1643060314651,\"ticksUntilCycle\":26}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1643060315163","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643060315173"}}